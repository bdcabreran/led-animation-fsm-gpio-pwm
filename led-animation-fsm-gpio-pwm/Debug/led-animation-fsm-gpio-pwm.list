
led-animation-fsm-gpio-pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007554  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a28  080076f8  080076f8  000176f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008120  08008120  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08008120  08008120  00018120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008128  08008128  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008128  08008128  00018128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800812c  0800812c  0001812c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08008130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b80  200001f4  08008324  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d74  08008324  00020d74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150d2  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003512  00000000  00000000  000352f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  00038808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac8  00000000  00000000  00039400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d05  00000000  00000000  00039ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010221  00000000  00000000  00052bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089690  00000000  00000000  00062dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ec47e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e5c  00000000  00000000  000ec4d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080076dc 	.word	0x080076dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	080076dc 	.word	0x080076dc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <head_ptr_advance>:
 * @brief Advance head pointer by 1 position
 * 
 * @param c_buff variable of type circular_buff_t* which contains the struct associated to the circular buffer
 */
static void head_ptr_advance(c_buff_handle_t c_buff)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
    assert(c_buff);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d105      	bne.n	8000eca <head_ptr_advance+0x1a>
 8000ebe:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <head_ptr_advance+0x74>)
 8000ec0:	4a19      	ldr	r2, [pc, #100]	; (8000f28 <head_ptr_advance+0x78>)
 8000ec2:	2126      	movs	r1, #38	; 0x26
 8000ec4:	4819      	ldr	r0, [pc, #100]	; (8000f2c <head_ptr_advance+0x7c>)
 8000ec6:	f003 fe79 	bl	8004bbc <__assert_func>

    if (c_buff->full)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	7c1b      	ldrb	r3, [r3, #16]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00b      	beq.n	8000eea <head_ptr_advance+0x3a>
    {
        c_buff->tail = (c_buff->tail + 1) % c_buff->length;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	68d2      	ldr	r2, [r2, #12]
 8000edc:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ee0:	fb02 f201 	mul.w	r2, r2, r1
 8000ee4:	1a9a      	subs	r2, r3, r2
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
    }

    // We mark full because we will advance tail on the next time around
    c_buff->head = (c_buff->head + 1) % c_buff->length;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	68d2      	ldr	r2, [r2, #12]
 8000ef4:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ef8:	fb02 f201 	mul.w	r2, r2, r1
 8000efc:	1a9a      	subs	r2, r3, r2
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	605a      	str	r2, [r3, #4]
    c_buff->full = (c_buff->head == c_buff->tail);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	bf0c      	ite	eq
 8000f0e:	2301      	moveq	r3, #1
 8000f10:	2300      	movne	r3, #0
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	461a      	mov	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	741a      	strb	r2, [r3, #16]
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	080076f8 	.word	0x080076f8
 8000f28:	08007c04 	.word	0x08007c04
 8000f2c:	08007700 	.word	0x08007700

08000f30 <tail_ptr_retreat>:
 * @brief Retreat tail pointer by 1 position
 * 
 * @param c_buff variable of type circular_buff_t* which contains the struct associated to the circular buffer
 */
static void tail_ptr_retreat(c_buff_handle_t c_buff)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
    assert(c_buff);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d105      	bne.n	8000f4a <tail_ptr_retreat+0x1a>
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <tail_ptr_retreat+0x40>)
 8000f40:	4a0c      	ldr	r2, [pc, #48]	; (8000f74 <tail_ptr_retreat+0x44>)
 8000f42:	2139      	movs	r1, #57	; 0x39
 8000f44:	480c      	ldr	r0, [pc, #48]	; (8000f78 <tail_ptr_retreat+0x48>)
 8000f46:	f003 fe39 	bl	8004bbc <__assert_func>

    c_buff->full = 0;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	741a      	strb	r2, [r3, #16]
    c_buff->tail = (c_buff->tail + 1) % c_buff->length;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	3301      	adds	r3, #1
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	68d2      	ldr	r2, [r2, #12]
 8000f5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f5e:	fb02 f201 	mul.w	r2, r2, r1
 8000f62:	1a9a      	subs	r2, r3, r2
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	609a      	str	r2, [r3, #8]
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	080076f8 	.word	0x080076f8
 8000f74:	08007c18 	.word	0x08007c18
 8000f78:	08007700 	.word	0x08007700

08000f7c <circular_buff_empty>:
 * 
 * @param c_buff variable of type circular_buff_t* which contains the struct associated to the circular buffer
 * @return uint8_t return 1 if circular buffer is empty, return 0 otherwise.
 */
uint8_t circular_buff_empty(c_buff_handle_t c_buff)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    assert(c_buff);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d105      	bne.n	8000f96 <circular_buff_empty+0x1a>
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <circular_buff_empty+0x40>)
 8000f8c:	4a0c      	ldr	r2, [pc, #48]	; (8000fc0 <circular_buff_empty+0x44>)
 8000f8e:	214e      	movs	r1, #78	; 0x4e
 8000f90:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <circular_buff_empty+0x48>)
 8000f92:	f003 fe13 	bl	8004bbc <__assert_func>

    return (!c_buff->full && (c_buff->tail == c_buff->head));
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	7c1b      	ldrb	r3, [r3, #16]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d107      	bne.n	8000fae <circular_buff_empty+0x32>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d101      	bne.n	8000fae <circular_buff_empty+0x32>
 8000faa:	2301      	movs	r3, #1
 8000fac:	e000      	b.n	8000fb0 <circular_buff_empty+0x34>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	b2db      	uxtb	r3, r3
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	080076f8 	.word	0x080076f8
 8000fc0:	08007c2c 	.word	0x08007c2c
 8000fc4:	08007700 	.word	0x08007700

08000fc8 <circular_buff_init>:
 * @param buffer  pointer to a buffer reserved in memory by the user that is going to be register in circular buffer
 * @param size    size of the buffer to be register.
 * @param c_buff variable of type circular_buff_t* which contains the struct associated to the initialized circular buffer.
 */
c_buff_handle_t circular_buff_init(uint8_t *buffer, size_t size)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
    assert(buffer && size);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d002      	beq.n	8000fde <circular_buff_init+0x16>
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d105      	bne.n	8000fea <circular_buff_init+0x22>
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <circular_buff_init+0x74>)
 8000fe0:	4a17      	ldr	r2, [pc, #92]	; (8001040 <circular_buff_init+0x78>)
 8000fe2:	2169      	movs	r1, #105	; 0x69
 8000fe4:	4817      	ldr	r0, [pc, #92]	; (8001044 <circular_buff_init+0x7c>)
 8000fe6:	f003 fde9 	bl	8004bbc <__assert_func>

    c_buff_handle_t c_buff = malloc(sizeof(circular_buff_t));
 8000fea:	2014      	movs	r0, #20
 8000fec:	f003 fe40 	bl	8004c70 <malloc>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60fb      	str	r3, [r7, #12]
    assert(c_buff);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d105      	bne.n	8001006 <circular_buff_init+0x3e>
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <circular_buff_init+0x80>)
 8000ffc:	4a10      	ldr	r2, [pc, #64]	; (8001040 <circular_buff_init+0x78>)
 8000ffe:	216c      	movs	r1, #108	; 0x6c
 8001000:	4810      	ldr	r0, [pc, #64]	; (8001044 <circular_buff_init+0x7c>)
 8001002:	f003 fddb 	bl	8004bbc <__assert_func>

    c_buff->buffer = buffer;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	601a      	str	r2, [r3, #0]
    c_buff->length = size;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	60da      	str	r2, [r3, #12]
    circular_buff_reset(c_buff);
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	f000 f81c 	bl	8001050 <circular_buff_reset>

    assert(circular_buff_empty(c_buff));
 8001018:	68f8      	ldr	r0, [r7, #12]
 800101a:	f7ff ffaf 	bl	8000f7c <circular_buff_empty>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d105      	bne.n	8001030 <circular_buff_init+0x68>
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <circular_buff_init+0x84>)
 8001026:	4a06      	ldr	r2, [pc, #24]	; (8001040 <circular_buff_init+0x78>)
 8001028:	2172      	movs	r1, #114	; 0x72
 800102a:	4806      	ldr	r0, [pc, #24]	; (8001044 <circular_buff_init+0x7c>)
 800102c:	f003 fdc6 	bl	8004bbc <__assert_func>

    return c_buff;
 8001030:	68fb      	ldr	r3, [r7, #12]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	08007724 	.word	0x08007724
 8001040:	08007c40 	.word	0x08007c40
 8001044:	08007700 	.word	0x08007700
 8001048:	080076f8 	.word	0x080076f8
 800104c:	08007734 	.word	0x08007734

08001050 <circular_buff_reset>:
 * @brief Reset Circular buffer to default configuration
 * 
 * @param c_buff variable of type circular_buff_t* which contains the struct associated to the circular buffer
 */
void circular_buff_reset(c_buff_handle_t c_buff)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
    assert(c_buff);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d105      	bne.n	800106a <circular_buff_reset+0x1a>
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <circular_buff_reset+0x34>)
 8001060:	4a09      	ldr	r2, [pc, #36]	; (8001088 <circular_buff_reset+0x38>)
 8001062:	2189      	movs	r1, #137	; 0x89
 8001064:	4809      	ldr	r0, [pc, #36]	; (800108c <circular_buff_reset+0x3c>)
 8001066:	f003 fda9 	bl	8004bbc <__assert_func>
    c_buff->head = 0;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	605a      	str	r2, [r3, #4]
    c_buff->tail = 0;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
    c_buff->full = 0;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	741a      	strb	r2, [r3, #16]
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	080076f8 	.word	0x080076f8
 8001088:	08007c54 	.word	0x08007c54
 800108c:	08007700 	.word	0x08007700

08001090 <circular_buff_get_data_len>:
 * 
 * @param c_buff variable of type circular_buff_t* which contains the struct associated to the circular buffer
 * @return size_t return number of bytes in buffer.
 */
size_t circular_buff_get_data_len(c_buff_handle_t c_buff)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
    assert(c_buff);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d105      	bne.n	80010aa <circular_buff_get_data_len+0x1a>
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <circular_buff_get_data_len+0x60>)
 80010a0:	4a14      	ldr	r2, [pc, #80]	; (80010f4 <circular_buff_get_data_len+0x64>)
 80010a2:	2197      	movs	r1, #151	; 0x97
 80010a4:	4814      	ldr	r0, [pc, #80]	; (80010f8 <circular_buff_get_data_len+0x68>)
 80010a6:	f003 fd89 	bl	8004bbc <__assert_func>

    size_t size = c_buff->length;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	60fb      	str	r3, [r7, #12]

    if (!c_buff->full)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	7c1b      	ldrb	r3, [r3, #16]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d115      	bne.n	80010e4 <circular_buff_get_data_len+0x54>
    {
        if (c_buff->head >= c_buff->tail)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d306      	bcc.n	80010d2 <circular_buff_get_data_len+0x42>
        {
            size = (c_buff->head - c_buff->tail);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	e008      	b.n	80010e4 <circular_buff_get_data_len+0x54>
        }
        else
        {
            size = (c_buff->length + c_buff->head - c_buff->tail);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	441a      	add	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	60fb      	str	r3, [r7, #12]
        }
    }

    return size;
 80010e4:	68fb      	ldr	r3, [r7, #12]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	080076f8 	.word	0x080076f8
 80010f4:	08007c68 	.word	0x08007c68
 80010f8:	08007700 	.word	0x08007700

080010fc <circular_buff_get_free_space>:
 * 
 * @param c_buff variable of type circular_buff_t* which contains the struct associated to the circular buffer
 * @return size_t return the number of bytes available in circular buffer 
 */
size_t circular_buff_get_free_space(c_buff_handle_t c_buff)
{
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
    assert(c_buff);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d105      	bne.n	8001116 <circular_buff_get_free_space+0x1a>
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <circular_buff_get_free_space+0x30>)
 800110c:	4a08      	ldr	r2, [pc, #32]	; (8001130 <circular_buff_get_free_space+0x34>)
 800110e:	21be      	movs	r1, #190	; 0xbe
 8001110:	4808      	ldr	r0, [pc, #32]	; (8001134 <circular_buff_get_free_space+0x38>)
 8001112:	f003 fd53 	bl	8004bbc <__assert_func>
    return (c_buff->length - circular_buff_get_data_len(c_buff));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68dc      	ldr	r4, [r3, #12]
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffb8 	bl	8001090 <circular_buff_get_data_len>
 8001120:	4603      	mov	r3, r0
 8001122:	1ae3      	subs	r3, r4, r3
}
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	bd90      	pop	{r4, r7, pc}
 800112c:	080076f8 	.word	0x080076f8
 8001130:	08007c84 	.word	0x08007c84
 8001134:	08007700 	.word	0x08007700

08001138 <circular_buff_put>:
 * 
 * @param c_buff variable of type circular_buff_t* which contains the struct associated to the circular buffer
 * @param data byte to be written in buffer.
 */
void circular_buff_put(c_buff_handle_t c_buff, uint8_t data)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	70fb      	strb	r3, [r7, #3]
    assert(c_buff && c_buff->buffer);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <circular_buff_put+0x1a>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d105      	bne.n	800115e <circular_buff_put+0x26>
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <circular_buff_put+0x44>)
 8001154:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <circular_buff_put+0x48>)
 8001156:	21ca      	movs	r1, #202	; 0xca
 8001158:	480a      	ldr	r0, [pc, #40]	; (8001184 <circular_buff_put+0x4c>)
 800115a:	f003 fd2f 	bl	8004bbc <__assert_func>

    c_buff->buffer[c_buff->head] = data;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	4413      	add	r3, r2
 8001168:	78fa      	ldrb	r2, [r7, #3]
 800116a:	701a      	strb	r2, [r3, #0]

    head_ptr_advance(c_buff);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff fe9f 	bl	8000eb0 <head_ptr_advance>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	08007750 	.word	0x08007750
 8001180:	08007ca4 	.word	0x08007ca4
 8001184:	08007700 	.word	0x08007700

08001188 <circular_buff_get>:
 * @param c_buff variable of type circular_buff_t* which contains the struct associated to the circular buffer
 * @param data   pointer to a variable to be fill whit the data in buffer.
 * @return uint8_t  return 0 if there is not data available to be read, return 1 otherwise.
 */
uint8_t circular_buff_get(c_buff_handle_t c_buff, uint8_t *data)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
    assert(c_buff && data && c_buff->buffer);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d006      	beq.n	80011a6 <circular_buff_get+0x1e>
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <circular_buff_get+0x1e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d105      	bne.n	80011b2 <circular_buff_get+0x2a>
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <circular_buff_get+0x60>)
 80011a8:	4a10      	ldr	r2, [pc, #64]	; (80011ec <circular_buff_get+0x64>)
 80011aa:	21da      	movs	r1, #218	; 0xda
 80011ac:	4810      	ldr	r0, [pc, #64]	; (80011f0 <circular_buff_get+0x68>)
 80011ae:	f003 fd05 	bl	8004bbc <__assert_func>

    int r = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]

    if (!circular_buff_empty(c_buff))
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff fee0 	bl	8000f7c <circular_buff_empty>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10c      	bne.n	80011dc <circular_buff_get+0x54>
    {
        *data = c_buff->buffer[c_buff->tail];
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	4413      	add	r3, r2
 80011cc:	781a      	ldrb	r2, [r3, #0]
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	701a      	strb	r2, [r3, #0]
        tail_ptr_retreat(c_buff);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff feac 	bl	8000f30 <tail_ptr_retreat>

        r = 1;
 80011d8:	2301      	movs	r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
    }

    return r;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	b2db      	uxtb	r3, r3
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	0800776c 	.word	0x0800776c
 80011ec:	08007cb8 	.word	0x08007cb8
 80011f0:	08007700 	.word	0x08007700

080011f4 <circular_buff_write>:
 * @param data   pointer to a buffer that contains the data to be written in buffer
 * @param data_len number of bytes of data to be written in buffer
 * @return circular_buff_st_t  return status of buffer.
 */
circular_buff_st_t circular_buff_write(c_buff_handle_t c_buff, uint8_t *data, uint8_t data_len)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	4613      	mov	r3, r2
 8001200:	71fb      	strb	r3, [r7, #7]
    assert(c_buff && c_buff->buffer);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <circular_buff_write+0x1c>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d105      	bne.n	800121c <circular_buff_write+0x28>
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <circular_buff_write+0x74>)
 8001212:	4a16      	ldr	r2, [pc, #88]	; (800126c <circular_buff_write+0x78>)
 8001214:	21f3      	movs	r1, #243	; 0xf3
 8001216:	4816      	ldr	r0, [pc, #88]	; (8001270 <circular_buff_write+0x7c>)
 8001218:	f003 fcd0 	bl	8004bbc <__assert_func>

    if (c_buff->full)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	7c1b      	ldrb	r3, [r3, #16]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <circular_buff_write+0x34>
    {
        return CIRCULAR_BUFF_FULL;
 8001224:	2301      	movs	r3, #1
 8001226:	e01a      	b.n	800125e <circular_buff_write+0x6a>
    }

    if (circular_buff_get_free_space(c_buff) < data_len)
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f7ff ff67 	bl	80010fc <circular_buff_get_free_space>
 800122e:	4602      	mov	r2, r0
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	429a      	cmp	r2, r3
 8001234:	d201      	bcs.n	800123a <circular_buff_write+0x46>
    {
        return CIRCUILAR_BUFF_NOT_ENOUGH_SPACE;
 8001236:	2302      	movs	r3, #2
 8001238:	e011      	b.n	800125e <circular_buff_write+0x6a>
    }
    else
    {
        size_t data_counter = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]

        while (data_counter < data_len)
 800123e:	e009      	b.n	8001254 <circular_buff_write+0x60>
        {
            circular_buff_put(c_buff, data[data_counter++]);
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	617a      	str	r2, [r7, #20]
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	4413      	add	r3, r2
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f7ff ff72 	bl	8001138 <circular_buff_put>
        while (data_counter < data_len)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	429a      	cmp	r2, r3
 800125a:	d3f1      	bcc.n	8001240 <circular_buff_write+0x4c>
        }

        return CIRCULAR_BUFF_OK;
 800125c:	2300      	movs	r3, #0
    }
}
 800125e:	4618      	mov	r0, r3
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	08007750 	.word	0x08007750
 800126c:	08007ccc 	.word	0x08007ccc
 8001270:	08007700 	.word	0x08007700

08001274 <circular_buff_read>:
 * @param data pointer to a buffer to be filled.
 * @param data_len  number of bytes to be read in circular buffer.
 * @return uint8_t  return 1 if number of bytes requested to be read is correct, return 0 otherwise.
 */
uint8_t circular_buff_read(c_buff_handle_t c_buff, uint8_t *data, size_t data_len)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
    assert(c_buff && c_buff->buffer && data);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d006      	beq.n	8001294 <circular_buff_read+0x20>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <circular_buff_read+0x20>
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d106      	bne.n	80012a2 <circular_buff_read+0x2e>
 8001294:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <circular_buff_read+0x64>)
 8001296:	4a11      	ldr	r2, [pc, #68]	; (80012dc <circular_buff_read+0x68>)
 8001298:	f240 1115 	movw	r1, #277	; 0x115
 800129c:	4810      	ldr	r0, [pc, #64]	; (80012e0 <circular_buff_read+0x6c>)
 800129e:	f003 fc8d 	bl	8004bbc <__assert_func>

    size_t data_counter = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]

    while (data_counter < data_len)
 80012a6:	e00d      	b.n	80012c4 <circular_buff_read+0x50>
    {
        if (!circular_buff_get(c_buff, &data[data_counter++]))
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	617a      	str	r2, [r7, #20]
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	4413      	add	r3, r2
 80012b2:	4619      	mov	r1, r3
 80012b4:	68f8      	ldr	r0, [r7, #12]
 80012b6:	f7ff ff67 	bl	8001188 <circular_buff_get>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d101      	bne.n	80012c4 <circular_buff_read+0x50>
        {
            return 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	e004      	b.n	80012ce <circular_buff_read+0x5a>
    while (data_counter < data_len)
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d3ed      	bcc.n	80012a8 <circular_buff_read+0x34>
        }
    }

    return 1;
 80012cc:	2301      	movs	r3, #1
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	08007790 	.word	0x08007790
 80012dc:	08007ce0 	.word	0x08007ce0
 80012e0:	08007700 	.word	0x08007700

080012e4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80012ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80012f0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d013      	beq.n	8001324 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80012fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001300:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001304:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00b      	beq.n	8001324 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800130c:	e000      	b.n	8001310 <ITM_SendChar+0x2c>
    {
      __NOP();
 800130e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001310:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f9      	beq.n	800130e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800131a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001324:	687b      	ldr	r3, [r7, #4]
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <ITM_enable>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )


void ITM_enable(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <ITM_enable+0x30>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a09      	ldr	r2, [pc, #36]	; (8001364 <ITM_enable+0x30>)
 800133e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001342:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM->TER |= ( 1 << 0);
 8001344:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001348:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800134c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000edfc 	.word	0xe000edfc

08001368 <_write>:
	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
}

int _write(int file, char *ptr, int len)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0 ; DataIdx < len; DataIdx++)
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	e009      	b.n	800138e <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	1c5a      	adds	r2, r3, #1
 800137e:	60ba      	str	r2, [r7, #8]
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ffae 	bl	80012e4 <ITM_SendChar>
	for(DataIdx = 0 ; DataIdx < len; DataIdx++)
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	3301      	adds	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	429a      	cmp	r2, r3
 8001394:	dbf1      	blt.n	800137a <_write+0x12>
	}
	return len;
 8001396:	687b      	ldr	r3, [r7, #4]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <time_event_start>:
#include <assert.h>

bool volatile update_time_events_flag = false;

void time_event_start(time_event_t *time_event, const uint32_t time_ms)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	assert(time_event);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d105      	bne.n	80013bc <time_event_start+0x1c>
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <time_event_start+0x38>)
 80013b2:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <time_event_start+0x3c>)
 80013b4:	2111      	movs	r1, #17
 80013b6:	480a      	ldr	r0, [pc, #40]	; (80013e0 <time_event_start+0x40>)
 80013b8:	f003 fc00 	bl	8004bbc <__assert_func>
    time_event->millis_cnt = time_ms;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	601a      	str	r2, [r3, #0]
    time_event->active = true;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2201      	movs	r2, #1
 80013c6:	711a      	strb	r2, [r3, #4]
    time_event->raised = false;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	715a      	strb	r2, [r3, #5]
}   
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	080077b4 	.word	0x080077b4
 80013dc:	08007cf4 	.word	0x08007cf4
 80013e0:	080077c0 	.word	0x080077c0

080013e4 <time_event_stop>:

void time_event_stop(time_event_t *time_event)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
    assert(time_event);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d105      	bne.n	80013fe <time_event_stop+0x1a>
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <time_event_stop+0x34>)
 80013f4:	4a09      	ldr	r2, [pc, #36]	; (800141c <time_event_stop+0x38>)
 80013f6:	2119      	movs	r1, #25
 80013f8:	4809      	ldr	r0, [pc, #36]	; (8001420 <time_event_stop+0x3c>)
 80013fa:	f003 fbdf 	bl	8004bbc <__assert_func>
    time_event->active = false;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	711a      	strb	r2, [r3, #4]
    time_event->raised = false;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	715a      	strb	r2, [r3, #5]
    time_event->millis_cnt = 0;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]

}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	080077b4 	.word	0x080077b4
 800141c:	08007d08 	.word	0x08007d08
 8001420:	080077c0 	.word	0x080077c0

08001424 <time_event_update>:
    assert(time_event);
    return time_event->active;
}

bool time_event_update(time_event_t *time_event)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
    if (time_event->active == true)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	791b      	ldrb	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d00c      	beq.n	800144e <time_event_update+0x2a>
    {
        if (time_event->millis_cnt > 0)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <time_event_update+0x24>
            time_event->millis_cnt--;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	1e5a      	subs	r2, r3, #1
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	e002      	b.n	800144e <time_event_update+0x2a>
        else
            time_event->raised = true;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	715a      	strb	r2, [r3, #5]
    }

    return true;
 800144e:	2301      	movs	r3, #1
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <time_event_is_raised>:

bool time_event_is_raised(time_event_t *time_event)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
    return time_event->raised;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	795b      	ldrb	r3, [r3, #5]
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <HAL_SYSTICK_Callback>:
/**
 * @brief Systick Callback Function 
 * @note  This callback is executed every ms
 */
void HAL_SYSTICK_Callback(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
    /* update FSM time events*/
    host_comm_tx_fsm_time_event_update(&host_comm_tx_handle);
 8001478:	4805      	ldr	r0, [pc, #20]	; (8001490 <HAL_SYSTICK_Callback+0x1c>)
 800147a:	f000 fe57 	bl	800212c <host_comm_tx_fsm_time_event_update>
    host_comm_rx_fsm_time_event_update(&host_comm_rx_handle);
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <HAL_SYSTICK_Callback+0x20>)
 8001480:	f000 fc02 	bl	8001c88 <host_comm_rx_fsm_time_event_update>
    led_animation_time_update(&led_animation);
 8001484:	4804      	ldr	r0, [pc, #16]	; (8001498 <HAL_SYSTICK_Callback+0x24>)
 8001486:	f001 f942 	bl	800270e <led_animation_time_update>

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000c00 	.word	0x20000c00
 8001494:	20000adc 	.word	0x20000adc
 8001498:	20000d1c 	.word	0x20000d1c

0800149c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	; (80014ec <MX_USART2_UART_Init+0x50>)
 80014a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014c2:	220c      	movs	r2, #12
 80014c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014d4:	f002 fc70 	bl	8003db8 <HAL_UART_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014de:	f001 f9c3 	bl	8002868 <Error_Handler>
  }
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000a98 	.word	0x20000a98
 80014ec:	40004400 	.word	0x40004400

080014f0 <uart_init>:
 * @param rx_buff buffer in stack reserved for data reception 
 * @param tx_buff buffer in stack reserved for data transmission
 * @return uint8_t 
 */
uint8_t uart_init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
    /*Init Uart device*/
    MX_USART2_UART_Init();
 80014f4:	f7ff ffd2 	bl	800149c <MX_USART2_UART_Init>

    /*Init Circular Buffer*/
    uart_data.tx.cb = circular_buff_init(uart_data.tx.buffer, TX_DATA_BUFF_SIZE);
 80014f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014fc:	480b      	ldr	r0, [pc, #44]	; (800152c <uart_init+0x3c>)
 80014fe:	f7ff fd63 	bl	8000fc8 <circular_buff_init>
 8001502:	4603      	mov	r3, r0
 8001504:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <uart_init+0x40>)
 8001506:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
    uart_data.rx.cb = circular_buff_init(uart_data.rx.buffer, RX_DATA_BUFF_SIZE);
 800150a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800150e:	4808      	ldr	r0, [pc, #32]	; (8001530 <uart_init+0x40>)
 8001510:	f7ff fd5a 	bl	8000fc8 <circular_buff_init>
 8001514:	4603      	mov	r3, r0
 8001516:	4a06      	ldr	r2, [pc, #24]	; (8001530 <uart_init+0x40>)
 8001518:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /*Start Reception of data*/
    HAL_UART_Receive_IT(&huart2, &uart_data.rx.byte, 1);
 800151c:	2201      	movs	r2, #1
 800151e:	4905      	ldr	r1, [pc, #20]	; (8001534 <uart_init+0x44>)
 8001520:	4805      	ldr	r0, [pc, #20]	; (8001538 <uart_init+0x48>)
 8001522:	f002 fcdb 	bl	8003edc <HAL_UART_Receive_IT>

    uart_driver_dbg("comm driver info : uart2 initialized\r\n");

    return 1;
 8001526:	2301      	movs	r3, #1
}
 8001528:	4618      	mov	r0, r3
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000418 	.word	0x20000418
 8001530:	20000210 	.word	0x20000210
 8001534:	20000414 	.word	0x20000414
 8001538:	20000a98 	.word	0x20000a98

0800153c <uart_get_rx_data_len>:

uint8_t uart_get_rx_data_len(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
    return circular_buff_get_data_len(uart_data.rx.cb);
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <uart_get_rx_data_len+0x18>)
 8001542:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fda2 	bl	8001090 <circular_buff_get_data_len>
 800154c:	4603      	mov	r3, r0
 800154e:	b2db      	uxtb	r3, r3
}
 8001550:	4618      	mov	r0, r3
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000210 	.word	0x20000210

08001558 <uart_read_rx_data>:


uint8_t uart_read_rx_data(uint8_t *data, uint8_t len)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	70fb      	strb	r3, [r7, #3]
    return circular_buff_read(uart_data.rx.cb, data, len);
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <uart_read_rx_data+0x28>)
 8001566:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800156a:	78fa      	ldrb	r2, [r7, #3]
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fe80 	bl	8001274 <circular_buff_read>
 8001574:	4603      	mov	r3, r0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000210 	.word	0x20000210

08001584 <uart_clear_rx_data>:
    return circular_buff_fetch(uart_data.rx.cb, data, len);
}


uint8_t uart_clear_rx_data(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
    circular_buff_reset(uart_data.rx.cb);
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <uart_clear_rx_data+0x18>)
 800158a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fd5e 	bl	8001050 <circular_buff_reset>
    return 1;
 8001594:	2301      	movs	r3, #1
}
 8001596:	4618      	mov	r0, r3
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000210 	.word	0x20000210

080015a0 <uart_transmit_it>:
{
    return HAL_UART_Transmit(&huart2, data, len, HAL_MAX_DELAY);
}

uint8_t uart_transmit_it(uint8_t *data, uint8_t len)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	70fb      	strb	r3, [r7, #3]
    /* Write data to circular buffer */
    if (circular_buff_write(uart_data.tx.cb, data, len) == CIRCULAR_BUFF_OK)
 80015ac:	4b13      	ldr	r3, [pc, #76]	; (80015fc <uart_transmit_it+0x5c>)
 80015ae:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80015b2:	78fa      	ldrb	r2, [r7, #3]
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fe1c 	bl	80011f4 <circular_buff_write>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d117      	bne.n	80015f2 <uart_transmit_it+0x52>
    {
        if (huart2.gState == HAL_UART_STATE_READY)
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <uart_transmit_it+0x60>)
 80015c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b20      	cmp	r3, #32
 80015cc:	d10f      	bne.n	80015ee <uart_transmit_it+0x4e>
        {
            uint8_t byte;
            circular_buff_get(uart_data.tx.cb, &byte);
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <uart_transmit_it+0x5c>)
 80015d0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80015d4:	f107 020f 	add.w	r2, r7, #15
 80015d8:	4611      	mov	r1, r2
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fdd4 	bl	8001188 <circular_buff_get>
            HAL_UART_Transmit_IT(&huart2, &byte, 1);
 80015e0:	f107 030f 	add.w	r3, r7, #15
 80015e4:	2201      	movs	r2, #1
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <uart_transmit_it+0x60>)
 80015ea:	f002 fc32 	bl	8003e52 <HAL_UART_Transmit_IT>
        else
        {
            uart_driver_dbg("comm driver warning:\t uart busy\r\n");
        }

        return 1;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <uart_transmit_it+0x54>
    }

    uart_driver_dbg("comm driver error:\t circular buffer cannot write request\r\n");
	return 0;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000210 	.word	0x20000210
 8001600:	20000a98 	.word	0x20000a98

08001604 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a12      	ldr	r2, [pc, #72]	; (800165c <HAL_UART_TxCpltCallback+0x58>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d11d      	bne.n	8001652 <HAL_UART_TxCpltCallback+0x4e>
  { 
    /*check for pendings transfers */
    static uint8_t data_chunk[MAX_DATA_CHUNK_SIZE];
    uint16_t data_len = circular_buff_get_data_len(uart_data.tx.cb);
 8001616:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_UART_TxCpltCallback+0x5c>)
 8001618:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fd37 	bl	8001090 <circular_buff_get_data_len>
 8001622:	4603      	mov	r3, r0
 8001624:	81fb      	strh	r3, [r7, #14]

    if(data_len)
 8001626:	89fb      	ldrh	r3, [r7, #14]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d012      	beq.n	8001652 <HAL_UART_TxCpltCallback+0x4e>
    {
        data_len = (data_len >= MAX_DATA_CHUNK_SIZE ) ? (MAX_DATA_CHUNK_SIZE - 1) : data_len;
 800162c:	89fb      	ldrh	r3, [r7, #14]
 800162e:	2b63      	cmp	r3, #99	; 0x63
 8001630:	bf28      	it	cs
 8001632:	2363      	movcs	r3, #99	; 0x63
 8001634:	81fb      	strh	r3, [r7, #14]
        circular_buff_read(uart_data.tx.cb, data_chunk, data_len);
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_UART_TxCpltCallback+0x5c>)
 8001638:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800163c:	89fa      	ldrh	r2, [r7, #14]
 800163e:	4909      	ldr	r1, [pc, #36]	; (8001664 <HAL_UART_TxCpltCallback+0x60>)
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fe17 	bl	8001274 <circular_buff_read>
        HAL_UART_Transmit_IT(&huart2, data_chunk, data_len);
 8001646:	89fb      	ldrh	r3, [r7, #14]
 8001648:	461a      	mov	r2, r3
 800164a:	4906      	ldr	r1, [pc, #24]	; (8001664 <HAL_UART_TxCpltCallback+0x60>)
 800164c:	4806      	ldr	r0, [pc, #24]	; (8001668 <HAL_UART_TxCpltCallback+0x64>)
 800164e:	f002 fc00 	bl	8003e52 <HAL_UART_Transmit_IT>
    }

    uart_driver_dbg("comm driver info:\t irq uart tx complete\r\n");
  }
}
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40004400 	.word	0x40004400
 8001660:	20000210 	.word	0x20000210
 8001664:	2000061c 	.word	0x2000061c
 8001668:	20000a98 	.word	0x20000a98

0800166c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <HAL_UART_RxCpltCallback+0x48>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d115      	bne.n	80016aa <HAL_UART_RxCpltCallback+0x3e>
    {
        /*Set Uart Data reception for next byte*/
        HAL_UART_Receive_IT(&huart2, &uart_data.rx.byte, 1);
 800167e:	2201      	movs	r2, #1
 8001680:	490d      	ldr	r1, [pc, #52]	; (80016b8 <HAL_UART_RxCpltCallback+0x4c>)
 8001682:	480e      	ldr	r0, [pc, #56]	; (80016bc <HAL_UART_RxCpltCallback+0x50>)
 8001684:	f002 fc2a 	bl	8003edc <HAL_UART_Receive_IT>

        if(circular_buff_write(uart_data.rx.cb, &uart_data.rx.byte, 1) !=  CIRCULAR_BUFF_OK)
 8001688:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <HAL_UART_RxCpltCallback+0x54>)
 800168a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800168e:	2201      	movs	r2, #1
 8001690:	4909      	ldr	r1, [pc, #36]	; (80016b8 <HAL_UART_RxCpltCallback+0x4c>)
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fdae 	bl	80011f4 <circular_buff_write>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d005      	beq.n	80016aa <HAL_UART_RxCpltCallback+0x3e>
        {
            /*Reinit ring buffer*/
            circular_buff_reset(uart_data.rx.cb);
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <HAL_UART_RxCpltCallback+0x54>)
 80016a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fcd3 	bl	8001050 <circular_buff_reset>
        }
    }
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40004400 	.word	0x40004400
 80016b8:	20000414 	.word	0x20000414
 80016bc:	20000a98 	.word	0x20000a98
 80016c0:	20000210 	.word	0x20000210

080016c4 <host_comm_rx_fsm_enter>:
static void entry_action_packet_ready(host_comm_rx_fsm_t *handle);
static bool packet_ready_on_react(host_comm_rx_fsm_t *handle, const bool try_transition);

/* Entry action for state machine */
void host_comm_rx_fsm_enter(host_comm_rx_fsm_t *handle)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	/* Default react sequence for initial entry  */
	enter_seq_preamble_proc(handle);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 f819 	bl	8001704 <enter_seq_preamble_proc>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <host_comm_rx_fsm_set_next_state>:

static void host_comm_rx_fsm_set_next_state(host_comm_rx_fsm_t *handle, host_comm_rx_states_t next_state)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	460b      	mov	r3, r1
 80016e4:	70fb      	strb	r3, [r7, #3]
	handle->state = next_state;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	78fa      	ldrb	r2, [r7, #3]
 80016ea:	701a      	strb	r2, [r3, #0]
	handle->event.internal = ev_int_comm_rx_invalid;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	711a      	strb	r2, [r3, #4]
	handle->event.external = ev_ext_comm_rx_invalid;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	715a      	strb	r2, [r3, #5]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <enter_seq_preamble_proc>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**@ 'preamble process' state related functions */

static void enter_seq_preamble_proc(host_comm_rx_fsm_t *handle)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	host_comm_rx_dbg("enter seq \t[ check_preamble_st ]\r\n");
	host_comm_rx_fsm_set_next_state(handle, st_comm_rx_preamble_proc);
 800170c:	2101      	movs	r1, #1
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff ffe3 	bl	80016da <host_comm_rx_fsm_set_next_state>
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <during_action_preamble_proc>:

static uint8_t during_action_preamble_proc(host_comm_rx_fsm_t *handle)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	if (uart_get_rx_data_len() >= PREAMBLE_SIZE_BYTES)
 8001724:	f7ff ff0a 	bl	800153c <uart_get_rx_data_len>
 8001728:	4603      	mov	r3, r0
 800172a:	2b03      	cmp	r3, #3
 800172c:	d938      	bls.n	80017a0 <during_action_preamble_proc+0x84>
	{
		uint8_t preamble;
		/* read byte by byte to prevent data lost */
		uart_read_rx_data((uint8_t *)&preamble, 1);
 800172e:	f107 030f 	add.w	r3, r7, #15
 8001732:	2101      	movs	r1, #1
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff0f 	bl	8001558 <uart_read_rx_data>
		if (preamble != protocol_preamble.bit[0])
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <during_action_preamble_proc+0x90>)
 800173c:	781a      	ldrb	r2, [r3, #0]
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	429a      	cmp	r2, r3
 8001742:	d001      	beq.n	8001748 <during_action_preamble_proc+0x2c>
			return 0;
 8001744:	2300      	movs	r3, #0
 8001746:	e02c      	b.n	80017a2 <during_action_preamble_proc+0x86>
		uart_read_rx_data((uint8_t *)&preamble, 1);
 8001748:	f107 030f 	add.w	r3, r7, #15
 800174c:	2101      	movs	r1, #1
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff ff02 	bl	8001558 <uart_read_rx_data>
		if (preamble != protocol_preamble.bit[1])
 8001754:	4b15      	ldr	r3, [pc, #84]	; (80017ac <during_action_preamble_proc+0x90>)
 8001756:	785a      	ldrb	r2, [r3, #1]
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	429a      	cmp	r2, r3
 800175c:	d001      	beq.n	8001762 <during_action_preamble_proc+0x46>
			return 0;
 800175e:	2300      	movs	r3, #0
 8001760:	e01f      	b.n	80017a2 <during_action_preamble_proc+0x86>
		uart_read_rx_data((uint8_t *)&preamble, 1);
 8001762:	f107 030f 	add.w	r3, r7, #15
 8001766:	2101      	movs	r1, #1
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fef5 	bl	8001558 <uart_read_rx_data>
		if (preamble != protocol_preamble.bit[2])
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <during_action_preamble_proc+0x90>)
 8001770:	789a      	ldrb	r2, [r3, #2]
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <during_action_preamble_proc+0x60>
			return 0;
 8001778:	2300      	movs	r3, #0
 800177a:	e012      	b.n	80017a2 <during_action_preamble_proc+0x86>
		uart_read_rx_data((uint8_t *)&preamble, 1);
 800177c:	f107 030f 	add.w	r3, r7, #15
 8001780:	2101      	movs	r1, #1
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fee8 	bl	8001558 <uart_read_rx_data>
		if (preamble != protocol_preamble.bit[3])
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <during_action_preamble_proc+0x90>)
 800178a:	78da      	ldrb	r2, [r3, #3]
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	429a      	cmp	r2, r3
 8001790:	d001      	beq.n	8001796 <during_action_preamble_proc+0x7a>
			return 0;
 8001792:	2300      	movs	r3, #0
 8001794:	e005      	b.n	80017a2 <during_action_preamble_proc+0x86>

		host_comm_rx_dbg("ev_internal \t[ preamble_ok ]\r\n");
		handle->event.internal = ev_int_preamble_ok;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	711a      	strb	r2, [r3, #4]
		return 1;
 800179c:	2301      	movs	r3, #1
 800179e:	e000      	b.n	80017a2 <during_action_preamble_proc+0x86>
	}
	return 0;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	08007d18 	.word	0x08007d18

080017b0 <preamble_proc_on_react>:

static bool preamble_proc_on_react(host_comm_rx_fsm_t *handle, const bool try_transition)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	70fb      	strb	r3, [r7, #3]
	/* The reactions of state 'check preamble' */
	bool did_transition = try_transition;
 80017bc:	78fb      	ldrb	r3, [r7, #3]
 80017be:	73fb      	strb	r3, [r7, #15]

	if (try_transition == true)
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d009      	beq.n	80017da <preamble_proc_on_react+0x2a>
	{
		if (handle->event.internal == ev_int_preamble_ok)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	791b      	ldrb	r3, [r3, #4]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d103      	bne.n	80017d6 <preamble_proc_on_react+0x26>
		{
			/*Enter sequence */
			enter_seq_header_proc(handle);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f811 	bl	80017f6 <enter_seq_header_proc>
 80017d4:	e001      	b.n	80017da <preamble_proc_on_react+0x2a>
		}
		else
			did_transition = false;
 80017d6:	2300      	movs	r3, #0
 80017d8:	73fb      	strb	r3, [r7, #15]
	}
	if ((did_transition) == (false))
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	f083 0301 	eor.w	r3, r3, #1
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <preamble_proc_on_react+0x3c>
	{
		/*during action*/
		during_action_preamble_proc(handle);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff ff98 	bl	800171c <during_action_preamble_proc>
	}
	
	return did_transition;
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <enter_seq_header_proc>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*'default enter sequence for state 'header process '*/
static void enter_seq_header_proc(host_comm_rx_fsm_t *handle)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
	host_comm_rx_dbg("enter seq \t[ check_header_st ]\r\n");
	host_comm_rx_fsm_set_next_state(handle, st_comm_rx_header_proc);
 80017fe:	2102      	movs	r1, #2
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ff6a 	bl	80016da <host_comm_rx_fsm_set_next_state>
	entry_action_header_proc(handle);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f804 	bl	8001814 <entry_action_header_proc>
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <entry_action_header_proc>:

static void entry_action_header_proc(host_comm_rx_fsm_t *handle)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	time_event_start(&handle->event.time.header_timeout, (HEADER_BYTES_TIMEOUT_MS));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3308      	adds	r3, #8
 8001820:	211e      	movs	r1, #30
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fdbc 	bl	80013a0 <time_event_start>
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <exit_action_header_proc>:

static void exit_action_header_proc(host_comm_rx_fsm_t *handle)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	/*Stop time out events*/
	time_event_stop(&handle->event.time.header_timeout);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3308      	adds	r3, #8
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fdd1 	bl	80013e4 <time_event_stop>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <during_action_header_proc>:

static void during_action_header_proc(host_comm_rx_fsm_t *handle)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
	if (uart_get_rx_data_len() >= HEADER_SIZE_BYTES)
 8001852:	f7ff fe73 	bl	800153c <uart_get_rx_data_len>
 8001856:	4603      	mov	r3, r0
 8001858:	2b03      	cmp	r3, #3
 800185a:	d914      	bls.n	8001886 <during_action_header_proc+0x3c>
	{
		/* 1. Read Header from server buffer */
		uart_read_rx_data((uint8_t *)&handle->iface.packet.header, HEADER_SIZE_BYTES);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3320      	adds	r3, #32
 8001860:	2104      	movs	r1, #4
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fe78 	bl	8001558 <uart_read_rx_data>

		if (protocol_check_valid_header(&handle->iface.packet))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3320      	adds	r3, #32
 800186c:	4618      	mov	r0, r3
 800186e:	f000 fd41 	bl	80022f4 <protocol_check_valid_header>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <during_action_header_proc+0x36>
		{
			host_comm_rx_dbg("ev_internal \t[ header_ok ]\r\n");
			handle->event.internal = ev_int_header_ok;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2202      	movs	r2, #2
 800187c:	711a      	strb	r2, [r3, #4]
		{
			host_comm_rx_dbg("ev_internal \t[ header_error ]\r\n");
			handle->event.internal = ev_int_header_error;
		}
	}
}
 800187e:	e002      	b.n	8001886 <during_action_header_proc+0x3c>
			handle->event.internal = ev_int_header_error;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2203      	movs	r2, #3
 8001884:	711a      	strb	r2, [r3, #4]
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <header_proc_on_react>:

static bool header_proc_on_react(host_comm_rx_fsm_t *handle, const bool try_transition)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	70fb      	strb	r3, [r7, #3]
	/* The reactions of state 'check preamble' */
	bool did_transition = try_transition;
 800189c:	78fb      	ldrb	r3, [r7, #3]
 800189e:	73fb      	strb	r3, [r7, #15]

	if (try_transition == true)
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d036      	beq.n	8001914 <header_proc_on_react+0x84>
	{
		if (handle->event.internal == ev_int_header_ok)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	791b      	ldrb	r3, [r3, #4]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d10e      	bne.n	80018cc <header_proc_on_react+0x3c>
		{
			/*Exit Action */
			exit_action_header_proc(handle);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ffbe 	bl	8001830 <exit_action_header_proc>

			/*Choice Enter sequence */
			if (handle->iface.packet.header.payload_len > 0)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <header_proc_on_react+0x34>
			{
				host_comm_rx_dbg("guard \t[ payload len > 0 ]\r\n");
				enter_seq_payload_proc(handle);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f839 	bl	8001934 <enter_seq_payload_proc>
 80018c2:	e027      	b.n	8001914 <header_proc_on_react+0x84>
			}
			else
			{
				host_comm_rx_dbg("guard \t[ payload = 0 ]\r\n");
				enter_seq_crc_and_postamble_proc(handle);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 f8c1 	bl	8001a4c <enter_seq_crc_and_postamble_proc>
 80018ca:	e023      	b.n	8001914 <header_proc_on_react+0x84>
			}
		}

		else if (time_event_is_raised(&handle->event.time.header_timeout) == true ||
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3308      	adds	r3, #8
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fdc3 	bl	800145c <time_event_is_raised>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d103      	bne.n	80018e4 <header_proc_on_react+0x54>
				 handle->event.internal == ev_int_header_error)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	791b      	ldrb	r3, [r3, #4]
		else if (time_event_is_raised(&handle->event.time.header_timeout) == true ||
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	d115      	bne.n	8001910 <header_proc_on_react+0x80>
		{

			/*Transition Action*/
			if (time_event_is_raised(&handle->event.time.header_timeout) == true)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3308      	adds	r3, #8
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fdb7 	bl	800145c <time_event_is_raised>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <header_proc_on_react+0x68>
			{
				uart_clear_rx_data();
 80018f4:	f7ff fe46 	bl	8001584 <uart_clear_rx_data>
				host_comm_rx_dbg("ev_internal \t[ header timeout ]\r\n");
			}

			host_comm_tx_fsm_send_packet_no_payload(&host_comm_tx_handle, TARGET_TO_HOST_RES_NACK, false);
 80018f8:	2200      	movs	r2, #0
 80018fa:	21ae      	movs	r1, #174	; 0xae
 80018fc:	480c      	ldr	r0, [pc, #48]	; (8001930 <header_proc_on_react+0xa0>)
 80018fe:	f000 fbe1 	bl	80020c4 <host_comm_tx_fsm_send_packet_no_payload>

			/*Exit Action*/
			exit_action_header_proc(handle);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff ff94 	bl	8001830 <exit_action_header_proc>

			/*Enter Sequence*/
			enter_seq_preamble_proc(handle);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff fefb 	bl	8001704 <enter_seq_preamble_proc>
 800190e:	e001      	b.n	8001914 <header_proc_on_react+0x84>
		}
		else
		{
			did_transition = false;
 8001910:	2300      	movs	r3, #0
 8001912:	73fb      	strb	r3, [r7, #15]
		}
	}
	if ((did_transition) == (false))
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	f083 0301 	eor.w	r3, r3, #1
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	d002      	beq.n	8001926 <header_proc_on_react+0x96>
	{
		/*during action*/
		during_action_header_proc(handle);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff92 	bl	800184a <during_action_header_proc>
	}
	return did_transition;
 8001926:	7bfb      	ldrb	r3, [r7, #15]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000c00 	.word	0x20000c00

08001934 <enter_seq_payload_proc>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**@ 'Check payload' state related functions */

/*'default enter sequence for state 'check payload'*/
static void enter_seq_payload_proc(host_comm_rx_fsm_t *handle)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	/*Entry Action*/
	host_comm_rx_dbg("enter seq \t[ check_payload_st ]\r\n");
	host_comm_rx_fsm_set_next_state(handle, st_comm_rx_payload_proc);
 800193c:	2103      	movs	r1, #3
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff fecb 	bl	80016da <host_comm_rx_fsm_set_next_state>
	entry_action_payload_proc(handle);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f804 	bl	8001952 <entry_action_payload_proc>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <entry_action_payload_proc>:

static void entry_action_payload_proc(host_comm_rx_fsm_t *handle)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b084      	sub	sp, #16
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
	uint16_t time_ms = handle->iface.packet.header.payload_len * 1;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800195e:	81fb      	strh	r3, [r7, #14]
	time_event_start(&handle->event.time.payload_timeout, time_ms);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3310      	adds	r3, #16
 8001964:	89fa      	ldrh	r2, [r7, #14]
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fd19 	bl	80013a0 <time_event_start>
}
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <exit_action_payload_proc>:

static void exit_action_payload_proc(host_comm_rx_fsm_t *handle)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
	time_event_stop(&handle->event.time.payload_timeout);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3310      	adds	r3, #16
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fd2e 	bl	80013e4 <time_event_stop>
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <during_action_payload_proc>:

static void during_action_payload_proc(host_comm_rx_fsm_t *handle)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	uint8_t exp_data_len = handle->iface.packet.header.payload_len;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800199c:	73fb      	strb	r3, [r7, #15]

	if (uart_get_rx_data_len() >= exp_data_len)
 800199e:	f7ff fdcd 	bl	800153c <uart_get_rx_data_len>
 80019a2:	4603      	mov	r3, r0
 80019a4:	461a      	mov	r2, r3
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d80c      	bhi.n	80019c6 <during_action_payload_proc+0x36>
	{
		host_comm_rx_dbg("ev_internal \t[ payload_ok ]\r\n");
		handle->event.internal = ev_int_payload_ok;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2204      	movs	r2, #4
 80019b0:	711a      	strb	r2, [r3, #4]
		uart_read_rx_data((uint8_t *)&handle->iface.packet.payload,
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f103 0224 	add.w	r2, r3, #36	; 0x24
								   handle->iface.packet.header.payload_len);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
		uart_read_rx_data((uint8_t *)&handle->iface.packet.payload,
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	4619      	mov	r1, r3
 80019c0:	4610      	mov	r0, r2
 80019c2:	f7ff fdc9 	bl	8001558 <uart_read_rx_data>
	}
}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <payload_proc_on_react>:

static bool payload_proc_on_react(host_comm_rx_fsm_t *handle, const bool try_transition)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	70fb      	strb	r3, [r7, #3]
	/* The reactions of state 'check preamble' */
	bool did_transition = try_transition;
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	73fb      	strb	r3, [r7, #15]

	if (try_transition == true)
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d022      	beq.n	8001a2c <payload_proc_on_react+0x5c>
	{
		if (handle->event.internal == ev_int_payload_ok)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	791b      	ldrb	r3, [r3, #4]
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d106      	bne.n	80019fc <payload_proc_on_react+0x2c>
		{
			/*Exit Action */
			exit_action_payload_proc(handle);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ffc1 	bl	8001976 <exit_action_payload_proc>

			/*Enter sequence */
			enter_seq_crc_and_postamble_proc(handle);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f829 	bl	8001a4c <enter_seq_crc_and_postamble_proc>
 80019fa:	e017      	b.n	8001a2c <payload_proc_on_react+0x5c>
		}

		else if (time_event_is_raised(&handle->event.time.payload_timeout) == true)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3310      	adds	r3, #16
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff fd2b 	bl	800145c <time_event_is_raised>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00d      	beq.n	8001a28 <payload_proc_on_react+0x58>
		{
			/*Exit Action*/
			exit_action_payload_proc(handle);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ffb2 	bl	8001976 <exit_action_payload_proc>

			/*Transition Action*/
			host_comm_rx_dbg("ev_internal \t[ timeout payload ] \r\n");
			uart_clear_rx_data();
 8001a12:	f7ff fdb7 	bl	8001584 <uart_clear_rx_data>
			host_comm_tx_fsm_send_packet_no_payload(&host_comm_tx_handle, TARGET_TO_HOST_RES_NACK, false);
 8001a16:	2200      	movs	r2, #0
 8001a18:	21ae      	movs	r1, #174	; 0xae
 8001a1a:	480b      	ldr	r0, [pc, #44]	; (8001a48 <payload_proc_on_react+0x78>)
 8001a1c:	f000 fb52 	bl	80020c4 <host_comm_tx_fsm_send_packet_no_payload>

			/*Enter Sequence*/
			enter_seq_preamble_proc(handle);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff fe6f 	bl	8001704 <enter_seq_preamble_proc>
 8001a26:	e001      	b.n	8001a2c <payload_proc_on_react+0x5c>
		}
		else
		{
			did_transition = false;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	73fb      	strb	r3, [r7, #15]
		}
	}
	if ((did_transition) == (false))
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	f083 0301 	eor.w	r3, r3, #1
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d002      	beq.n	8001a3e <payload_proc_on_react+0x6e>
	{
		/*during action*/
		during_action_payload_proc(handle);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ffa9 	bl	8001990 <during_action_payload_proc>
	}
	return did_transition;
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000c00 	.word	0x20000c00

08001a4c <enter_seq_crc_and_postamble_proc>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**@ 'Check crc and postamble' state related functions */
static void enter_seq_crc_and_postamble_proc(host_comm_rx_fsm_t *handle)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	/*Entry Action*/
	host_comm_rx_dbg("enter seq \t[ check_crc_and_postamble_st ]\r\n");
	host_comm_rx_fsm_set_next_state(handle, st_comm_rx_crc_and_postamble_proc);
 8001a54:	2104      	movs	r1, #4
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff fe3f 	bl	80016da <host_comm_rx_fsm_set_next_state>
	entry_action_crc_and_postamble_proc(handle);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f804 	bl	8001a6a <entry_action_crc_and_postamble_proc>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <entry_action_crc_and_postamble_proc>:

static void entry_action_crc_and_postamble_proc(host_comm_rx_fsm_t *handle)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
	time_event_start(&handle->event.time.crc_and_postamble_timeout, POSTAMBLE_BYTES_TIMEOUT_MS);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3318      	adds	r3, #24
 8001a76:	2105      	movs	r1, #5
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fc91 	bl	80013a0 <time_event_start>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <exit_action_crc_and_postamble_proc>:

static void exit_action_crc_and_postamble_proc(host_comm_rx_fsm_t *handle)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
	time_event_stop(&handle->event.time.crc_and_postamble_timeout);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3318      	adds	r3, #24
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fca6 	bl	80013e4 <time_event_stop>
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <during_action_crc_and_postamble_proc>:

static void during_action_crc_and_postamble_proc(host_comm_rx_fsm_t *handle)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	uint8_t exp_data_len = CRC_SIZE_BYTES + POSTAMBLE_SIZE_BYTES;
 8001aa8:	2308      	movs	r3, #8
 8001aaa:	77fb      	strb	r3, [r7, #31]

	if (uart_get_rx_data_len() >= exp_data_len)
 8001aac:	f7ff fd46 	bl	800153c <uart_get_rx_data_len>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	7ffb      	ldrb	r3, [r7, #31]
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d82b      	bhi.n	8001b12 <during_action_crc_and_postamble_proc+0x72>
	{
		uint32_t recv_crc;
		uint32_t postamble;

		uart_read_rx_data((uint8_t*)&recv_crc, CRC_SIZE_BYTES);
 8001aba:	f107 0314 	add.w	r3, r7, #20
 8001abe:	2104      	movs	r1, #4
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff fd49 	bl	8001558 <uart_read_rx_data>
		uart_read_rx_data((uint8_t*)&postamble, POSTAMBLE_SIZE_BYTES);
 8001ac6:	f107 0310 	add.w	r3, r7, #16
 8001aca:	2104      	movs	r1, #4
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fd43 	bl	8001558 <uart_read_rx_data>

		size_t packet_len = HEADER_SIZE_BYTES + handle->iface.packet.header.payload_len;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	61bb      	str	r3, [r7, #24]
		uint32_t crc = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]

		crc32_accumulate((uint8_t *)&handle->iface.packet.header, packet_len, &crc);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3320      	adds	r3, #32
 8001ae2:	f107 020c 	add.w	r2, r7, #12
 8001ae6:	69b9      	ldr	r1, [r7, #24]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f000 fa61 	bl	8001fb0 <crc32_accumulate>

		if (crc != recv_crc)
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d003      	beq.n	8001afe <during_action_crc_and_postamble_proc+0x5e>
		{
			host_comm_rx_dbg("ev_internal \t[ crc error ]\r\n");
			host_comm_rx_dbg("expected crc \t[0x%.8X] != recv [0x%.8X]\r\n", crc, recv_crc);
			handle->event.internal = ev_int_crc_error;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2207      	movs	r2, #7
 8001afa:	711a      	strb	r2, [r3, #4]
			}
			host_comm_rx_dbg("ev_internal \t[ crc and postamble ok ]\r\n");
			handle->event.internal = ev_int_crc_and_postamble_ok;
		}
	}
}
 8001afc:	e009      	b.n	8001b12 <during_action_crc_and_postamble_proc+0x72>
			if (postamble != POSTAMBLE)
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4a06      	ldr	r2, [pc, #24]	; (8001b1c <during_action_crc_and_postamble_proc+0x7c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d002      	beq.n	8001b0c <during_action_crc_and_postamble_proc+0x6c>
				handle->event.internal = ev_int_postamble_error;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2206      	movs	r2, #6
 8001b0a:	711a      	strb	r2, [r3, #4]
			handle->event.internal = ev_int_crc_and_postamble_ok;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2205      	movs	r2, #5
 8001b10:	711a      	strb	r2, [r3, #4]
}
 8001b12:	bf00      	nop
 8001b14:	3720      	adds	r7, #32
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	bb55bb55 	.word	0xbb55bb55

08001b20 <crc_and_postamble_proc_on_react>:

static bool crc_and_postamble_proc_on_react(host_comm_rx_fsm_t *handle, const bool try_transition)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	70fb      	strb	r3, [r7, #3]
	/* The reactions of state 'check preamble' */
	bool did_transition = try_transition;
 8001b2c:	78fb      	ldrb	r3, [r7, #3]
 8001b2e:	73fb      	strb	r3, [r7, #15]

	if (try_transition == true)
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d037      	beq.n	8001ba6 <crc_and_postamble_proc_on_react+0x86>
	{
		if (handle->event.internal == ev_int_crc_and_postamble_ok)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	791b      	ldrb	r3, [r3, #4]
 8001b3a:	2b05      	cmp	r3, #5
 8001b3c:	d10b      	bne.n	8001b56 <crc_and_postamble_proc_on_react+0x36>
		{
			/*Exit Action */
			exit_action_crc_and_postamble_proc(handle);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ffa1 	bl	8001a86 <exit_action_crc_and_postamble_proc>

			/*Transition Action*/
			host_comm_tx_fsm_send_packet_no_payload(&host_comm_tx_handle, TARGET_TO_HOST_RES_ACK, false);
 8001b44:	2200      	movs	r2, #0
 8001b46:	21ad      	movs	r1, #173	; 0xad
 8001b48:	481e      	ldr	r0, [pc, #120]	; (8001bc4 <crc_and_postamble_proc_on_react+0xa4>)
 8001b4a:	f000 fabb 	bl	80020c4 <host_comm_tx_fsm_send_packet_no_payload>

			/*Enter sequence */
			enter_seq_packet_ready(handle);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f83a 	bl	8001bc8 <enter_seq_packet_ready>
 8001b54:	e027      	b.n	8001ba6 <crc_and_postamble_proc_on_react+0x86>
		}

		else if (time_event_is_raised(&handle->event.time.crc_and_postamble_timeout) == true ||
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3318      	adds	r3, #24
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fc7e 	bl	800145c <time_event_is_raised>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d107      	bne.n	8001b76 <crc_and_postamble_proc_on_react+0x56>
				 handle->event.internal == ev_int_crc_error || handle->event.internal == ev_int_postamble_error)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	791b      	ldrb	r3, [r3, #4]
		else if (time_event_is_raised(&handle->event.time.crc_and_postamble_timeout) == true ||
 8001b6a:	2b07      	cmp	r3, #7
 8001b6c:	d003      	beq.n	8001b76 <crc_and_postamble_proc_on_react+0x56>
				 handle->event.internal == ev_int_crc_error || handle->event.internal == ev_int_postamble_error)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	791b      	ldrb	r3, [r3, #4]
 8001b72:	2b06      	cmp	r3, #6
 8001b74:	d115      	bne.n	8001ba2 <crc_and_postamble_proc_on_react+0x82>
		{

			/*Exit Action*/
			exit_action_crc_and_postamble_proc(handle);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff ff85 	bl	8001a86 <exit_action_crc_and_postamble_proc>

			/*Transition Action*/
			if (time_event_is_raised(&handle->event.time.crc_and_postamble_timeout) == true)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3318      	adds	r3, #24
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fc6b 	bl	800145c <time_event_is_raised>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <crc_and_postamble_proc_on_react+0x70>
			{
				host_comm_rx_dbg("ev_internal \t[ timeout crc and postamble] \r\n");
				uart_clear_rx_data();
 8001b8c:	f7ff fcfa 	bl	8001584 <uart_clear_rx_data>
			}

			host_comm_tx_fsm_send_packet_no_payload(&host_comm_tx_handle, TARGET_TO_HOST_RES_NACK, false);
 8001b90:	2200      	movs	r2, #0
 8001b92:	21ae      	movs	r1, #174	; 0xae
 8001b94:	480b      	ldr	r0, [pc, #44]	; (8001bc4 <crc_and_postamble_proc_on_react+0xa4>)
 8001b96:	f000 fa95 	bl	80020c4 <host_comm_tx_fsm_send_packet_no_payload>

			/*Enter Sequence*/
			enter_seq_preamble_proc(handle);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff fdb2 	bl	8001704 <enter_seq_preamble_proc>
 8001ba0:	e001      	b.n	8001ba6 <crc_and_postamble_proc_on_react+0x86>
		}
		else
		{
			did_transition = false;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	73fb      	strb	r3, [r7, #15]
		}
	}
	if ((did_transition) == (false))
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	f083 0301 	eor.w	r3, r3, #1
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <crc_and_postamble_proc_on_react+0x98>
	{
		/*during action*/
		during_action_crc_and_postamble_proc(handle);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ff74 	bl	8001aa0 <during_action_crc_and_postamble_proc>
	}
	return did_transition;
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000c00 	.word	0x20000c00

08001bc8 <enter_seq_packet_ready>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void enter_seq_packet_ready(host_comm_rx_fsm_t *handle)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	/*Entry Action*/
	host_comm_rx_dbg("enter seq \t[ packet ready ]\r\n");
	host_comm_rx_fsm_set_next_state(handle, st_comm_rx_packet_ready);
 8001bd0:	2105      	movs	r1, #5
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff fd81 	bl	80016da <host_comm_rx_fsm_set_next_state>
	entry_action_packet_ready(handle);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f804 	bl	8001be6 <entry_action_packet_ready>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <entry_action_packet_ready>:

static void entry_action_packet_ready(host_comm_rx_fsm_t *handle)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
	/*Notify or enqueue data for other fsm process*/

}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <packet_ready_on_react>:

static bool packet_ready_on_react(host_comm_rx_fsm_t *handle, const bool try_transition)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b084      	sub	sp, #16
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	460b      	mov	r3, r1
 8001c04:	70fb      	strb	r3, [r7, #3]
	bool did_transition = try_transition;
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	73fb      	strb	r3, [r7, #15]

	if (try_transition == true)
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d009      	beq.n	8001c24 <packet_ready_on_react+0x2a>
	{
		if (handle->event.external == ev_ext_comm_rx_packet_proccessed)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	795b      	ldrb	r3, [r3, #5]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d103      	bne.n	8001c20 <packet_ready_on_react+0x26>
			enter_seq_preamble_proc(handle);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff fd73 	bl	8001704 <enter_seq_preamble_proc>
 8001c1e:	e001      	b.n	8001c24 <packet_ready_on_react+0x2a>

		else
			did_transition = false;
 8001c20:	2300      	movs	r3, #0
 8001c22:	73fb      	strb	r3, [r7, #15]
	}

	return did_transition;
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <clear_time_events>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void clear_time_events(host_comm_rx_fsm_t *handle)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
	/*reset raised flags*/
	time_event_stop(&handle->event.time.crc_and_postamble_timeout);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3318      	adds	r3, #24
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fbd2 	bl	80013e4 <time_event_stop>
	time_event_stop(&handle->event.time.header_timeout);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3308      	adds	r3, #8
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fbcd 	bl	80013e4 <time_event_stop>
	time_event_stop(&handle->event.time.payload_timeout);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3310      	adds	r3, #16
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff fbc8 	bl	80013e4 <time_event_stop>
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <host_comm_rx_fsm_init>:

void host_comm_rx_fsm_init(host_comm_rx_fsm_t *handle)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	/*Init Interface*/
	memset((uint8_t *)&handle->iface.packet, 0, sizeof(packet_data_t));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3320      	adds	r3, #32
 8001c68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f003 f814 	bl	8004c9c <memset>

	/*Clear events*/
	clear_time_events(handle);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ffda 	bl	8001c2e <clear_time_events>

	/*Default Enter Sequence*/
	host_comm_rx_fsm_enter(handle);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff fd22 	bl	80016c4 <host_comm_rx_fsm_enter>
}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <host_comm_rx_fsm_time_event_update>:
	bool result = (handle->state > st_comm_rx_invalid && handle->state < st_comm_rx_last)? true : false;
	return result;
}

void host_comm_rx_fsm_time_event_update(host_comm_rx_fsm_t *handle)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	time_event_t *time_event = (time_event_t *)&handle->event.time;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3308      	adds	r3, #8
 8001c94:	60fb      	str	r3, [r7, #12]
	for (int tev_idx = 0; tev_idx < sizeof(handle->event.time) / sizeof(time_event_t); tev_idx++)
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	e008      	b.n	8001cae <host_comm_rx_fsm_time_event_update+0x26>
	{
		time_event_update(time_event);
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f7ff fbc1 	bl	8001424 <time_event_update>
		time_event++;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	3308      	adds	r3, #8
 8001ca6:	60fb      	str	r3, [r7, #12]
	for (int tev_idx = 0; tev_idx < sizeof(handle->event.time) / sizeof(time_event_t); tev_idx++)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	3301      	adds	r3, #1
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d9f3      	bls.n	8001c9c <host_comm_rx_fsm_time_event_update+0x14>
	}
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <host_comm_rx_fsm_run>:

void host_comm_rx_fsm_run(host_comm_rx_fsm_t *handle)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	switch (handle->state)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d825      	bhi.n	8001d1e <host_comm_rx_fsm_run+0x5e>
 8001cd2:	a201      	add	r2, pc, #4	; (adr r2, 8001cd8 <host_comm_rx_fsm_run+0x18>)
 8001cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd8:	08001ced 	.word	0x08001ced
 8001cdc:	08001cf7 	.word	0x08001cf7
 8001ce0:	08001d01 	.word	0x08001d01
 8001ce4:	08001d0b 	.word	0x08001d0b
 8001ce8:	08001d15 	.word	0x08001d15
	{
	case st_comm_rx_preamble_proc:          preamble_proc_on_react(handle, true);          break;
 8001cec:	2101      	movs	r1, #1
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff fd5e 	bl	80017b0 <preamble_proc_on_react>
 8001cf4:	e014      	b.n	8001d20 <host_comm_rx_fsm_run+0x60>
	case st_comm_rx_header_proc:            header_proc_on_react(handle, true);            break;
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff fdc9 	bl	8001890 <header_proc_on_react>
 8001cfe:	e00f      	b.n	8001d20 <host_comm_rx_fsm_run+0x60>
	case st_comm_rx_payload_proc:           payload_proc_on_react(handle, true);           break;
 8001d00:	2101      	movs	r1, #1
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff fe64 	bl	80019d0 <payload_proc_on_react>
 8001d08:	e00a      	b.n	8001d20 <host_comm_rx_fsm_run+0x60>
	case st_comm_rx_crc_and_postamble_proc: crc_and_postamble_proc_on_react(handle, true); break;
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff ff07 	bl	8001b20 <crc_and_postamble_proc_on_react>
 8001d12:	e005      	b.n	8001d20 <host_comm_rx_fsm_run+0x60>
	case st_comm_rx_packet_ready:           packet_ready_on_react(handle, true);           break;
 8001d14:	2101      	movs	r1, #1
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff ff6f 	bl	8001bfa <packet_ready_on_react>
 8001d1c:	e000      	b.n	8001d20 <host_comm_rx_fsm_run+0x60>

	default:
		break;
 8001d1e:	bf00      	nop
	}
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <clear_events>:

/*Static methods of the finite state machine*/
static uint8_t tx_send_packet(host_comm_tx_fsm_t *handle);

static void clear_events(host_comm_tx_fsm_t* handle)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
    handle->event.internal = ev_int_comm_tx_invalid;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	711a      	strb	r2, [r3, #4]
    handle->event.external = ev_ext_comm_tx_invalid;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	715a      	strb	r2, [r3, #5]
    time_event_stop(&handle->event.time.ack_timeout);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3308      	adds	r3, #8
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fb4f 	bl	80013e4 <time_event_stop>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <host_comm_tx_fsm_set_next_state>:


static void host_comm_tx_fsm_set_next_state(host_comm_tx_fsm_t *handle, host_comm_tx_states_t next_state)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	460b      	mov	r3, r1
 8001d58:	70fb      	strb	r3, [r7, #3]
	handle->state = next_state;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	78fa      	ldrb	r2, [r7, #3]
 8001d5e:	701a      	strb	r2, [r3, #0]
    clear_events(handle);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff ffe1 	bl	8001d28 <clear_events>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <host_comm_tx_fsm_init>:

void host_comm_tx_fsm_init(host_comm_tx_fsm_t* handle)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
    /*Init interface*/
    host_comm_tx_queue_init();
 8001d76:	f000 fa0d 	bl	8002194 <host_comm_tx_queue_init>
    memset((uint8_t*)&handle->iface.request.packet, 0, sizeof(packet_data_t));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3314      	adds	r3, #20
 8001d7e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d82:	2100      	movs	r1, #0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f002 ff89 	bl	8004c9c <memset>

    /*Clear events */
    clear_events(handle);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff ffcc 	bl	8001d28 <clear_events>

    /*defaut enter sequence */
    enter_seq_poll_pending_transfers(handle);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f805 	bl	8001da0 <enter_seq_poll_pending_transfers>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <enter_seq_poll_pending_transfers>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void enter_seq_poll_pending_transfers(host_comm_tx_fsm_t *handle)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	host_comm_tx_dbg("enter seq \t[ poll_pending_transfers ]\n");
 8001da8:	4806      	ldr	r0, [pc, #24]	; (8001dc4 <enter_seq_poll_pending_transfers+0x24>)
 8001daa:	f003 fe73 	bl	8005a94 <puts>
	host_comm_tx_fsm_set_next_state(handle, st_comm_tx_poll_pending_transfer);
 8001dae:	2101      	movs	r1, #1
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ffcc 	bl	8001d4e <host_comm_tx_fsm_set_next_state>
    handle->iface.retry_cnt = 0;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	741a      	strb	r2, [r3, #16]
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	080077e0 	.word	0x080077e0

08001dc8 <during_action_poll_pending_transfers>:


static void during_action_poll_pending_transfers(host_comm_tx_fsm_t *handle)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
    if(host_comm_tx_queue_get_pending_transfers())
 8001dd0:	f000 f9f4 	bl	80021bc <host_comm_tx_queue_get_pending_transfers>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d005      	beq.n	8001de6 <during_action_poll_pending_transfers+0x1e>
    {
        handle->event.internal = ev_int_comm_tx_pending_packet;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	711a      	strb	r2, [r3, #4]
        host_comm_tx_dbg("int event \t[ pending_packet ]\n");
 8001de0:	4803      	ldr	r0, [pc, #12]	; (8001df0 <during_action_poll_pending_transfers+0x28>)
 8001de2:	f003 fe57 	bl	8005a94 <puts>
    }
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	08007814 	.word	0x08007814

08001df4 <exit_action_poll_pending_transfers>:


static void exit_action_poll_pending_transfers(host_comm_tx_fsm_t *handle)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
    /*Read packet to transfer */
    host_comm_tx_queue_read_request(&handle->iface.request);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3312      	adds	r3, #18
 8001e00:	4618      	mov	r0, r3
 8001e02:	f000 fa3b 	bl	800227c <host_comm_tx_queue_read_request>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <poll_pending_transfers_on_react>:


static bool poll_pending_transfers_on_react(host_comm_tx_fsm_t *handle, const bool try_transition)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	460b      	mov	r3, r1
 8001e18:	70fb      	strb	r3, [r7, #3]
	/* The reactions of state 'check preamble' */
	bool did_transition = try_transition;
 8001e1a:	78fb      	ldrb	r3, [r7, #3]
 8001e1c:	73fb      	strb	r3, [r7, #15]

	if (try_transition == true)
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00c      	beq.n	8001e3e <poll_pending_transfers_on_react+0x30>
	{
		if (handle->event.internal == ev_int_comm_tx_pending_packet)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	791b      	ldrb	r3, [r3, #4]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d106      	bne.n	8001e3a <poll_pending_transfers_on_react+0x2c>
		{
            /*Exit action */
            exit_action_poll_pending_transfers(handle);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff ffe1 	bl	8001df4 <exit_action_poll_pending_transfers>
			/*Enter sequence */
			enter_seq_transmit_packet(handle);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f812 	bl	8001e5c <enter_seq_transmit_packet>
 8001e38:	e001      	b.n	8001e3e <poll_pending_transfers_on_react+0x30>
		}
		else
			did_transition = false;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	73fb      	strb	r3, [r7, #15]
	}
	if ((did_transition) == (false))
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	f083 0301 	eor.w	r3, r3, #1
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d002      	beq.n	8001e50 <poll_pending_transfers_on_react+0x42>
	{
		/*during action*/
		during_action_poll_pending_transfers(handle);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ffbc 	bl	8001dc8 <during_action_poll_pending_transfers>
	}
	return did_transition;
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <enter_seq_transmit_packet>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static void enter_seq_transmit_packet(host_comm_tx_fsm_t *handle)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	host_comm_tx_dbg("enter seq \t[ transmit_packet ]\n");
 8001e64:	4806      	ldr	r0, [pc, #24]	; (8001e80 <enter_seq_transmit_packet+0x24>)
 8001e66:	f003 fe15 	bl	8005a94 <puts>
	host_comm_tx_fsm_set_next_state(handle, st_comm_tx_transmit_packet);
 8001e6a:	2102      	movs	r1, #2
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff ff6e 	bl	8001d4e <host_comm_tx_fsm_set_next_state>
    entry_action_transmit_packet(handle);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f806 	bl	8001e84 <entry_action_transmit_packet>
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	08007840 	.word	0x08007840

08001e84 <entry_action_transmit_packet>:

static void entry_action_transmit_packet(host_comm_tx_fsm_t *handle)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
    if(handle->iface.request.ack_expected == true)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d009      	beq.n	8001eaa <entry_action_transmit_packet+0x26>
    {
        time_event_start(&handle->event.time.ack_timeout, MAX_ACK_TIMEOUT_MS);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3308      	adds	r3, #8
 8001e9a:	2132      	movs	r1, #50	; 0x32
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fa7f 	bl	80013a0 <time_event_start>
        host_comm_tx_dbg("time event \t[ ack resp time start ]\n");
 8001ea2:	4808      	ldr	r0, [pc, #32]	; (8001ec4 <entry_action_transmit_packet+0x40>)
 8001ea4:	f003 fdf6 	bl	8005a94 <puts>
 8001ea8:	e005      	b.n	8001eb6 <entry_action_transmit_packet+0x32>
    }
    else
    {
        handle->event.internal = ev_int_comm_tx_no_ack_expected;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2202      	movs	r2, #2
 8001eae:	711a      	strb	r2, [r3, #4]
        host_comm_tx_dbg("int event \t[ ack no expected ]\n");
 8001eb0:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <entry_action_transmit_packet+0x44>)
 8001eb2:	f003 fdef 	bl	8005a94 <puts>
    }
    tx_send_packet(handle);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f8a8 	bl	800200c <tx_send_packet>
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	08007870 	.word	0x08007870
 8001ec8:	080078a4 	.word	0x080078a4

08001ecc <exit_action_transmit_packet>:

static void exit_action_transmit_packet(host_comm_tx_fsm_t *handle)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
    time_event_stop(&handle->event.time.ack_timeout);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3308      	adds	r3, #8
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fa83 	bl	80013e4 <time_event_stop>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <transmit_packet_on_react>:


static bool transmit_packet_on_react(host_comm_tx_fsm_t *handle, const bool try_transition)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	70fb      	strb	r3, [r7, #3]
    /* The reactions of state 'check preamble' */
    bool did_transition = try_transition;
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	73fb      	strb	r3, [r7, #15]

    if (try_transition == true)
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d04d      	beq.n	8001f9a <transmit_packet_on_react+0xb2>
    {
        if ((handle->event.external == ev_ext_comm_tx_ack_received) |
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	795b      	ldrb	r3, [r3, #5]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	bf0c      	ite	eq
 8001f06:	2301      	moveq	r3, #1
 8001f08:	2300      	movne	r3, #0
 8001f0a:	b2da      	uxtb	r2, r3
            (handle->event.internal == ev_int_comm_tx_no_ack_expected))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	791b      	ldrb	r3, [r3, #4]
        if ((handle->event.external == ev_ext_comm_tx_ack_received) |
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	bf0c      	ite	eq
 8001f14:	2301      	moveq	r3, #1
 8001f16:	2300      	movne	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d006      	beq.n	8001f30 <transmit_packet_on_react+0x48>
        {
            exit_action_transmit_packet(handle);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff ffd2 	bl	8001ecc <exit_action_transmit_packet>
            enter_seq_poll_pending_transfers(handle);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff ff39 	bl	8001da0 <enter_seq_poll_pending_transfers>
 8001f2e:	e034      	b.n	8001f9a <transmit_packet_on_react+0xb2>
        }

        else if(handle->event.external == ev_ext_comm_tx_nack_received)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	795b      	ldrb	r3, [r3, #5]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d106      	bne.n	8001f46 <transmit_packet_on_react+0x5e>
        {
            exit_action_transmit_packet(handle);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ffc7 	bl	8001ecc <exit_action_transmit_packet>
            enter_seq_transmit_packet(handle);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff ff8c 	bl	8001e5c <enter_seq_transmit_packet>
 8001f44:	e029      	b.n	8001f9a <transmit_packet_on_react+0xb2>
        }

        else if (time_event_is_raised(&handle->event.time.ack_timeout) == true)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3308      	adds	r3, #8
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff fa86 	bl	800145c <time_event_is_raised>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d01f      	beq.n	8001f96 <transmit_packet_on_react+0xae>
        {
            exit_action_transmit_packet(handle);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff ffb8 	bl	8001ecc <exit_action_transmit_packet>
            host_comm_tx_dbg("time event \t[ ack resp timeout ]\n");
 8001f5c:	4811      	ldr	r0, [pc, #68]	; (8001fa4 <transmit_packet_on_react+0xbc>)
 8001f5e:	f003 fd99 	bl	8005a94 <puts>
            host_comm_tx_dbg("tx retry\t : #%d\n",handle->iface.retry_cnt);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	7c1b      	ldrb	r3, [r3, #16]
 8001f66:	4619      	mov	r1, r3
 8001f68:	480f      	ldr	r0, [pc, #60]	; (8001fa8 <transmit_packet_on_react+0xc0>)
 8001f6a:	f003 fd0d 	bl	8005988 <iprintf>

            /*Enter sequence */
            if (handle->iface.retry_cnt++ >= MAX_NUM_OF_TRANSFER_RETRIES)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	7c1b      	ldrb	r3, [r3, #16]
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	b2d1      	uxtb	r1, r2
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	7411      	strb	r1, [r2, #16]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d907      	bls.n	8001f8e <transmit_packet_on_react+0xa6>
            {
                host_comm_tx_dbg("guard \t[ max tx retries ->%d]\n", MAX_NUM_OF_TRANSFER_RETRIES);
 8001f7e:	2102      	movs	r1, #2
 8001f80:	480a      	ldr	r0, [pc, #40]	; (8001fac <transmit_packet_on_react+0xc4>)
 8001f82:	f003 fd01 	bl	8005988 <iprintf>
                enter_seq_poll_pending_transfers(handle);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff ff0a 	bl	8001da0 <enter_seq_poll_pending_transfers>
 8001f8c:	e005      	b.n	8001f9a <transmit_packet_on_react+0xb2>
            }
            else
                enter_seq_transmit_packet(handle);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff ff64 	bl	8001e5c <enter_seq_transmit_packet>
 8001f94:	e001      	b.n	8001f9a <transmit_packet_on_react+0xb2>
        }

        else
            did_transition = false;
 8001f96:	2300      	movs	r3, #0
 8001f98:	73fb      	strb	r3, [r7, #15]
    }
    if ((did_transition) == (false))
    {
        
    }
    return did_transition;
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	080078d4 	.word	0x080078d4
 8001fa8:	08007904 	.word	0x08007904
 8001fac:	08007924 	.word	0x08007924

08001fb0 <crc32_accumulate>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void crc32_accumulate(uint32_t *buff, size_t len, uint32_t *crc_value)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
    int i = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
    uint32_t crc = *crc_value ^ buff[i];
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	68f9      	ldr	r1, [r7, #12]
 8001fca:	440b      	add	r3, r1
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4053      	eors	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
    for (i = 0; i < len - 1; i++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	e00b      	b.n	8001ff0 <crc32_accumulate+0x40>
        crc ^= buff[i + 1];
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4053      	eors	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
    for (i = 0; i < len - 1; i++)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	3301      	adds	r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	1e5a      	subs	r2, r3, #1
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d8ee      	bhi.n	8001fd8 <crc32_accumulate+0x28>

    *crc_value = crc;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	601a      	str	r2, [r3, #0]
}
 8002000:	bf00      	nop
 8002002:	371c      	adds	r7, #28
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <tx_send_packet>:
 * @param host_comm 
 * @param packet 
 * @return uint8_t 
 */
static uint8_t tx_send_packet(host_comm_tx_fsm_t *handle)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
   /* packet index to write bytes  */
    uint32_t crc = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	60bb      	str	r3, [r7, #8]

    packet_data_t *packet = &handle->iface.request.packet;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3314      	adds	r3, #20
 800201c:	60fb      	str	r3, [r7, #12]

    /* Transmit preamble */
    if (!uart_transmit_it((uint8_t *)&protocol_preamble.bit, PREAMBLE_SIZE_BYTES))
 800201e:	2104      	movs	r1, #4
 8002020:	4826      	ldr	r0, [pc, #152]	; (80020bc <tx_send_packet+0xb0>)
 8002022:	f7ff fabd 	bl	80015a0 <uart_transmit_it>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <tx_send_packet+0x24>
        return 0;
 800202c:	2300      	movs	r3, #0
 800202e:	e041      	b.n	80020b4 <tx_send_packet+0xa8>

    /* Start CRC calculation*/
    crc32_accumulate((uint8_t *)&packet->header, HEADER_SIZE_BYTES, &crc);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f107 0208 	add.w	r2, r7, #8
 8002036:	2104      	movs	r1, #4
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ffb9 	bl	8001fb0 <crc32_accumulate>

    /* Transmit Header */
    if (!uart_transmit_it((uint8_t *)&packet->header, HEADER_SIZE_BYTES))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2104      	movs	r1, #4
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff faac 	bl	80015a0 <uart_transmit_it>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <tx_send_packet+0x46>
        return 0;
 800204e:	2300      	movs	r3, #0
 8002050:	e030      	b.n	80020b4 <tx_send_packet+0xa8>

    /* If Payload  */
    if (packet->header.payload_len)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	885b      	ldrh	r3, [r3, #2]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d017      	beq.n	800208a <tx_send_packet+0x7e>
    {
        /*update CRC*/
        crc32_accumulate((uint8_t *)&packet->payload, packet->header.payload_len, &crc);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1d18      	adds	r0, r3, #4
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	885b      	ldrh	r3, [r3, #2]
 8002062:	4619      	mov	r1, r3
 8002064:	f107 0308 	add.w	r3, r7, #8
 8002068:	461a      	mov	r2, r3
 800206a:	f7ff ffa1 	bl	8001fb0 <crc32_accumulate>

        /*Transmit payload*/
        if (!uart_transmit_it((uint8_t *)&packet->payload, packet->header.payload_len))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	1d1a      	adds	r2, r3, #4
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	885b      	ldrh	r3, [r3, #2]
 8002076:	b2db      	uxtb	r3, r3
 8002078:	4619      	mov	r1, r3
 800207a:	4610      	mov	r0, r2
 800207c:	f7ff fa90 	bl	80015a0 <uart_transmit_it>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <tx_send_packet+0x7e>
            return 0;
 8002086:	2300      	movs	r3, #0
 8002088:	e014      	b.n	80020b4 <tx_send_packet+0xa8>
    }

    /*Transmit CRC*/
    if (!uart_transmit_it((uint8_t *)&crc, CRC_SIZE_BYTES))
 800208a:	f107 0308 	add.w	r3, r7, #8
 800208e:	2104      	movs	r1, #4
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff fa85 	bl	80015a0 <uart_transmit_it>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <tx_send_packet+0x94>
        return 0;
 800209c:	2300      	movs	r3, #0
 800209e:	e009      	b.n	80020b4 <tx_send_packet+0xa8>

    /*Transmit Postamble*/
    if (!uart_transmit_it((uint8_t *)&protocol_postamble.bit, POSTAMBLE_SIZE_BYTES))
 80020a0:	2104      	movs	r1, #4
 80020a2:	4807      	ldr	r0, [pc, #28]	; (80020c0 <tx_send_packet+0xb4>)
 80020a4:	f7ff fa7c 	bl	80015a0 <uart_transmit_it>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <tx_send_packet+0xa6>
        return 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	e000      	b.n	80020b4 <tx_send_packet+0xa8>

    return 1;
 80020b2:	2301      	movs	r3, #1
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	08007d18 	.word	0x08007d18
 80020c0:	08007d1c 	.word	0x08007d1c

080020c4 <host_comm_tx_fsm_send_packet_no_payload>:

	return 0;
}

uint8_t host_comm_tx_fsm_send_packet_no_payload(host_comm_tx_fsm_t *handle, uint8_t type, bool ack_expected)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b0c4      	sub	sp, #272	; 0x110
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	6018      	str	r0, [r3, #0]
 80020ce:	4608      	mov	r0, r1
 80020d0:	4611      	mov	r1, r2
 80020d2:	1cfb      	adds	r3, r7, #3
 80020d4:	4602      	mov	r2, r0
 80020d6:	701a      	strb	r2, [r3, #0]
 80020d8:	1cbb      	adds	r3, r7, #2
 80020da:	460a      	mov	r2, r1
 80020dc:	701a      	strb	r2, [r3, #0]
    /*form header*/
    tx_request_t request = 
 80020de:	f107 0308 	add.w	r3, r7, #8
 80020e2:	4618      	mov	r0, r3
 80020e4:	f44f 7384 	mov.w	r3, #264	; 0x108
 80020e8:	461a      	mov	r2, r3
 80020ea:	2100      	movs	r1, #0
 80020ec:	f002 fdd6 	bl	8004c9c <memset>
 80020f0:	f107 0308 	add.w	r3, r7, #8
 80020f4:	2203      	movs	r2, #3
 80020f6:	701a      	strb	r2, [r3, #0]
 80020f8:	f107 0308 	add.w	r3, r7, #8
 80020fc:	1cfa      	adds	r2, r7, #3
 80020fe:	7812      	ldrb	r2, [r2, #0]
 8002100:	709a      	strb	r2, [r3, #2]
 8002102:	f107 0308 	add.w	r3, r7, #8
 8002106:	22aa      	movs	r2, #170	; 0xaa
 8002108:	70da      	strb	r2, [r3, #3]
 800210a:	f107 0308 	add.w	r3, r7, #8
 800210e:	1cba      	adds	r2, r7, #2
 8002110:	7812      	ldrb	r2, [r2, #0]
 8002112:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        .packet.header.type.res = type,
        .packet.header.payload_len = 0,
    };

    /*Write Data*/
    return host_comm_tx_queue_write_request(&request);
 8002116:	f107 0308 	add.w	r3, r7, #8
 800211a:	4618      	mov	r0, r3
 800211c:	f000 f85a 	bl	80021d4 <host_comm_tx_queue_write_request>
 8002120:	4603      	mov	r3, r0
}
 8002122:	4618      	mov	r0, r3
 8002124:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <host_comm_tx_fsm_time_event_update>:

void host_comm_tx_fsm_time_event_update(host_comm_tx_fsm_t *handle)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
	time_event_t *time_event = (time_event_t *)&handle->event.time;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3308      	adds	r3, #8
 8002138:	60fb      	str	r3, [r7, #12]
	for (int tev_idx = 0; tev_idx < sizeof(handle->event.time) / sizeof(time_event_t); tev_idx++)
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	e008      	b.n	8002152 <host_comm_tx_fsm_time_event_update+0x26>
	{
		time_event_update(time_event);
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f7ff f96f 	bl	8001424 <time_event_update>
		time_event++;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	3308      	adds	r3, #8
 800214a:	60fb      	str	r3, [r7, #12]
	for (int tev_idx = 0; tev_idx < sizeof(handle->event.time) / sizeof(time_event_t); tev_idx++)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	3301      	adds	r3, #1
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f3      	beq.n	8002140 <host_comm_tx_fsm_time_event_update+0x14>
	}
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <host_comm_tx_fsm_run>:

void host_comm_tx_fsm_run(host_comm_tx_fsm_t *handle)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
    switch (handle->state)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d002      	beq.n	8002178 <host_comm_tx_fsm_run+0x16>
 8002172:	2b02      	cmp	r3, #2
 8002174:	d005      	beq.n	8002182 <host_comm_tx_fsm_run+0x20>
    {
    case st_comm_tx_poll_pending_transfer: poll_pending_transfers_on_react(handle, true); break;
    case st_comm_tx_transmit_packet:       transmit_packet_on_react(handle, true);         break;
    default: break;
 8002176:	e009      	b.n	800218c <host_comm_tx_fsm_run+0x2a>
    case st_comm_tx_poll_pending_transfer: poll_pending_transfers_on_react(handle, true); break;
 8002178:	2101      	movs	r1, #1
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff fe47 	bl	8001e0e <poll_pending_transfers_on_react>
 8002180:	e004      	b.n	800218c <host_comm_tx_fsm_run+0x2a>
    case st_comm_tx_transmit_packet:       transmit_packet_on_react(handle, true);         break;
 8002182:	2101      	movs	r1, #1
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff feaf 	bl	8001ee8 <transmit_packet_on_react>
 800218a:	bf00      	nop
    }
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <host_comm_tx_queue_init>:

static host_comm_tx_queue_t tx_queue;


void host_comm_tx_queue_init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
    tx_queue.cb = circular_buff_init(tx_queue.buffer, TX_QUEUE_BUFF_SIZE);
 8002198:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800219c:	4805      	ldr	r0, [pc, #20]	; (80021b4 <host_comm_tx_queue_init+0x20>)
 800219e:	f7fe ff13 	bl	8000fc8 <circular_buff_init>
 80021a2:	4603      	mov	r3, r0
 80021a4:	4a04      	ldr	r2, [pc, #16]	; (80021b8 <host_comm_tx_queue_init+0x24>)
 80021a6:	6053      	str	r3, [r2, #4]
    tx_queue.packet_cnt = 0;
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <host_comm_tx_queue_init+0x24>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000688 	.word	0x20000688
 80021b8:	20000680 	.word	0x20000680

080021bc <host_comm_tx_queue_get_pending_transfers>:

size_t host_comm_tx_queue_get_pending_transfers(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
    return tx_queue.packet_cnt;
 80021c0:	4b03      	ldr	r3, [pc, #12]	; (80021d0 <host_comm_tx_queue_get_pending_transfers+0x14>)
 80021c2:	681b      	ldr	r3, [r3, #0]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	20000680 	.word	0x20000680

080021d4 <host_comm_tx_queue_write_request>:

uint8_t host_comm_tx_queue_write_request(tx_request_t *tx_request)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
    /* Temporal variable to check free space needed to write packet in tx queue */
    uint8_t packet_data_len = HEADER_SIZE_BYTES + tx_request->packet.header.payload_len;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	889b      	ldrh	r3, [r3, #4]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	3304      	adds	r3, #4
 80021e4:	73fb      	strb	r3, [r7, #15]

    if (circular_buff_get_free_space(tx_queue.cb) > packet_data_len + 1) //include byte for req src 
 80021e6:	4b21      	ldr	r3, [pc, #132]	; (800226c <host_comm_tx_queue_write_request+0x98>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe ff86 	bl	80010fc <circular_buff_get_free_space>
 80021f0:	4602      	mov	r2, r0
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
 80021f4:	3301      	adds	r3, #1
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d92f      	bls.n	800225a <host_comm_tx_queue_write_request+0x86>
    {
        circular_buff_put(tx_queue.cb, (uint8_t)tx_request->src);
 80021fa:	4b1c      	ldr	r3, [pc, #112]	; (800226c <host_comm_tx_queue_write_request+0x98>)
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	4619      	mov	r1, r3
 8002204:	4610      	mov	r0, r2
 8002206:	f7fe ff97 	bl	8001138 <circular_buff_put>
        circular_buff_put(tx_queue.cb, (uint8_t)tx_request->ack_expected);
 800220a:	4b18      	ldr	r3, [pc, #96]	; (800226c <host_comm_tx_queue_write_request+0x98>)
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8002214:	4619      	mov	r1, r3
 8002216:	4610      	mov	r0, r2
 8002218:	f7fe ff8e 	bl	8001138 <circular_buff_put>
        circular_buff_write(tx_queue.cb, (uint8_t *)&tx_request->packet, packet_data_len);
 800221c:	4b13      	ldr	r3, [pc, #76]	; (800226c <host_comm_tx_queue_write_request+0x98>)
 800221e:	6858      	ldr	r0, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3302      	adds	r3, #2
 8002224:	7bfa      	ldrb	r2, [r7, #15]
 8002226:	4619      	mov	r1, r3
 8002228:	f7fe ffe4 	bl	80011f4 <circular_buff_write>
        tx_queue.packet_cnt++;
 800222c:	4b0f      	ldr	r3, [pc, #60]	; (800226c <host_comm_tx_queue_write_request+0x98>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	3301      	adds	r3, #1
 8002232:	4a0e      	ldr	r2, [pc, #56]	; (800226c <host_comm_tx_queue_write_request+0x98>)
 8002234:	6013      	str	r3, [r2, #0]

        hdx_comm_dbg_message("pending packet counter [%d]\r\n", tx_queue.packet_cnt);
 8002236:	4b0d      	ldr	r3, [pc, #52]	; (800226c <host_comm_tx_queue_write_request+0x98>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4619      	mov	r1, r3
 800223c:	480c      	ldr	r0, [pc, #48]	; (8002270 <host_comm_tx_queue_write_request+0x9c>)
 800223e:	f003 fba3 	bl	8005988 <iprintf>
        hdx_comm_dbg_message("free space in queue [%d] bytes\r\n", circular_buff_get_free_space(tx_queue.cb));
 8002242:	4b0a      	ldr	r3, [pc, #40]	; (800226c <host_comm_tx_queue_write_request+0x98>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe ff58 	bl	80010fc <circular_buff_get_free_space>
 800224c:	4603      	mov	r3, r0
 800224e:	4619      	mov	r1, r3
 8002250:	4808      	ldr	r0, [pc, #32]	; (8002274 <host_comm_tx_queue_write_request+0xa0>)
 8002252:	f003 fb99 	bl	8005988 <iprintf>

        return 1;
 8002256:	2301      	movs	r3, #1
 8002258:	e003      	b.n	8002262 <host_comm_tx_queue_write_request+0x8e>
    }
    else
    {
        hdx_comm_dbg_message("not enough space in tx queue ");
 800225a:	4807      	ldr	r0, [pc, #28]	; (8002278 <host_comm_tx_queue_write_request+0xa4>)
 800225c:	f003 fb94 	bl	8005988 <iprintf>
        return 0;
 8002260:	2300      	movs	r3, #0
    }
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000680 	.word	0x20000680
 8002270:	080079ac 	.word	0x080079ac
 8002274:	080079d4 	.word	0x080079d4
 8002278:	08007a00 	.word	0x08007a00

0800227c <host_comm_tx_queue_read_request>:


uint8_t host_comm_tx_queue_read_request(tx_request_t *tx_request)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
    if (tx_queue.packet_cnt > 0)
 8002284:	4b19      	ldr	r3, [pc, #100]	; (80022ec <host_comm_tx_queue_read_request+0x70>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d027      	beq.n	80022dc <host_comm_tx_queue_read_request+0x60>
    {
        circular_buff_get(tx_queue.cb, (uint8_t *)&tx_request->src);
 800228c:	4b17      	ldr	r3, [pc, #92]	; (80022ec <host_comm_tx_queue_read_request+0x70>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	4611      	mov	r1, r2
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe ff77 	bl	8001188 <circular_buff_get>
        circular_buff_get(tx_queue.cb, (uint8_t *)&tx_request->ack_expected);
 800229a:	4b14      	ldr	r3, [pc, #80]	; (80022ec <host_comm_tx_queue_read_request+0x70>)
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f503 7383 	add.w	r3, r3, #262	; 0x106
 80022a4:	4619      	mov	r1, r3
 80022a6:	4610      	mov	r0, r2
 80022a8:	f7fe ff6e 	bl	8001188 <circular_buff_get>
        circular_buff_read(tx_queue.cb, (uint8_t *)&tx_request->packet.header, HEADER_SIZE_BYTES);
 80022ac:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <host_comm_tx_queue_read_request+0x70>)
 80022ae:	6858      	ldr	r0, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3302      	adds	r3, #2
 80022b4:	2204      	movs	r2, #4
 80022b6:	4619      	mov	r1, r3
 80022b8:	f7fe ffdc 	bl	8001274 <circular_buff_read>
        circular_buff_read(tx_queue.cb, (uint8_t *)&tx_request->packet.payload, tx_request->packet.header.payload_len);
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <host_comm_tx_queue_read_request+0x70>)
 80022be:	6858      	ldr	r0, [r3, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	1d99      	adds	r1, r3, #6
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	889b      	ldrh	r3, [r3, #4]
 80022c8:	461a      	mov	r2, r3
 80022ca:	f7fe ffd3 	bl	8001274 <circular_buff_read>
        tx_queue.packet_cnt--;
 80022ce:	4b07      	ldr	r3, [pc, #28]	; (80022ec <host_comm_tx_queue_read_request+0x70>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	4a05      	ldr	r2, [pc, #20]	; (80022ec <host_comm_tx_queue_read_request+0x70>)
 80022d6:	6013      	str	r3, [r2, #0]

        return 1;
 80022d8:	2301      	movs	r3, #1
 80022da:	e003      	b.n	80022e4 <host_comm_tx_queue_read_request+0x68>
    }
    else
    {
        hdx_comm_dbg_message("error there are not pending transfers");
 80022dc:	4804      	ldr	r0, [pc, #16]	; (80022f0 <host_comm_tx_queue_read_request+0x74>)
 80022de:	f003 fb53 	bl	8005988 <iprintf>
        return 0;
 80022e2:	2300      	movs	r3, #0
    }
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20000680 	.word	0x20000680
 80022f0:	08007a28 	.word	0x08007a28

080022f4 <protocol_check_valid_header>:

    packet_dir_t  dir;
    uint16_t payload_len;

uint8_t protocol_check_valid_header(packet_data_t *packet)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
    if (IS_HOST_TO_TARGET_CMD(packet->header.type.cmd) ||
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <protocol_check_valid_header+0x18>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b54      	cmp	r3, #84	; 0x54
 800230a:	d90f      	bls.n	800232c <protocol_check_valid_header+0x38>
        IS_HOST_TO_TARGET_EVT(packet->header.type.evt) ||
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	781b      	ldrb	r3, [r3, #0]
    if (IS_HOST_TO_TARGET_CMD(packet->header.type.cmd) ||
 8002310:	2b56      	cmp	r3, #86	; 0x56
 8002312:	d903      	bls.n	800231c <protocol_check_valid_header+0x28>
        IS_HOST_TO_TARGET_EVT(packet->header.type.evt) ||
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2baa      	cmp	r3, #170	; 0xaa
 800231a:	d907      	bls.n	800232c <protocol_check_valid_header+0x38>
        IS_HOST_TO_TARGET_RES(packet->header.type.res))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	781b      	ldrb	r3, [r3, #0]
        IS_HOST_TO_TARGET_EVT(packet->header.type.evt) ||
 8002320:	2bac      	cmp	r3, #172	; 0xac
 8002322:	d90d      	bls.n	8002340 <protocol_check_valid_header+0x4c>
        IS_HOST_TO_TARGET_RES(packet->header.type.res))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2bff      	cmp	r3, #255	; 0xff
 800232a:	d009      	beq.n	8002340 <protocol_check_valid_header+0x4c>
    {
        /*check payload len */
        if(packet->header.payload_len < MAX_PAYLOAD_SIZE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	885b      	ldrh	r3, [r3, #2]
 8002330:	2bff      	cmp	r3, #255	; 0xff
 8002332:	d805      	bhi.n	8002340 <protocol_check_valid_header+0x4c>
        {
            if(packet->header.dir == HOST_TO_TARGET_DIR)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	785b      	ldrb	r3, [r3, #1]
 8002338:	2bbb      	cmp	r3, #187	; 0xbb
 800233a:	d101      	bne.n	8002340 <protocol_check_valid_header+0x4c>
            {
                return 1;
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <protocol_check_valid_header+0x4e>
            }
        }
    }

    return 0;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <led_animation_set_next_state>:
static void enter_seq_exec_proc(led_animation_fsm_t *handle);
static void enter_seq_idle_proc(led_animation_fsm_t *handle);


static void led_animation_set_next_state(led_animation_fsm_t *handle, led_animation_state_t state)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	460b      	mov	r3, r1
 8002358:	70fb      	strb	r3, [r7, #3]
    handle->state = state;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	78fa      	ldrb	r2, [r7, #3]
 800235e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    handle->event.name = ev_led_animation_invalid;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <enter_seq_idle_proc>:


static void enter_seq_idle_proc(led_animation_fsm_t *handle)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
    led_animation_dbg("enter seq \t[ idle proc ]\n");
 800237c:	4809      	ldr	r0, [pc, #36]	; (80023a4 <enter_seq_idle_proc+0x30>)
 800237e:	f003 fb89 	bl	8005a94 <puts>
    led_animation_set_next_state(handle, st_led_animation_idle);
 8002382:	2101      	movs	r1, #1
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff ffe2 	bl	800234e <led_animation_set_next_state>
    /*start led off*/
    HAL_GPIO_WritePin(handle->iface.gpio.port, handle->iface.gpio.pin, GPIO_PIN_RESET);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002394:	2200      	movs	r2, #0
 8002396:	4619      	mov	r1, r3
 8002398:	f001 f880 	bl	800349c <HAL_GPIO_WritePin>
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	08007a58 	.word	0x08007a58

080023a8 <enter_seq_exec_proc>:

static void enter_seq_exec_proc(led_animation_fsm_t *handle)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
    led_animation_dbg("enter seq \t[ execution proc ]\n");
 80023b0:	4806      	ldr	r0, [pc, #24]	; (80023cc <enter_seq_exec_proc+0x24>)
 80023b2:	f003 fb6f 	bl	8005a94 <puts>
    led_animation_set_next_state(handle, st_led_animation_exec);
 80023b6:	2102      	movs	r1, #2
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff ffc8 	bl	800234e <led_animation_set_next_state>
    entry_action_exec_proc(handle);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f806 	bl	80023d0 <entry_action_exec_proc>
}
 80023c4:	bf00      	nop
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	08007a84 	.word	0x08007a84

080023d0 <entry_action_exec_proc>:

static void entry_action_exec_proc(led_animation_fsm_t *handle)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
    led_animation_dbg("entry act \t[ execution proc -> start timers, led on ]\n");
 80023d8:	481c      	ldr	r0, [pc, #112]	; (800244c <entry_action_exec_proc+0x7c>)
 80023da:	f003 fb5b 	bl	8005a94 <puts>

    time_event_start(&handle->event.time.exec_time_expired, handle->iface.animation.execution_time);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	1d1a      	adds	r2, r3, #4
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e6:	4619      	mov	r1, r3
 80023e8:	4610      	mov	r0, r2
 80023ea:	f7fe ffd9 	bl	80013a0 <time_event_start>
    time_event_start(&handle->event.time.period_expired, handle->iface.animation.period);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f103 0214 	add.w	r2, r3, #20
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023f8:	4619      	mov	r1, r3
 80023fa:	4610      	mov	r0, r2
 80023fc:	f7fe ffd0 	bl	80013a0 <time_event_start>
    time_event_start(&handle->event.time.time_on_expired, handle->iface.animation.time_on);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f103 020c 	add.w	r2, r3, #12
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800240a:	4619      	mov	r1, r3
 800240c:	4610      	mov	r0, r2
 800240e:	f7fe ffc7 	bl	80013a0 <time_event_start>
    
    /*start led on*/
    HAL_GPIO_WritePin(handle->iface.gpio.port, handle->iface.gpio.pin, GPIO_PIN_SET);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800241c:	2201      	movs	r2, #1
 800241e:	4619      	mov	r1, r3
 8002420:	f001 f83c 	bl	800349c <HAL_GPIO_WritePin>

    /*bright timers*/
    time_event_start(&handle->event.time.bright_refresh, LED_BRIGHT_REFRESH_RATE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3324      	adds	r3, #36	; 0x24
 8002428:	2119      	movs	r1, #25
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe ffb8 	bl	80013a0 <time_event_start>
    time_event_start(&handle->event.time.bright_amount, handle->iface.animation.brightness);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f103 021c 	add.w	r2, r3, #28
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800243c:	4619      	mov	r1, r3
 800243e:	4610      	mov	r0, r2
 8002440:	f7fe ffae 	bl	80013a0 <time_event_start>

}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	08007ab4 	.word	0x08007ab4

08002450 <led_animation_init>:

void led_animation_init(led_animation_fsm_t *handle, led_pin_port *gpio)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
    /*init mcu gpio .. */
    handle->iface.gpio.pin = gpio->pin;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	889a      	ldrh	r2, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    handle->iface.gpio.port = gpio->port;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	63da      	str	r2, [r3, #60]	; 0x3c

    /*enter idle state */
    enter_seq_idle_proc(handle);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ff81 	bl	8002374 <enter_seq_idle_proc>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <led_animation_start>:
 * 
 * @param handle 
 * @param animation 
 */
uint8_t led_animation_start(led_animation_fsm_t *handle, led_animation_t *animation)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	6039      	str	r1, [r7, #0]
    if(led_set_brightness(handle, animation->brightness))
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	4619      	mov	r1, r3
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f814 	bl	80024b8 <led_set_brightness>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00b      	beq.n	80024ae <led_animation_start+0x34>
    {
        memcpy((uint8_t*)&handle->iface.animation, (uint8_t*)animation, sizeof(led_animation_t));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3330      	adds	r3, #48	; 0x30
 800249a:	220c      	movs	r2, #12
 800249c:	6839      	ldr	r1, [r7, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f002 fbee 	bl	8004c80 <memcpy>
        handle->event.name = ev_led_animation_start;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	701a      	strb	r2, [r3, #0]
        return 1;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <led_animation_start+0x36>
    }
    return 0;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <led_set_brightness>:

uint8_t led_set_brightness(led_animation_fsm_t *handle, uint8_t brightness)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	70fb      	strb	r3, [r7, #3]
    if(brightness <= LED_MAX_BRIGHTNESS)
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	2b19      	cmp	r3, #25
 80024c8:	d805      	bhi.n	80024d6 <led_set_brightness+0x1e>
    {
        //led_animation_dbg("func \t[ update brightness ]\n");
        handle->iface.animation.brightness = brightness;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return 1;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <led_set_brightness+0x20>
    }

    return 0;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <idle_proc_on_react>:
    handle->event.name = ev_led_animation_stop;
}


static bool idle_proc_on_react(led_animation_fsm_t *handle)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
	/* The reactions of state 'check preamble' */
	bool did_transition = true;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]

    if (handle->event.name == ev_led_animation_start)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d103      	bne.n	8002500 <idle_proc_on_react+0x1c>
    {
        /*New Led service ready to start*/
        enter_seq_exec_proc(handle);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff ff55 	bl	80023a8 <enter_seq_exec_proc>
 80024fe:	e001      	b.n	8002504 <idle_proc_on_react+0x20>
    }
    else
        did_transition = false;
 8002500:	2300      	movs	r3, #0
 8002502:	73fb      	strb	r3, [r7, #15]

    return did_transition;
 8002504:	7bfb      	ldrb	r3, [r7, #15]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <exit_action_exec_proc>:


static void exit_action_exec_proc(led_animation_fsm_t *handle)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
    led_animation_dbg("exit act \t[ execution proc -> stop timers, led off ]\n");
 8002518:	4814      	ldr	r0, [pc, #80]	; (800256c <exit_action_exec_proc+0x5c>)
 800251a:	f003 fabb 	bl	8005a94 <puts>

    /*stop timers*/
    time_event_stop(&handle->event.time.exec_time_expired);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3304      	adds	r3, #4
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe ff5e 	bl	80013e4 <time_event_stop>
    time_event_stop(&handle->event.time.period_expired);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3314      	adds	r3, #20
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe ff59 	bl	80013e4 <time_event_stop>
    time_event_stop(&handle->event.time.time_on_expired);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	330c      	adds	r3, #12
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe ff54 	bl	80013e4 <time_event_stop>

    /*bright timers*/
    time_event_stop(&handle->event.time.bright_refresh);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3324      	adds	r3, #36	; 0x24
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe ff4f 	bl	80013e4 <time_event_stop>
    time_event_stop(&handle->event.time.bright_amount);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	331c      	adds	r3, #28
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe ff4a 	bl	80013e4 <time_event_stop>

    /*start led off*/
    HAL_GPIO_WritePin(handle->iface.gpio.port, handle->iface.gpio.pin, GPIO_PIN_RESET);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800255a:	2200      	movs	r2, #0
 800255c:	4619      	mov	r1, r3
 800255e:	f000 ff9d 	bl	800349c <HAL_GPIO_WritePin>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	08007b28 	.word	0x08007b28

08002570 <during_action_exec_proc>:
@note : this function simulates a PWM signal from 0-LED_BRIGHT_REFRESH_RATE ms.
PWM frec = 1/LED_BRIGHT_REFRESH_RATE = 1/25e-3 = 40Hz 
brightness level can be chosen from 0 to LED_BRIGHT_REFRESH_RATE levels.
*/
static void during_action_exec_proc(led_animation_fsm_t *handle)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
    
    ____|▔▔▔▔▔|________|▔▔▔▔▔|________
        |------- T --------|
        |---Ton---|
    */
    if(time_event_is_raised(&handle->event.time.period_expired) == true)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3314      	adds	r3, #20
 800257c:	4618      	mov	r0, r3
 800257e:	f7fe ff6d 	bl	800145c <time_event_is_raised>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01b      	beq.n	80025c0 <during_action_exec_proc+0x50>
    {
        HAL_GPIO_WritePin(handle->iface.gpio.port, handle->iface.gpio.pin, GPIO_PIN_SET);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002592:	2201      	movs	r2, #1
 8002594:	4619      	mov	r1, r3
 8002596:	f000 ff81 	bl	800349c <HAL_GPIO_WritePin>
        time_event_start(&handle->event.time.time_on_expired, handle->iface.animation.time_on);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f103 020c 	add.w	r2, r3, #12
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80025a4:	4619      	mov	r1, r3
 80025a6:	4610      	mov	r0, r2
 80025a8:	f7fe fefa 	bl	80013a0 <time_event_start>
        time_event_start(&handle->event.time.period_expired, handle->iface.animation.period);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f103 0214 	add.w	r2, r3, #20
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025b6:	4619      	mov	r1, r3
 80025b8:	4610      	mov	r0, r2
 80025ba:	f7fe fef1 	bl	80013a0 <time_event_start>
 80025be:	e010      	b.n	80025e2 <during_action_exec_proc+0x72>
    }

    else if(time_event_is_raised(&handle->event.time.time_on_expired) == true)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	330c      	adds	r3, #12
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fe ff49 	bl	800145c <time_event_is_raised>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d008      	beq.n	80025e2 <during_action_exec_proc+0x72>
    {
        HAL_GPIO_WritePin(handle->iface.gpio.port, handle->iface.gpio.pin, GPIO_PIN_RESET);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025da:	2200      	movs	r2, #0
 80025dc:	4619      	mov	r1, r3
 80025de:	f000 ff5d 	bl	800349c <HAL_GPIO_WritePin>

        ____|||||||||||________|||||||||||________
            -bright---- PWM (1ms update max)   
    */
    
    if(time_event_is_raised(&handle->event.time.bright_refresh) == true)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3324      	adds	r3, #36	; 0x24
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe ff38 	bl	800145c <time_event_is_raised>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d019      	beq.n	8002626 <during_action_exec_proc+0xb6>
    {
        HAL_GPIO_WritePin(handle->iface.gpio.port, handle->iface.gpio.pin, GPIO_PIN_SET);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025fc:	2201      	movs	r2, #1
 80025fe:	4619      	mov	r1, r3
 8002600:	f000 ff4c 	bl	800349c <HAL_GPIO_WritePin>
        time_event_start(&handle->event.time.bright_refresh, LED_BRIGHT_REFRESH_RATE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3324      	adds	r3, #36	; 0x24
 8002608:	2119      	movs	r1, #25
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fec8 	bl	80013a0 <time_event_start>
        time_event_start(&handle->event.time.bright_amount, handle->iface.animation.brightness);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f103 021c 	add.w	r2, r3, #28
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800261c:	4619      	mov	r1, r3
 800261e:	4610      	mov	r0, r2
 8002620:	f7fe febe 	bl	80013a0 <time_event_start>
    }
    else if(time_event_is_raised(&handle->event.time.bright_amount) == true)
    {
        HAL_GPIO_WritePin(handle->iface.gpio.port, handle->iface.gpio.pin, GPIO_PIN_RESET);
    }
}
 8002624:	e010      	b.n	8002648 <during_action_exec_proc+0xd8>
    else if(time_event_is_raised(&handle->event.time.bright_amount) == true)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	331c      	adds	r3, #28
 800262a:	4618      	mov	r0, r3
 800262c:	f7fe ff16 	bl	800145c <time_event_is_raised>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d008      	beq.n	8002648 <during_action_exec_proc+0xd8>
        HAL_GPIO_WritePin(handle->iface.gpio.port, handle->iface.gpio.pin, GPIO_PIN_RESET);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002640:	2200      	movs	r2, #0
 8002642:	4619      	mov	r1, r3
 8002644:	f000 ff2a 	bl	800349c <HAL_GPIO_WritePin>
}
 8002648:	bf00      	nop
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <exec_proc_on_react>:

static bool exec_proc_on_react(led_animation_fsm_t *handle)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
	/* The reactions of state 'check preamble' */
	bool did_transition = true;
 8002658:	2301      	movs	r3, #1
 800265a:	73fb      	strb	r3, [r7, #15]

    if (handle->event.name == ev_led_animation_start)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d106      	bne.n	8002672 <exec_proc_on_react+0x22>
    {
        /*new animation ready to launch*/
        exit_action_exec_proc(handle);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff ff53 	bl	8002510 <exit_action_exec_proc>
        enter_seq_exec_proc(handle);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff fe9c 	bl	80023a8 <enter_seq_exec_proc>
 8002670:	e027      	b.n	80026c2 <exec_proc_on_react+0x72>
    }
    else if(handle->event.name == ev_led_animation_stop)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d106      	bne.n	8002688 <exec_proc_on_react+0x38>
    {
        /*enter sequence to idle*/
        exit_action_exec_proc(handle);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff ff48 	bl	8002510 <exit_action_exec_proc>
        enter_seq_idle_proc(handle);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff fe77 	bl	8002374 <enter_seq_idle_proc>
 8002686:	e01c      	b.n	80026c2 <exec_proc_on_react+0x72>
    }
    /*check time related events */
    else if(time_event_is_raised(&handle->event.time.exec_time_expired) == true)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3304      	adds	r3, #4
 800268c:	4618      	mov	r0, r3
 800268e:	f7fe fee5 	bl	800145c <time_event_is_raised>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d012      	beq.n	80026be <exec_proc_on_react+0x6e>
    {
        if(handle->iface.animation.execution_time == LED_ENDLESS_EXEC_TIME)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a0:	d106      	bne.n	80026b0 <exec_proc_on_react+0x60>
        {
            /*run animation infinitely*/
            exit_action_exec_proc(handle);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ff34 	bl	8002510 <exit_action_exec_proc>
            enter_seq_exec_proc(handle);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff fe7d 	bl	80023a8 <enter_seq_exec_proc>
 80026ae:	e008      	b.n	80026c2 <exec_proc_on_react+0x72>
        }
        else
        {
        	exit_action_exec_proc(handle);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff ff2d 	bl	8002510 <exit_action_exec_proc>
        	enter_seq_idle_proc(handle);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff fe5c 	bl	8002374 <enter_seq_idle_proc>
 80026bc:	e001      	b.n	80026c2 <exec_proc_on_react+0x72>
        }
    }
    else
        did_transition = false;
 80026be:	2300      	movs	r3, #0
 80026c0:	73fb      	strb	r3, [r7, #15]

    //---------------- during action ------------------//
   if ((did_transition) == (false))
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	f083 0301 	eor.w	r3, r3, #1
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d002      	beq.n	80026d4 <exec_proc_on_react+0x84>
   {
       during_action_exec_proc(handle);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff ff4e 	bl	8002570 <during_action_exec_proc>
   }

    return did_transition;
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <led_animation_run>:


void led_animation_run(led_animation_fsm_t *handle)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
    switch (handle->state)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d002      	beq.n	80026f6 <led_animation_run+0x18>
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d004      	beq.n	80026fe <led_animation_run+0x20>
    {
    case st_led_animation_idle: idle_proc_on_react(handle); break;
    case st_led_animation_exec: exec_proc_on_react(handle); break;
    default:
        break;
 80026f4:	e007      	b.n	8002706 <led_animation_run+0x28>
    case st_led_animation_idle: idle_proc_on_react(handle); break;
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff fef4 	bl	80024e4 <idle_proc_on_react>
 80026fc:	e003      	b.n	8002706 <led_animation_run+0x28>
    case st_led_animation_exec: exec_proc_on_react(handle); break;
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff ffa6 	bl	8002650 <exec_proc_on_react>
 8002704:	bf00      	nop
    }
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <led_animation_time_update>:

void led_animation_time_update(led_animation_fsm_t *handle)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
    time_event_t *time_event = (time_event_t *)&handle->event.time;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3304      	adds	r3, #4
 800271a:	60fb      	str	r3, [r7, #12]
	for (int tev_idx = 0; tev_idx < sizeof(handle->event.time) / sizeof(time_event_t); tev_idx++)
 800271c:	2300      	movs	r3, #0
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	e008      	b.n	8002734 <led_animation_time_update+0x26>
	{
		time_event_update(time_event);
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f7fe fe7e 	bl	8001424 <time_event_update>
		time_event++;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	3308      	adds	r3, #8
 800272c:	60fb      	str	r3, [r7, #12]
	for (int tev_idx = 0; tev_idx < sizeof(handle->event.time) / sizeof(time_event_t); tev_idx++)
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	3301      	adds	r3, #1
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b04      	cmp	r3, #4
 8002738:	d9f3      	bls.n	8002722 <led_animation_time_update+0x14>
	}
}
 800273a:	bf00      	nop
 800273c:	bf00      	nop
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <print_startup_message>:
#define HEARTBEAT_PERIOD_MS (200)
void heartbeat_handler(void);


void print_startup_message(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
	printf("**************************************\r\n");
 8002748:	480a      	ldr	r0, [pc, #40]	; (8002774 <print_startup_message+0x30>)
 800274a:	f003 f9a3 	bl	8005a94 <puts>
	printf("Brief:\t LED animation GPIO FSM\r\n");
 800274e:	480a      	ldr	r0, [pc, #40]	; (8002778 <print_startup_message+0x34>)
 8002750:	f003 f9a0 	bl	8005a94 <puts>
	printf("Author:\t Bayron Cabrera \r\n");
 8002754:	4809      	ldr	r0, [pc, #36]	; (800277c <print_startup_message+0x38>)
 8002756:	f003 f99d 	bl	8005a94 <puts>
	printf("Board:\t Nucleo F411RE \r\n");
 800275a:	4809      	ldr	r0, [pc, #36]	; (8002780 <print_startup_message+0x3c>)
 800275c:	f003 f99a 	bl	8005a94 <puts>
	printf("Date:\t %s\r\n", __DATE__);
 8002760:	4908      	ldr	r1, [pc, #32]	; (8002784 <print_startup_message+0x40>)
 8002762:	4809      	ldr	r0, [pc, #36]	; (8002788 <print_startup_message+0x44>)
 8002764:	f003 f910 	bl	8005988 <iprintf>
	printf("**************************************\r\n");
 8002768:	4802      	ldr	r0, [pc, #8]	; (8002774 <print_startup_message+0x30>)
 800276a:	f003 f993 	bl	8005a94 <puts>
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	08007b70 	.word	0x08007b70
 8002778:	08007b98 	.word	0x08007b98
 800277c:	08007bb8 	.word	0x08007bb8
 8002780:	08007bd4 	.word	0x08007bd4
 8002784:	08007bec 	.word	0x08007bec
 8002788:	08007bf8 	.word	0x08007bf8

0800278c <led_animation_breath>:
        .execution_time = 30000,
        .period = 100,
        .time_on = 100};

void led_animation_breath(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  static uint32_t millis_counter = 0;
  if (HAL_GetTick() - millis_counter > 30)
 8002790:	f000 fb50 	bl	8002e34 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	4b1a      	ldr	r3, [pc, #104]	; (8002800 <led_animation_breath+0x74>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b1e      	cmp	r3, #30
 800279e:	d92c      	bls.n	80027fa <led_animation_breath+0x6e>
  {
    millis_counter = HAL_GetTick();
 80027a0:	f000 fb48 	bl	8002e34 <HAL_GetTick>
 80027a4:	4603      	mov	r3, r0
 80027a6:	4a16      	ldr	r2, [pc, #88]	; (8002800 <led_animation_breath+0x74>)
 80027a8:	6013      	str	r3, [r2, #0]

    //-------- Update every 30ms ---------//
    static int fade_amount = 1;
    breath.brightness = (breath.brightness + fade_amount) % LED_MAX_BRIGHTNESS;
 80027aa:	4b16      	ldr	r3, [pc, #88]	; (8002804 <led_animation_breath+0x78>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	4b15      	ldr	r3, [pc, #84]	; (8002808 <led_animation_breath+0x7c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	441a      	add	r2, r3
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <led_animation_breath+0x80>)
 80027b8:	fb83 1302 	smull	r1, r3, r3, r2
 80027bc:	10d9      	asrs	r1, r3, #3
 80027be:	17d3      	asrs	r3, r2, #31
 80027c0:	1ac9      	subs	r1, r1, r3
 80027c2:	460b      	mov	r3, r1
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	0099      	lsls	r1, r3, #2
 80027ca:	440b      	add	r3, r1
 80027cc:	1ad1      	subs	r1, r2, r3
 80027ce:	b2ca      	uxtb	r2, r1
 80027d0:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <led_animation_breath+0x78>)
 80027d2:	701a      	strb	r2, [r3, #0]

    if (breath.brightness >= (LED_MAX_BRIGHTNESS-1) || breath.brightness <= 0)
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <led_animation_breath+0x78>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b17      	cmp	r3, #23
 80027da:	d803      	bhi.n	80027e4 <led_animation_breath+0x58>
 80027dc:	4b09      	ldr	r3, [pc, #36]	; (8002804 <led_animation_breath+0x78>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d104      	bne.n	80027ee <led_animation_breath+0x62>
      fade_amount = ~fade_amount;
 80027e4:	4b08      	ldr	r3, [pc, #32]	; (8002808 <led_animation_breath+0x7c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	43db      	mvns	r3, r3
 80027ea:	4a07      	ldr	r2, [pc, #28]	; (8002808 <led_animation_breath+0x7c>)
 80027ec:	6013      	str	r3, [r2, #0]

    led_set_brightness(&led_animation, breath.brightness);
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <led_animation_breath+0x78>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	4619      	mov	r1, r3
 80027f4:	4806      	ldr	r0, [pc, #24]	; (8002810 <led_animation_breath+0x84>)
 80027f6:	f7ff fe5f 	bl	80024b8 <led_set_brightness>
  }
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000a88 	.word	0x20000a88
 8002804:	20000008 	.word	0x20000008
 8002808:	20000014 	.word	0x20000014
 800280c:	51eb851f 	.word	0x51eb851f
 8002810:	20000d1c 	.word	0x20000d1c

08002814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* MCU configuration */
  peripherals_init();
 8002818:	f000 f904 	bl	8002a24 <peripherals_init>
  print_startup_message();
 800281c:	f7ff ff92 	bl	8002744 <print_startup_message>

  /* init host tx fsm*/
  host_comm_tx_fsm_init(&host_comm_tx_handle);
 8002820:	480c      	ldr	r0, [pc, #48]	; (8002854 <main+0x40>)
 8002822:	f7ff faa4 	bl	8001d6e <host_comm_tx_fsm_init>
  host_comm_rx_fsm_init(&host_comm_rx_handle);
 8002826:	480c      	ldr	r0, [pc, #48]	; (8002858 <main+0x44>)
 8002828:	f7ff fa18 	bl	8001c5c <host_comm_rx_fsm_init>

  /* example */
  led_animation_init(&led_animation, &led2);
 800282c:	490b      	ldr	r1, [pc, #44]	; (800285c <main+0x48>)
 800282e:	480c      	ldr	r0, [pc, #48]	; (8002860 <main+0x4c>)
 8002830:	f7ff fe0e 	bl	8002450 <led_animation_init>
  led_animation_start(&led_animation, &breath);
 8002834:	490b      	ldr	r1, [pc, #44]	; (8002864 <main+0x50>)
 8002836:	480a      	ldr	r0, [pc, #40]	; (8002860 <main+0x4c>)
 8002838:	f7ff fe1f 	bl	800247a <led_animation_start>

  /* Infinite loop */
  while (1)
  {
    host_comm_tx_fsm_run(&host_comm_tx_handle);
 800283c:	4805      	ldr	r0, [pc, #20]	; (8002854 <main+0x40>)
 800283e:	f7ff fc90 	bl	8002162 <host_comm_tx_fsm_run>
    host_comm_rx_fsm_run(&host_comm_rx_handle);
 8002842:	4805      	ldr	r0, [pc, #20]	; (8002858 <main+0x44>)
 8002844:	f7ff fa3c 	bl	8001cc0 <host_comm_rx_fsm_run>
    led_animation_run(&led_animation);
 8002848:	4805      	ldr	r0, [pc, #20]	; (8002860 <main+0x4c>)
 800284a:	f7ff ff48 	bl	80026de <led_animation_run>
    led_animation_breath();
 800284e:	f7ff ff9d 	bl	800278c <led_animation_breath>
    host_comm_tx_fsm_run(&host_comm_tx_handle);
 8002852:	e7f3      	b.n	800283c <main+0x28>
 8002854:	20000c00 	.word	0x20000c00
 8002858:	20000adc 	.word	0x20000adc
 800285c:	20000000 	.word	0x20000000
 8002860:	20000d1c 	.word	0x20000d1c
 8002864:	20000008 	.word	0x20000008

08002868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800286c:	b672      	cpsid	i
}
 800286e:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002870:	e7fe      	b.n	8002870 <Error_Handler+0x8>
	...

08002874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b094      	sub	sp, #80	; 0x50
 8002878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800287a:	f107 0320 	add.w	r3, r7, #32
 800287e:	2230      	movs	r2, #48	; 0x30
 8002880:	2100      	movs	r1, #0
 8002882:	4618      	mov	r0, r3
 8002884:	f002 fa0a 	bl	8004c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002888:	f107 030c 	add.w	r3, r7, #12
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002898:	2300      	movs	r3, #0
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	4b28      	ldr	r3, [pc, #160]	; (8002940 <SystemClock_Config+0xcc>)
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	4a27      	ldr	r2, [pc, #156]	; (8002940 <SystemClock_Config+0xcc>)
 80028a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a6:	6413      	str	r3, [r2, #64]	; 0x40
 80028a8:	4b25      	ldr	r3, [pc, #148]	; (8002940 <SystemClock_Config+0xcc>)
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028b4:	2300      	movs	r3, #0
 80028b6:	607b      	str	r3, [r7, #4]
 80028b8:	4b22      	ldr	r3, [pc, #136]	; (8002944 <SystemClock_Config+0xd0>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a21      	ldr	r2, [pc, #132]	; (8002944 <SystemClock_Config+0xd0>)
 80028be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028c2:	6013      	str	r3, [r2, #0]
 80028c4:	4b1f      	ldr	r3, [pc, #124]	; (8002944 <SystemClock_Config+0xd0>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028d0:	2302      	movs	r3, #2
 80028d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028d4:	2301      	movs	r3, #1
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028d8:	2310      	movs	r3, #16
 80028da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028dc:	2302      	movs	r3, #2
 80028de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028e0:	2300      	movs	r3, #0
 80028e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80028e4:	2310      	movs	r3, #16
 80028e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80028e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80028ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80028ee:	2304      	movs	r3, #4
 80028f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80028f2:	2304      	movs	r3, #4
 80028f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028f6:	f107 0320 	add.w	r3, r7, #32
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fde8 	bl	80034d0 <HAL_RCC_OscConfig>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002906:	f7ff ffaf 	bl	8002868 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800290a:	230f      	movs	r3, #15
 800290c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800290e:	2302      	movs	r3, #2
 8002910:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002916:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800291a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800291c:	2300      	movs	r3, #0
 800291e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002920:	f107 030c 	add.w	r3, r7, #12
 8002924:	2102      	movs	r1, #2
 8002926:	4618      	mov	r0, r3
 8002928:	f001 f84a 	bl	80039c0 <HAL_RCC_ClockConfig>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002932:	f7ff ff99 	bl	8002868 <Error_Handler>
  }
}
 8002936:	bf00      	nop
 8002938:	3750      	adds	r7, #80	; 0x50
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800
 8002944:	40007000 	.word	0x40007000

08002948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08a      	sub	sp, #40	; 0x28
 800294c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294e:	f107 0314 	add.w	r3, r7, #20
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	605a      	str	r2, [r3, #4]
 8002958:	609a      	str	r2, [r3, #8]
 800295a:	60da      	str	r2, [r3, #12]
 800295c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	4b2d      	ldr	r3, [pc, #180]	; (8002a18 <MX_GPIO_Init+0xd0>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	4a2c      	ldr	r2, [pc, #176]	; (8002a18 <MX_GPIO_Init+0xd0>)
 8002968:	f043 0304 	orr.w	r3, r3, #4
 800296c:	6313      	str	r3, [r2, #48]	; 0x30
 800296e:	4b2a      	ldr	r3, [pc, #168]	; (8002a18 <MX_GPIO_Init+0xd0>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	4b26      	ldr	r3, [pc, #152]	; (8002a18 <MX_GPIO_Init+0xd0>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	4a25      	ldr	r2, [pc, #148]	; (8002a18 <MX_GPIO_Init+0xd0>)
 8002984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002988:	6313      	str	r3, [r2, #48]	; 0x30
 800298a:	4b23      	ldr	r3, [pc, #140]	; (8002a18 <MX_GPIO_Init+0xd0>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <MX_GPIO_Init+0xd0>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	4a1e      	ldr	r2, [pc, #120]	; (8002a18 <MX_GPIO_Init+0xd0>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	6313      	str	r3, [r2, #48]	; 0x30
 80029a6:	4b1c      	ldr	r3, [pc, #112]	; (8002a18 <MX_GPIO_Init+0xd0>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	60bb      	str	r3, [r7, #8]
 80029b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	607b      	str	r3, [r7, #4]
 80029b6:	4b18      	ldr	r3, [pc, #96]	; (8002a18 <MX_GPIO_Init+0xd0>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	4a17      	ldr	r2, [pc, #92]	; (8002a18 <MX_GPIO_Init+0xd0>)
 80029bc:	f043 0302 	orr.w	r3, r3, #2
 80029c0:	6313      	str	r3, [r2, #48]	; 0x30
 80029c2:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <MX_GPIO_Init+0xd0>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	607b      	str	r3, [r7, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80029ce:	2200      	movs	r2, #0
 80029d0:	2120      	movs	r1, #32
 80029d2:	4812      	ldr	r0, [pc, #72]	; (8002a1c <MX_GPIO_Init+0xd4>)
 80029d4:	f000 fd62 	bl	800349c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80029d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029de:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80029e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	4619      	mov	r1, r3
 80029ee:	480c      	ldr	r0, [pc, #48]	; (8002a20 <MX_GPIO_Init+0xd8>)
 80029f0:	f000 fbd0 	bl	8003194 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80029f4:	2320      	movs	r3, #32
 80029f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f8:	2301      	movs	r3, #1
 80029fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a00:	2300      	movs	r3, #0
 8002a02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4804      	ldr	r0, [pc, #16]	; (8002a1c <MX_GPIO_Init+0xd4>)
 8002a0c:	f000 fbc2 	bl	8003194 <HAL_GPIO_Init>

}
 8002a10:	bf00      	nop
 8002a12:	3728      	adds	r7, #40	; 0x28
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	40020000 	.word	0x40020000
 8002a20:	40020800 	.word	0x40020800

08002a24 <peripherals_init>:
/**
 * @brief MCU peripherals initialization
 * 
 */
void peripherals_init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a28:	f000 f99e 	bl	8002d68 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8002a2c:	f7ff ff22 	bl	8002874 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a30:	f7ff ff8a 	bl	8002948 <MX_GPIO_Init>

  /* Init Uart */
  uart_init();
 8002a34:	f7fe fd5c 	bl	80014f0 <uart_init>

  /*Init ITM for debugging */
  ITM_enable();
 8002a38:	f7fe fc7c 	bl	8001334 <ITM_enable>
}
 8002a3c:	bf00      	nop
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	607b      	str	r3, [r7, #4]
 8002a4a:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <HAL_MspInit+0x4c>)
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	4a0f      	ldr	r2, [pc, #60]	; (8002a8c <HAL_MspInit+0x4c>)
 8002a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a54:	6453      	str	r3, [r2, #68]	; 0x44
 8002a56:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <HAL_MspInit+0x4c>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a5e:	607b      	str	r3, [r7, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	603b      	str	r3, [r7, #0]
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HAL_MspInit+0x4c>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	4a08      	ldr	r2, [pc, #32]	; (8002a8c <HAL_MspInit+0x4c>)
 8002a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a70:	6413      	str	r3, [r2, #64]	; 0x40
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_MspInit+0x4c>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002a7e:	2007      	movs	r0, #7
 8002a80:	f000 fab4 	bl	8002fec <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
}
 8002a84:	bf00      	nop
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40023800 	.word	0x40023800

08002a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08a      	sub	sp, #40	; 0x28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a98:	f107 0314 	add.w	r3, r7, #20
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1d      	ldr	r2, [pc, #116]	; (8002b24 <HAL_UART_MspInit+0x94>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d133      	bne.n	8002b1a <HAL_UART_MspInit+0x8a>
  {

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	4b1c      	ldr	r3, [pc, #112]	; (8002b28 <HAL_UART_MspInit+0x98>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	4a1b      	ldr	r2, [pc, #108]	; (8002b28 <HAL_UART_MspInit+0x98>)
 8002abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac2:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <HAL_UART_MspInit+0x98>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <HAL_UART_MspInit+0x98>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	4a14      	ldr	r2, [pc, #80]	; (8002b28 <HAL_UART_MspInit+0x98>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ade:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <HAL_UART_MspInit+0x98>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002aea:	230c      	movs	r3, #12
 8002aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aee:	2302      	movs	r3, #2
 8002af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af6:	2303      	movs	r3, #3
 8002af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002afa:	2307      	movs	r3, #7
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afe:	f107 0314 	add.w	r3, r7, #20
 8002b02:	4619      	mov	r1, r3
 8002b04:	4809      	ldr	r0, [pc, #36]	; (8002b2c <HAL_UART_MspInit+0x9c>)
 8002b06:	f000 fb45 	bl	8003194 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	2026      	movs	r0, #38	; 0x26
 8002b10:	f000 fa77 	bl	8003002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b14:	2026      	movs	r0, #38	; 0x26
 8002b16:	f000 fa90 	bl	800303a <HAL_NVIC_EnableIRQ>
  }
}
 8002b1a:	bf00      	nop
 8002b1c:	3728      	adds	r7, #40	; 0x28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40004400 	.word	0x40004400
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40020000 	.word	0x40020000

08002b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  while (1)
 8002b34:	e7fe      	b.n	8002b34 <NMI_Handler+0x4>

08002b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0
  while (1)
 8002b3a:	e7fe      	b.n	8002b3a <HardFault_Handler+0x4>

08002b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  while (1)
 8002b40:	e7fe      	b.n	8002b40 <MemManage_Handler+0x4>

08002b42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0
  while (1)
 8002b46:	e7fe      	b.n	8002b46 <BusFault_Handler+0x4>

08002b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  while (1)
 8002b4c:	e7fe      	b.n	8002b4c <UsageFault_Handler+0x4>

08002b4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	af00      	add	r7, sp, #0

}
 8002b52:	bf00      	nop
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0

}
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0

}
 8002b6e:	bf00      	nop
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002b7c:	f7fe fc7a 	bl	8001474 <HAL_SYSTICK_Callback>
  HAL_IncTick();
 8002b80:	f000 f944 	bl	8002e0c <HAL_IncTick>
}
 8002b84:	bf00      	nop
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8002b8c:	4802      	ldr	r0, [pc, #8]	; (8002b98 <USART2_IRQHandler+0x10>)
 8002b8e:	f001 f9d5 	bl	8003f3c <HAL_UART_IRQHandler>
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000a98 	.word	0x20000a98

08002b9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
	return 1;
 8002ba0:	2301      	movs	r3, #1
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <_kill>:

int _kill(int pid, int sig)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002bb6:	f002 f81f 	bl	8004bf8 <__errno>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2216      	movs	r2, #22
 8002bbe:	601a      	str	r2, [r3, #0]
	return -1;
 8002bc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <_exit>:

void _exit (int status)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff ffe7 	bl	8002bac <_kill>
	while (1) {}		/* Make sure we hang here */
 8002bde:	e7fe      	b.n	8002bde <_exit+0x12>

08002be0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	e00a      	b.n	8002c08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002bf2:	f3af 8000 	nop.w
 8002bf6:	4601      	mov	r1, r0
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	60ba      	str	r2, [r7, #8]
 8002bfe:	b2ca      	uxtb	r2, r1
 8002c00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	3301      	adds	r3, #1
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	dbf0      	blt.n	8002bf2 <_read+0x12>
	}

return len;
 8002c10:	687b      	ldr	r3, [r7, #4]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <_close>:
	}
	return len;
}

int _close(int file)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
	return -1;
 8002c22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c42:	605a      	str	r2, [r3, #4]
	return 0;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <_isatty>:

int _isatty(int file)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
	return 1;
 8002c5a:	2301      	movs	r3, #1
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
	return 0;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c8c:	4a14      	ldr	r2, [pc, #80]	; (8002ce0 <_sbrk+0x5c>)
 8002c8e:	4b15      	ldr	r3, [pc, #84]	; (8002ce4 <_sbrk+0x60>)
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c98:	4b13      	ldr	r3, [pc, #76]	; (8002ce8 <_sbrk+0x64>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d102      	bne.n	8002ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ca0:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <_sbrk+0x64>)
 8002ca2:	4a12      	ldr	r2, [pc, #72]	; (8002cec <_sbrk+0x68>)
 8002ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ca6:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <_sbrk+0x64>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4413      	add	r3, r2
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d207      	bcs.n	8002cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cb4:	f001 ffa0 	bl	8004bf8 <__errno>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	220c      	movs	r2, #12
 8002cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc2:	e009      	b.n	8002cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cc4:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <_sbrk+0x64>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cca:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <_sbrk+0x64>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	4a05      	ldr	r2, [pc, #20]	; (8002ce8 <_sbrk+0x64>)
 8002cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	20020000 	.word	0x20020000
 8002ce4:	00000400 	.word	0x00000400
 8002ce8:	20000a8c 	.word	0x20000a8c
 8002cec:	20000d78 	.word	0x20000d78

08002cf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <SystemInit+0x20>)
 8002cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfa:	4a05      	ldr	r2, [pc, #20]	; (8002d10 <SystemInit+0x20>)
 8002cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8002d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d18:	480d      	ldr	r0, [pc, #52]	; (8002d50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d1a:	490e      	ldr	r1, [pc, #56]	; (8002d54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d1c:	4a0e      	ldr	r2, [pc, #56]	; (8002d58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d20:	e002      	b.n	8002d28 <LoopCopyDataInit>

08002d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d26:	3304      	adds	r3, #4

08002d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d2c:	d3f9      	bcc.n	8002d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d2e:	4a0b      	ldr	r2, [pc, #44]	; (8002d5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d30:	4c0b      	ldr	r4, [pc, #44]	; (8002d60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d34:	e001      	b.n	8002d3a <LoopFillZerobss>

08002d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d38:	3204      	adds	r2, #4

08002d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d3c:	d3fb      	bcc.n	8002d36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d3e:	f7ff ffd7 	bl	8002cf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d42:	f001 ff71 	bl	8004c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d46:	f7ff fd65 	bl	8002814 <main>
  bx  lr    
 8002d4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d54:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002d58:	08008130 	.word	0x08008130
  ldr r2, =_sbss
 8002d5c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002d60:	20000d74 	.word	0x20000d74

08002d64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d64:	e7fe      	b.n	8002d64 <ADC_IRQHandler>
	...

08002d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d6c:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <HAL_Init+0x40>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a0d      	ldr	r2, [pc, #52]	; (8002da8 <HAL_Init+0x40>)
 8002d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <HAL_Init+0x40>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a0a      	ldr	r2, [pc, #40]	; (8002da8 <HAL_Init+0x40>)
 8002d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d84:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <HAL_Init+0x40>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a07      	ldr	r2, [pc, #28]	; (8002da8 <HAL_Init+0x40>)
 8002d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d90:	2003      	movs	r0, #3
 8002d92:	f000 f92b 	bl	8002fec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d96:	2000      	movs	r0, #0
 8002d98:	f000 f808 	bl	8002dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d9c:	f7ff fe50 	bl	8002a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40023c00 	.word	0x40023c00

08002dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002db4:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <HAL_InitTick+0x54>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <HAL_InitTick+0x58>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 f943 	bl	8003056 <HAL_SYSTICK_Config>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e00e      	b.n	8002df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b0f      	cmp	r3, #15
 8002dde:	d80a      	bhi.n	8002df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002de0:	2200      	movs	r2, #0
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	f04f 30ff 	mov.w	r0, #4294967295
 8002de8:	f000 f90b 	bl	8003002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dec:	4a06      	ldr	r2, [pc, #24]	; (8002e08 <HAL_InitTick+0x5c>)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	e000      	b.n	8002df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	20000018 	.word	0x20000018
 8002e04:	20000020 	.word	0x20000020
 8002e08:	2000001c 	.word	0x2000001c

08002e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e10:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_IncTick+0x20>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <HAL_IncTick+0x24>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	4a04      	ldr	r2, [pc, #16]	; (8002e30 <HAL_IncTick+0x24>)
 8002e1e:	6013      	str	r3, [r2, #0]
}
 8002e20:	bf00      	nop
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	20000020 	.word	0x20000020
 8002e30:	20000d60 	.word	0x20000d60

08002e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return uwTick;
 8002e38:	4b03      	ldr	r3, [pc, #12]	; (8002e48 <HAL_GetTick+0x14>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20000d60 	.word	0x20000d60

08002e4c <__NVIC_SetPriorityGrouping>:
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <__NVIC_SetPriorityGrouping+0x44>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e68:	4013      	ands	r3, r2
 8002e6a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e7e:	4a04      	ldr	r2, [pc, #16]	; (8002e90 <__NVIC_SetPriorityGrouping+0x44>)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	60d3      	str	r3, [r2, #12]
}
 8002e84:	bf00      	nop
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <__NVIC_GetPriorityGrouping>:
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e98:	4b04      	ldr	r3, [pc, #16]	; (8002eac <__NVIC_GetPriorityGrouping+0x18>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	0a1b      	lsrs	r3, r3, #8
 8002e9e:	f003 0307 	and.w	r3, r3, #7
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <__NVIC_EnableIRQ>:
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	db0b      	blt.n	8002eda <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	f003 021f 	and.w	r2, r3, #31
 8002ec8:	4907      	ldr	r1, [pc, #28]	; (8002ee8 <__NVIC_EnableIRQ+0x38>)
 8002eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ece:	095b      	lsrs	r3, r3, #5
 8002ed0:	2001      	movs	r0, #1
 8002ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	e000e100 	.word	0xe000e100

08002eec <__NVIC_SetPriority>:
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	6039      	str	r1, [r7, #0]
 8002ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	db0a      	blt.n	8002f16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	490c      	ldr	r1, [pc, #48]	; (8002f38 <__NVIC_SetPriority+0x4c>)
 8002f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0a:	0112      	lsls	r2, r2, #4
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	440b      	add	r3, r1
 8002f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002f14:	e00a      	b.n	8002f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	4908      	ldr	r1, [pc, #32]	; (8002f3c <__NVIC_SetPriority+0x50>)
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	3b04      	subs	r3, #4
 8002f24:	0112      	lsls	r2, r2, #4
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	440b      	add	r3, r1
 8002f2a:	761a      	strb	r2, [r3, #24]
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	e000e100 	.word	0xe000e100
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <NVIC_EncodePriority>:
{
 8002f40:	b480      	push	{r7}
 8002f42:	b089      	sub	sp, #36	; 0x24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f1c3 0307 	rsb	r3, r3, #7
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	bf28      	it	cs
 8002f5e:	2304      	movcs	r3, #4
 8002f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	3304      	adds	r3, #4
 8002f66:	2b06      	cmp	r3, #6
 8002f68:	d902      	bls.n	8002f70 <NVIC_EncodePriority+0x30>
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	3b03      	subs	r3, #3
 8002f6e:	e000      	b.n	8002f72 <NVIC_EncodePriority+0x32>
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f74:	f04f 32ff 	mov.w	r2, #4294967295
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43da      	mvns	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	401a      	ands	r2, r3
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f88:	f04f 31ff 	mov.w	r1, #4294967295
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f92:	43d9      	mvns	r1, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f98:	4313      	orrs	r3, r2
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3724      	adds	r7, #36	; 0x24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
	...

08002fa8 <SysTick_Config>:
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fb8:	d301      	bcc.n	8002fbe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e00f      	b.n	8002fde <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <SysTick_Config+0x40>)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fc6:	210f      	movs	r1, #15
 8002fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fcc:	f7ff ff8e 	bl	8002eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fd0:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <SysTick_Config+0x40>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fd6:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <SysTick_Config+0x40>)
 8002fd8:	2207      	movs	r2, #7
 8002fda:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	e000e010 	.word	0xe000e010

08002fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7ff ff29 	bl	8002e4c <__NVIC_SetPriorityGrouping>
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003002:	b580      	push	{r7, lr}
 8003004:	b086      	sub	sp, #24
 8003006:	af00      	add	r7, sp, #0
 8003008:	4603      	mov	r3, r0
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	607a      	str	r2, [r7, #4]
 800300e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003014:	f7ff ff3e 	bl	8002e94 <__NVIC_GetPriorityGrouping>
 8003018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	6978      	ldr	r0, [r7, #20]
 8003020:	f7ff ff8e 	bl	8002f40 <NVIC_EncodePriority>
 8003024:	4602      	mov	r2, r0
 8003026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800302a:	4611      	mov	r1, r2
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff ff5d 	bl	8002eec <__NVIC_SetPriority>
}
 8003032:	bf00      	nop
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	4603      	mov	r3, r0
 8003042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff ff31 	bl	8002eb0 <__NVIC_EnableIRQ>
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7ff ffa2 	bl	8002fa8 <SysTick_Config>
 8003064:	4603      	mov	r3, r0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b084      	sub	sp, #16
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800307c:	f7ff feda 	bl	8002e34 <HAL_GetTick>
 8003080:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d008      	beq.n	80030a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2280      	movs	r2, #128	; 0x80
 8003092:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e052      	b.n	8003146 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0216 	bic.w	r2, r2, #22
 80030ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695a      	ldr	r2, [r3, #20]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d103      	bne.n	80030d0 <HAL_DMA_Abort+0x62>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d007      	beq.n	80030e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0208 	bic.w	r2, r2, #8
 80030de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0201 	bic.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030f0:	e013      	b.n	800311a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030f2:	f7ff fe9f 	bl	8002e34 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b05      	cmp	r3, #5
 80030fe:	d90c      	bls.n	800311a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2220      	movs	r2, #32
 8003104:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2203      	movs	r2, #3
 800310a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e015      	b.n	8003146 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e4      	bne.n	80030f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312c:	223f      	movs	r2, #63	; 0x3f
 800312e:	409a      	lsls	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d004      	beq.n	800316c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2280      	movs	r2, #128	; 0x80
 8003166:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e00c      	b.n	8003186 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2205      	movs	r2, #5
 8003170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0201 	bic.w	r2, r2, #1
 8003182:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003194:	b480      	push	{r7}
 8003196:	b089      	sub	sp, #36	; 0x24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800319e:	2300      	movs	r3, #0
 80031a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031aa:	2300      	movs	r3, #0
 80031ac:	61fb      	str	r3, [r7, #28]
 80031ae:	e159      	b.n	8003464 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031b0:	2201      	movs	r2, #1
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	4013      	ands	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	f040 8148 	bne.w	800345e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d005      	beq.n	80031e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d130      	bne.n	8003248 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	2203      	movs	r2, #3
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4313      	orrs	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800321c:	2201      	movs	r2, #1
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f003 0201 	and.w	r2, r3, #1
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	2b03      	cmp	r3, #3
 8003252:	d017      	beq.n	8003284 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	2203      	movs	r2, #3
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	43db      	mvns	r3, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4013      	ands	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4313      	orrs	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d123      	bne.n	80032d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	08da      	lsrs	r2, r3, #3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3208      	adds	r2, #8
 8003298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800329c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	220f      	movs	r2, #15
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	08da      	lsrs	r2, r3, #3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3208      	adds	r2, #8
 80032d2:	69b9      	ldr	r1, [r7, #24]
 80032d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	2203      	movs	r2, #3
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4013      	ands	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 0203 	and.w	r2, r3, #3
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4313      	orrs	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 80a2 	beq.w	800345e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	4b57      	ldr	r3, [pc, #348]	; (800347c <HAL_GPIO_Init+0x2e8>)
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	4a56      	ldr	r2, [pc, #344]	; (800347c <HAL_GPIO_Init+0x2e8>)
 8003324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003328:	6453      	str	r3, [r2, #68]	; 0x44
 800332a:	4b54      	ldr	r3, [pc, #336]	; (800347c <HAL_GPIO_Init+0x2e8>)
 800332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003336:	4a52      	ldr	r2, [pc, #328]	; (8003480 <HAL_GPIO_Init+0x2ec>)
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	089b      	lsrs	r3, r3, #2
 800333c:	3302      	adds	r3, #2
 800333e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	220f      	movs	r2, #15
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43db      	mvns	r3, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4013      	ands	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a49      	ldr	r2, [pc, #292]	; (8003484 <HAL_GPIO_Init+0x2f0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d019      	beq.n	8003396 <HAL_GPIO_Init+0x202>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a48      	ldr	r2, [pc, #288]	; (8003488 <HAL_GPIO_Init+0x2f4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d013      	beq.n	8003392 <HAL_GPIO_Init+0x1fe>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a47      	ldr	r2, [pc, #284]	; (800348c <HAL_GPIO_Init+0x2f8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00d      	beq.n	800338e <HAL_GPIO_Init+0x1fa>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a46      	ldr	r2, [pc, #280]	; (8003490 <HAL_GPIO_Init+0x2fc>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d007      	beq.n	800338a <HAL_GPIO_Init+0x1f6>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a45      	ldr	r2, [pc, #276]	; (8003494 <HAL_GPIO_Init+0x300>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d101      	bne.n	8003386 <HAL_GPIO_Init+0x1f2>
 8003382:	2304      	movs	r3, #4
 8003384:	e008      	b.n	8003398 <HAL_GPIO_Init+0x204>
 8003386:	2307      	movs	r3, #7
 8003388:	e006      	b.n	8003398 <HAL_GPIO_Init+0x204>
 800338a:	2303      	movs	r3, #3
 800338c:	e004      	b.n	8003398 <HAL_GPIO_Init+0x204>
 800338e:	2302      	movs	r3, #2
 8003390:	e002      	b.n	8003398 <HAL_GPIO_Init+0x204>
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <HAL_GPIO_Init+0x204>
 8003396:	2300      	movs	r3, #0
 8003398:	69fa      	ldr	r2, [r7, #28]
 800339a:	f002 0203 	and.w	r2, r2, #3
 800339e:	0092      	lsls	r2, r2, #2
 80033a0:	4093      	lsls	r3, r2
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033a8:	4935      	ldr	r1, [pc, #212]	; (8003480 <HAL_GPIO_Init+0x2ec>)
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	089b      	lsrs	r3, r3, #2
 80033ae:	3302      	adds	r3, #2
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033b6:	4b38      	ldr	r3, [pc, #224]	; (8003498 <HAL_GPIO_Init+0x304>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	43db      	mvns	r3, r3
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4013      	ands	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033da:	4a2f      	ldr	r2, [pc, #188]	; (8003498 <HAL_GPIO_Init+0x304>)
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033e0:	4b2d      	ldr	r3, [pc, #180]	; (8003498 <HAL_GPIO_Init+0x304>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	43db      	mvns	r3, r3
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4013      	ands	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003404:	4a24      	ldr	r2, [pc, #144]	; (8003498 <HAL_GPIO_Init+0x304>)
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800340a:	4b23      	ldr	r3, [pc, #140]	; (8003498 <HAL_GPIO_Init+0x304>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	43db      	mvns	r3, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4013      	ands	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800342e:	4a1a      	ldr	r2, [pc, #104]	; (8003498 <HAL_GPIO_Init+0x304>)
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003434:	4b18      	ldr	r3, [pc, #96]	; (8003498 <HAL_GPIO_Init+0x304>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	43db      	mvns	r3, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003458:	4a0f      	ldr	r2, [pc, #60]	; (8003498 <HAL_GPIO_Init+0x304>)
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3301      	adds	r3, #1
 8003462:	61fb      	str	r3, [r7, #28]
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	2b0f      	cmp	r3, #15
 8003468:	f67f aea2 	bls.w	80031b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800346c:	bf00      	nop
 800346e:	bf00      	nop
 8003470:	3724      	adds	r7, #36	; 0x24
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40023800 	.word	0x40023800
 8003480:	40013800 	.word	0x40013800
 8003484:	40020000 	.word	0x40020000
 8003488:	40020400 	.word	0x40020400
 800348c:	40020800 	.word	0x40020800
 8003490:	40020c00 	.word	0x40020c00
 8003494:	40021000 	.word	0x40021000
 8003498:	40013c00 	.word	0x40013c00

0800349c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	807b      	strh	r3, [r7, #2]
 80034a8:	4613      	mov	r3, r2
 80034aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034ac:	787b      	ldrb	r3, [r7, #1]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034b2:	887a      	ldrh	r2, [r7, #2]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034b8:	e003      	b.n	80034c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034ba:	887b      	ldrh	r3, [r7, #2]
 80034bc:	041a      	lsls	r2, r3, #16
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	619a      	str	r2, [r3, #24]
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e264      	b.n	80039ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d075      	beq.n	80035da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ee:	4ba3      	ldr	r3, [pc, #652]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 030c 	and.w	r3, r3, #12
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d00c      	beq.n	8003514 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034fa:	4ba0      	ldr	r3, [pc, #640]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003502:	2b08      	cmp	r3, #8
 8003504:	d112      	bne.n	800352c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003506:	4b9d      	ldr	r3, [pc, #628]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800350e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003512:	d10b      	bne.n	800352c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003514:	4b99      	ldr	r3, [pc, #612]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d05b      	beq.n	80035d8 <HAL_RCC_OscConfig+0x108>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d157      	bne.n	80035d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e23f      	b.n	80039ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003534:	d106      	bne.n	8003544 <HAL_RCC_OscConfig+0x74>
 8003536:	4b91      	ldr	r3, [pc, #580]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a90      	ldr	r2, [pc, #576]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 800353c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	e01d      	b.n	8003580 <HAL_RCC_OscConfig+0xb0>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800354c:	d10c      	bne.n	8003568 <HAL_RCC_OscConfig+0x98>
 800354e:	4b8b      	ldr	r3, [pc, #556]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a8a      	ldr	r2, [pc, #552]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	4b88      	ldr	r3, [pc, #544]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a87      	ldr	r2, [pc, #540]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	e00b      	b.n	8003580 <HAL_RCC_OscConfig+0xb0>
 8003568:	4b84      	ldr	r3, [pc, #528]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a83      	ldr	r2, [pc, #524]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 800356e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003572:	6013      	str	r3, [r2, #0]
 8003574:	4b81      	ldr	r3, [pc, #516]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a80      	ldr	r2, [pc, #512]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 800357a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800357e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d013      	beq.n	80035b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003588:	f7ff fc54 	bl	8002e34 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003590:	f7ff fc50 	bl	8002e34 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b64      	cmp	r3, #100	; 0x64
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e204      	b.n	80039ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a2:	4b76      	ldr	r3, [pc, #472]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0f0      	beq.n	8003590 <HAL_RCC_OscConfig+0xc0>
 80035ae:	e014      	b.n	80035da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b0:	f7ff fc40 	bl	8002e34 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035b8:	f7ff fc3c 	bl	8002e34 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b64      	cmp	r3, #100	; 0x64
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e1f0      	b.n	80039ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ca:	4b6c      	ldr	r3, [pc, #432]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0xe8>
 80035d6:	e000      	b.n	80035da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d063      	beq.n	80036ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035e6:	4b65      	ldr	r3, [pc, #404]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 030c 	and.w	r3, r3, #12
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00b      	beq.n	800360a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035f2:	4b62      	ldr	r3, [pc, #392]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d11c      	bne.n	8003638 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035fe:	4b5f      	ldr	r3, [pc, #380]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d116      	bne.n	8003638 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360a:	4b5c      	ldr	r3, [pc, #368]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d005      	beq.n	8003622 <HAL_RCC_OscConfig+0x152>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d001      	beq.n	8003622 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e1c4      	b.n	80039ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003622:	4b56      	ldr	r3, [pc, #344]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	4952      	ldr	r1, [pc, #328]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003632:	4313      	orrs	r3, r2
 8003634:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003636:	e03a      	b.n	80036ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d020      	beq.n	8003682 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003640:	4b4f      	ldr	r3, [pc, #316]	; (8003780 <HAL_RCC_OscConfig+0x2b0>)
 8003642:	2201      	movs	r2, #1
 8003644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003646:	f7ff fbf5 	bl	8002e34 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800364e:	f7ff fbf1 	bl	8002e34 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e1a5      	b.n	80039ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003660:	4b46      	ldr	r3, [pc, #280]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0f0      	beq.n	800364e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366c:	4b43      	ldr	r3, [pc, #268]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	4940      	ldr	r1, [pc, #256]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 800367c:	4313      	orrs	r3, r2
 800367e:	600b      	str	r3, [r1, #0]
 8003680:	e015      	b.n	80036ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003682:	4b3f      	ldr	r3, [pc, #252]	; (8003780 <HAL_RCC_OscConfig+0x2b0>)
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003688:	f7ff fbd4 	bl	8002e34 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003690:	f7ff fbd0 	bl	8002e34 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e184      	b.n	80039ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a2:	4b36      	ldr	r3, [pc, #216]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d030      	beq.n	800371c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d016      	beq.n	80036f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036c2:	4b30      	ldr	r3, [pc, #192]	; (8003784 <HAL_RCC_OscConfig+0x2b4>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c8:	f7ff fbb4 	bl	8002e34 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036d0:	f7ff fbb0 	bl	8002e34 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e164      	b.n	80039ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e2:	4b26      	ldr	r3, [pc, #152]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 80036e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCC_OscConfig+0x200>
 80036ee:	e015      	b.n	800371c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036f0:	4b24      	ldr	r3, [pc, #144]	; (8003784 <HAL_RCC_OscConfig+0x2b4>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f6:	f7ff fb9d 	bl	8002e34 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036fe:	f7ff fb99 	bl	8002e34 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e14d      	b.n	80039ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003710:	4b1a      	ldr	r3, [pc, #104]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1f0      	bne.n	80036fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 80a0 	beq.w	800386a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800372a:	2300      	movs	r3, #0
 800372c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800372e:	4b13      	ldr	r3, [pc, #76]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10f      	bne.n	800375a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800373a:	2300      	movs	r3, #0
 800373c:	60bb      	str	r3, [r7, #8]
 800373e:	4b0f      	ldr	r3, [pc, #60]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	4a0e      	ldr	r2, [pc, #56]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003748:	6413      	str	r3, [r2, #64]	; 0x40
 800374a:	4b0c      	ldr	r3, [pc, #48]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003752:	60bb      	str	r3, [r7, #8]
 8003754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003756:	2301      	movs	r3, #1
 8003758:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375a:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <HAL_RCC_OscConfig+0x2b8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003762:	2b00      	cmp	r3, #0
 8003764:	d121      	bne.n	80037aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003766:	4b08      	ldr	r3, [pc, #32]	; (8003788 <HAL_RCC_OscConfig+0x2b8>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a07      	ldr	r2, [pc, #28]	; (8003788 <HAL_RCC_OscConfig+0x2b8>)
 800376c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003772:	f7ff fb5f 	bl	8002e34 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003778:	e011      	b.n	800379e <HAL_RCC_OscConfig+0x2ce>
 800377a:	bf00      	nop
 800377c:	40023800 	.word	0x40023800
 8003780:	42470000 	.word	0x42470000
 8003784:	42470e80 	.word	0x42470e80
 8003788:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378c:	f7ff fb52 	bl	8002e34 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e106      	b.n	80039ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379e:	4b85      	ldr	r3, [pc, #532]	; (80039b4 <HAL_RCC_OscConfig+0x4e4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d106      	bne.n	80037c0 <HAL_RCC_OscConfig+0x2f0>
 80037b2:	4b81      	ldr	r3, [pc, #516]	; (80039b8 <HAL_RCC_OscConfig+0x4e8>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b6:	4a80      	ldr	r2, [pc, #512]	; (80039b8 <HAL_RCC_OscConfig+0x4e8>)
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	6713      	str	r3, [r2, #112]	; 0x70
 80037be:	e01c      	b.n	80037fa <HAL_RCC_OscConfig+0x32a>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b05      	cmp	r3, #5
 80037c6:	d10c      	bne.n	80037e2 <HAL_RCC_OscConfig+0x312>
 80037c8:	4b7b      	ldr	r3, [pc, #492]	; (80039b8 <HAL_RCC_OscConfig+0x4e8>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037cc:	4a7a      	ldr	r2, [pc, #488]	; (80039b8 <HAL_RCC_OscConfig+0x4e8>)
 80037ce:	f043 0304 	orr.w	r3, r3, #4
 80037d2:	6713      	str	r3, [r2, #112]	; 0x70
 80037d4:	4b78      	ldr	r3, [pc, #480]	; (80039b8 <HAL_RCC_OscConfig+0x4e8>)
 80037d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d8:	4a77      	ldr	r2, [pc, #476]	; (80039b8 <HAL_RCC_OscConfig+0x4e8>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	6713      	str	r3, [r2, #112]	; 0x70
 80037e0:	e00b      	b.n	80037fa <HAL_RCC_OscConfig+0x32a>
 80037e2:	4b75      	ldr	r3, [pc, #468]	; (80039b8 <HAL_RCC_OscConfig+0x4e8>)
 80037e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e6:	4a74      	ldr	r2, [pc, #464]	; (80039b8 <HAL_RCC_OscConfig+0x4e8>)
 80037e8:	f023 0301 	bic.w	r3, r3, #1
 80037ec:	6713      	str	r3, [r2, #112]	; 0x70
 80037ee:	4b72      	ldr	r3, [pc, #456]	; (80039b8 <HAL_RCC_OscConfig+0x4e8>)
 80037f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f2:	4a71      	ldr	r2, [pc, #452]	; (80039b8 <HAL_RCC_OscConfig+0x4e8>)
 80037f4:	f023 0304 	bic.w	r3, r3, #4
 80037f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d015      	beq.n	800382e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003802:	f7ff fb17 	bl	8002e34 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003808:	e00a      	b.n	8003820 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800380a:	f7ff fb13 	bl	8002e34 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	f241 3288 	movw	r2, #5000	; 0x1388
 8003818:	4293      	cmp	r3, r2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e0c5      	b.n	80039ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003820:	4b65      	ldr	r3, [pc, #404]	; (80039b8 <HAL_RCC_OscConfig+0x4e8>)
 8003822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0ee      	beq.n	800380a <HAL_RCC_OscConfig+0x33a>
 800382c:	e014      	b.n	8003858 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800382e:	f7ff fb01 	bl	8002e34 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003834:	e00a      	b.n	800384c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003836:	f7ff fafd 	bl	8002e34 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	f241 3288 	movw	r2, #5000	; 0x1388
 8003844:	4293      	cmp	r3, r2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e0af      	b.n	80039ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384c:	4b5a      	ldr	r3, [pc, #360]	; (80039b8 <HAL_RCC_OscConfig+0x4e8>)
 800384e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1ee      	bne.n	8003836 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003858:	7dfb      	ldrb	r3, [r7, #23]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d105      	bne.n	800386a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800385e:	4b56      	ldr	r3, [pc, #344]	; (80039b8 <HAL_RCC_OscConfig+0x4e8>)
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	4a55      	ldr	r2, [pc, #340]	; (80039b8 <HAL_RCC_OscConfig+0x4e8>)
 8003864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003868:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 809b 	beq.w	80039aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003874:	4b50      	ldr	r3, [pc, #320]	; (80039b8 <HAL_RCC_OscConfig+0x4e8>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 030c 	and.w	r3, r3, #12
 800387c:	2b08      	cmp	r3, #8
 800387e:	d05c      	beq.n	800393a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	2b02      	cmp	r3, #2
 8003886:	d141      	bne.n	800390c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003888:	4b4c      	ldr	r3, [pc, #304]	; (80039bc <HAL_RCC_OscConfig+0x4ec>)
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388e:	f7ff fad1 	bl	8002e34 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003896:	f7ff facd 	bl	8002e34 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e081      	b.n	80039ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a8:	4b43      	ldr	r3, [pc, #268]	; (80039b8 <HAL_RCC_OscConfig+0x4e8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1f0      	bne.n	8003896 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	69da      	ldr	r2, [r3, #28]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	431a      	orrs	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	019b      	lsls	r3, r3, #6
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	085b      	lsrs	r3, r3, #1
 80038cc:	3b01      	subs	r3, #1
 80038ce:	041b      	lsls	r3, r3, #16
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d6:	061b      	lsls	r3, r3, #24
 80038d8:	4937      	ldr	r1, [pc, #220]	; (80039b8 <HAL_RCC_OscConfig+0x4e8>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038de:	4b37      	ldr	r3, [pc, #220]	; (80039bc <HAL_RCC_OscConfig+0x4ec>)
 80038e0:	2201      	movs	r2, #1
 80038e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e4:	f7ff faa6 	bl	8002e34 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ec:	f7ff faa2 	bl	8002e34 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e056      	b.n	80039ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038fe:	4b2e      	ldr	r3, [pc, #184]	; (80039b8 <HAL_RCC_OscConfig+0x4e8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0x41c>
 800390a:	e04e      	b.n	80039aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390c:	4b2b      	ldr	r3, [pc, #172]	; (80039bc <HAL_RCC_OscConfig+0x4ec>)
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003912:	f7ff fa8f 	bl	8002e34 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800391a:	f7ff fa8b 	bl	8002e34 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e03f      	b.n	80039ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392c:	4b22      	ldr	r3, [pc, #136]	; (80039b8 <HAL_RCC_OscConfig+0x4e8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1f0      	bne.n	800391a <HAL_RCC_OscConfig+0x44a>
 8003938:	e037      	b.n	80039aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d101      	bne.n	8003946 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e032      	b.n	80039ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003946:	4b1c      	ldr	r3, [pc, #112]	; (80039b8 <HAL_RCC_OscConfig+0x4e8>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d028      	beq.n	80039a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800395e:	429a      	cmp	r2, r3
 8003960:	d121      	bne.n	80039a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396c:	429a      	cmp	r2, r3
 800396e:	d11a      	bne.n	80039a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003976:	4013      	ands	r3, r2
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800397c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800397e:	4293      	cmp	r3, r2
 8003980:	d111      	bne.n	80039a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398c:	085b      	lsrs	r3, r3, #1
 800398e:	3b01      	subs	r3, #1
 8003990:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003992:	429a      	cmp	r2, r3
 8003994:	d107      	bne.n	80039a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d001      	beq.n	80039aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40007000 	.word	0x40007000
 80039b8:	40023800 	.word	0x40023800
 80039bc:	42470060 	.word	0x42470060

080039c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e0cc      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039d4:	4b68      	ldr	r3, [pc, #416]	; (8003b78 <HAL_RCC_ClockConfig+0x1b8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d90c      	bls.n	80039fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e2:	4b65      	ldr	r3, [pc, #404]	; (8003b78 <HAL_RCC_ClockConfig+0x1b8>)
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ea:	4b63      	ldr	r3, [pc, #396]	; (8003b78 <HAL_RCC_ClockConfig+0x1b8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0b8      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d020      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a14:	4b59      	ldr	r3, [pc, #356]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	4a58      	ldr	r2, [pc, #352]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a2c:	4b53      	ldr	r3, [pc, #332]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	4a52      	ldr	r2, [pc, #328]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a38:	4b50      	ldr	r3, [pc, #320]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	494d      	ldr	r1, [pc, #308]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d044      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d107      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5e:	4b47      	ldr	r3, [pc, #284]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d119      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e07f      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d003      	beq.n	8003a7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d107      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a7e:	4b3f      	ldr	r3, [pc, #252]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e06f      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a8e:	4b3b      	ldr	r3, [pc, #236]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e067      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a9e:	4b37      	ldr	r3, [pc, #220]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f023 0203 	bic.w	r2, r3, #3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	4934      	ldr	r1, [pc, #208]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ab0:	f7ff f9c0 	bl	8002e34 <HAL_GetTick>
 8003ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab6:	e00a      	b.n	8003ace <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab8:	f7ff f9bc 	bl	8002e34 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e04f      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ace:	4b2b      	ldr	r3, [pc, #172]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 020c 	and.w	r2, r3, #12
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d1eb      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae0:	4b25      	ldr	r3, [pc, #148]	; (8003b78 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d20c      	bcs.n	8003b08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aee:	4b22      	ldr	r3, [pc, #136]	; (8003b78 <HAL_RCC_ClockConfig+0x1b8>)
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af6:	4b20      	ldr	r3, [pc, #128]	; (8003b78 <HAL_RCC_ClockConfig+0x1b8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d001      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e032      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d008      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b14:	4b19      	ldr	r3, [pc, #100]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	4916      	ldr	r1, [pc, #88]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d009      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b32:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	490e      	ldr	r1, [pc, #56]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b46:	f000 f821 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	091b      	lsrs	r3, r3, #4
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	490a      	ldr	r1, [pc, #40]	; (8003b80 <HAL_RCC_ClockConfig+0x1c0>)
 8003b58:	5ccb      	ldrb	r3, [r1, r3]
 8003b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5e:	4a09      	ldr	r2, [pc, #36]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b62:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff f920 	bl	8002dac <HAL_InitTick>

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40023c00 	.word	0x40023c00
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	08007d20 	.word	0x08007d20
 8003b84:	20000018 	.word	0x20000018
 8003b88:	2000001c 	.word	0x2000001c

08003b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b90:	b084      	sub	sp, #16
 8003b92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	607b      	str	r3, [r7, #4]
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ba4:	4b67      	ldr	r3, [pc, #412]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 030c 	and.w	r3, r3, #12
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d00d      	beq.n	8003bcc <HAL_RCC_GetSysClockFreq+0x40>
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	f200 80bd 	bhi.w	8003d30 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d002      	beq.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x34>
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d003      	beq.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bbe:	e0b7      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bc0:	4b61      	ldr	r3, [pc, #388]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003bc2:	60bb      	str	r3, [r7, #8]
       break;
 8003bc4:	e0b7      	b.n	8003d36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bc6:	4b61      	ldr	r3, [pc, #388]	; (8003d4c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003bc8:	60bb      	str	r3, [r7, #8]
      break;
 8003bca:	e0b4      	b.n	8003d36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bcc:	4b5d      	ldr	r3, [pc, #372]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bd4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bd6:	4b5b      	ldr	r3, [pc, #364]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d04d      	beq.n	8003c7e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003be2:	4b58      	ldr	r3, [pc, #352]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	099b      	lsrs	r3, r3, #6
 8003be8:	461a      	mov	r2, r3
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bf2:	f04f 0100 	mov.w	r1, #0
 8003bf6:	ea02 0800 	and.w	r8, r2, r0
 8003bfa:	ea03 0901 	and.w	r9, r3, r1
 8003bfe:	4640      	mov	r0, r8
 8003c00:	4649      	mov	r1, r9
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	f04f 0300 	mov.w	r3, #0
 8003c0a:	014b      	lsls	r3, r1, #5
 8003c0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c10:	0142      	lsls	r2, r0, #5
 8003c12:	4610      	mov	r0, r2
 8003c14:	4619      	mov	r1, r3
 8003c16:	ebb0 0008 	subs.w	r0, r0, r8
 8003c1a:	eb61 0109 	sbc.w	r1, r1, r9
 8003c1e:	f04f 0200 	mov.w	r2, #0
 8003c22:	f04f 0300 	mov.w	r3, #0
 8003c26:	018b      	lsls	r3, r1, #6
 8003c28:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c2c:	0182      	lsls	r2, r0, #6
 8003c2e:	1a12      	subs	r2, r2, r0
 8003c30:	eb63 0301 	sbc.w	r3, r3, r1
 8003c34:	f04f 0000 	mov.w	r0, #0
 8003c38:	f04f 0100 	mov.w	r1, #0
 8003c3c:	00d9      	lsls	r1, r3, #3
 8003c3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c42:	00d0      	lsls	r0, r2, #3
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	eb12 0208 	adds.w	r2, r2, r8
 8003c4c:	eb43 0309 	adc.w	r3, r3, r9
 8003c50:	f04f 0000 	mov.w	r0, #0
 8003c54:	f04f 0100 	mov.w	r1, #0
 8003c58:	0259      	lsls	r1, r3, #9
 8003c5a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003c5e:	0250      	lsls	r0, r2, #9
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4610      	mov	r0, r2
 8003c66:	4619      	mov	r1, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	f04f 0300 	mov.w	r3, #0
 8003c70:	f7fc ffa2 	bl	8000bb8 <__aeabi_uldivmod>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4613      	mov	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	e04a      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c7e:	4b31      	ldr	r3, [pc, #196]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	099b      	lsrs	r3, r3, #6
 8003c84:	461a      	mov	r2, r3
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c8e:	f04f 0100 	mov.w	r1, #0
 8003c92:	ea02 0400 	and.w	r4, r2, r0
 8003c96:	ea03 0501 	and.w	r5, r3, r1
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	4629      	mov	r1, r5
 8003c9e:	f04f 0200 	mov.w	r2, #0
 8003ca2:	f04f 0300 	mov.w	r3, #0
 8003ca6:	014b      	lsls	r3, r1, #5
 8003ca8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003cac:	0142      	lsls	r2, r0, #5
 8003cae:	4610      	mov	r0, r2
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	1b00      	subs	r0, r0, r4
 8003cb4:	eb61 0105 	sbc.w	r1, r1, r5
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	018b      	lsls	r3, r1, #6
 8003cc2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003cc6:	0182      	lsls	r2, r0, #6
 8003cc8:	1a12      	subs	r2, r2, r0
 8003cca:	eb63 0301 	sbc.w	r3, r3, r1
 8003cce:	f04f 0000 	mov.w	r0, #0
 8003cd2:	f04f 0100 	mov.w	r1, #0
 8003cd6:	00d9      	lsls	r1, r3, #3
 8003cd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cdc:	00d0      	lsls	r0, r2, #3
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	1912      	adds	r2, r2, r4
 8003ce4:	eb45 0303 	adc.w	r3, r5, r3
 8003ce8:	f04f 0000 	mov.w	r0, #0
 8003cec:	f04f 0100 	mov.w	r1, #0
 8003cf0:	0299      	lsls	r1, r3, #10
 8003cf2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003cf6:	0290      	lsls	r0, r2, #10
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	4619      	mov	r1, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	461a      	mov	r2, r3
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	f7fc ff56 	bl	8000bb8 <__aeabi_uldivmod>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4613      	mov	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d14:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	0c1b      	lsrs	r3, r3, #16
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	3301      	adds	r3, #1
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2c:	60bb      	str	r3, [r7, #8]
      break;
 8003d2e:	e002      	b.n	8003d36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d30:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003d32:	60bb      	str	r3, [r7, #8]
      break;
 8003d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d36:	68bb      	ldr	r3, [r7, #8]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003d42:	bf00      	nop
 8003d44:	40023800 	.word	0x40023800
 8003d48:	00f42400 	.word	0x00f42400
 8003d4c:	007a1200 	.word	0x007a1200

08003d50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d54:	4b03      	ldr	r3, [pc, #12]	; (8003d64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d56:	681b      	ldr	r3, [r3, #0]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	20000018 	.word	0x20000018

08003d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d6c:	f7ff fff0 	bl	8003d50 <HAL_RCC_GetHCLKFreq>
 8003d70:	4602      	mov	r2, r0
 8003d72:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	0a9b      	lsrs	r3, r3, #10
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	4903      	ldr	r1, [pc, #12]	; (8003d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d7e:	5ccb      	ldrb	r3, [r1, r3]
 8003d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	08007d30 	.word	0x08007d30

08003d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d94:	f7ff ffdc 	bl	8003d50 <HAL_RCC_GetHCLKFreq>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	0b5b      	lsrs	r3, r3, #13
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	4903      	ldr	r1, [pc, #12]	; (8003db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003da6:	5ccb      	ldrb	r3, [r1, r3]
 8003da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40023800 	.word	0x40023800
 8003db4:	08007d30 	.word	0x08007d30

08003db8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e03f      	b.n	8003e4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7fe fe56 	bl	8002a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2224      	movs	r2, #36	; 0x24
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 fd15 	bl	800482c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695a      	ldr	r2, [r3, #20]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b085      	sub	sp, #20
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b20      	cmp	r3, #32
 8003e6a:	d130      	bne.n	8003ece <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <HAL_UART_Transmit_IT+0x26>
 8003e72:	88fb      	ldrh	r3, [r7, #6]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e029      	b.n	8003ed0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <HAL_UART_Transmit_IT+0x38>
 8003e86:	2302      	movs	r3, #2
 8003e88:	e022      	b.n	8003ed0 <HAL_UART_Transmit_IT+0x7e>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	88fa      	ldrh	r2, [r7, #6]
 8003e9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	88fa      	ldrh	r2, [r7, #6]
 8003ea2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2221      	movs	r2, #33	; 0x21
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ec8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	e000      	b.n	8003ed0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003ece:	2302      	movs	r3, #2
  }
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b20      	cmp	r3, #32
 8003ef4:	d11d      	bne.n	8003f32 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <HAL_UART_Receive_IT+0x26>
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e016      	b.n	8003f34 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_UART_Receive_IT+0x38>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e00f      	b.n	8003f34 <HAL_UART_Receive_IT+0x58>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f22:	88fb      	ldrh	r3, [r7, #6]
 8003f24:	461a      	mov	r2, r3
 8003f26:	68b9      	ldr	r1, [r7, #8]
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 faab 	bl	8004484 <UART_Start_Receive_IT>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	e000      	b.n	8003f34 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003f32:	2302      	movs	r3, #2
  }
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b0ba      	sub	sp, #232	; 0xe8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10f      	bne.n	8003fa2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d009      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x66>
 8003f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fb8b 	bl	80046b6 <UART_Receive_IT>
      return;
 8003fa0:	e256      	b.n	8004450 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003fa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 80de 	beq.w	8004168 <HAL_UART_IRQHandler+0x22c>
 8003fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d106      	bne.n	8003fc6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fbc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 80d1 	beq.w	8004168 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00b      	beq.n	8003fea <HAL_UART_IRQHandler+0xae>
 8003fd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d005      	beq.n	8003fea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	f043 0201 	orr.w	r2, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00b      	beq.n	800400e <HAL_UART_IRQHandler+0xd2>
 8003ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d005      	beq.n	800400e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f043 0202 	orr.w	r2, r3, #2
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800400e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00b      	beq.n	8004032 <HAL_UART_IRQHandler+0xf6>
 800401a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	f043 0204 	orr.w	r2, r3, #4
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b00      	cmp	r3, #0
 800403c:	d011      	beq.n	8004062 <HAL_UART_IRQHandler+0x126>
 800403e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004042:	f003 0320 	and.w	r3, r3, #32
 8004046:	2b00      	cmp	r3, #0
 8004048:	d105      	bne.n	8004056 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800404a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d005      	beq.n	8004062 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	f043 0208 	orr.w	r2, r3, #8
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 81ed 	beq.w	8004446 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800406c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004070:	f003 0320 	and.w	r3, r3, #32
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <HAL_UART_IRQHandler+0x14e>
 8004078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800407c:	f003 0320 	and.w	r3, r3, #32
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 fb16 	bl	80046b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004094:	2b40      	cmp	r3, #64	; 0x40
 8004096:	bf0c      	ite	eq
 8004098:	2301      	moveq	r3, #1
 800409a:	2300      	movne	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d103      	bne.n	80040b6 <HAL_UART_IRQHandler+0x17a>
 80040ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d04f      	beq.n	8004156 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fa1e 	bl	80044f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c6:	2b40      	cmp	r3, #64	; 0x40
 80040c8:	d141      	bne.n	800414e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3314      	adds	r3, #20
 80040d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040d8:	e853 3f00 	ldrex	r3, [r3]
 80040dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80040e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3314      	adds	r3, #20
 80040f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80040f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80040fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004102:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004106:	e841 2300 	strex	r3, r2, [r1]
 800410a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800410e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1d9      	bne.n	80040ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411a:	2b00      	cmp	r3, #0
 800411c:	d013      	beq.n	8004146 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004122:	4a7d      	ldr	r2, [pc, #500]	; (8004318 <HAL_UART_IRQHandler+0x3dc>)
 8004124:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff f80f 	bl	800314e <HAL_DMA_Abort_IT>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d016      	beq.n	8004164 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004140:	4610      	mov	r0, r2
 8004142:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004144:	e00e      	b.n	8004164 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f986 	bl	8004458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800414c:	e00a      	b.n	8004164 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f982 	bl	8004458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004154:	e006      	b.n	8004164 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f97e 	bl	8004458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004162:	e170      	b.n	8004446 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004164:	bf00      	nop
    return;
 8004166:	e16e      	b.n	8004446 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	2b01      	cmp	r3, #1
 800416e:	f040 814a 	bne.w	8004406 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004176:	f003 0310 	and.w	r3, r3, #16
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 8143 	beq.w	8004406 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 813c 	beq.w	8004406 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800418e:	2300      	movs	r3, #0
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60bb      	str	r3, [r7, #8]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	60bb      	str	r3, [r7, #8]
 80041a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ae:	2b40      	cmp	r3, #64	; 0x40
 80041b0:	f040 80b4 	bne.w	800431c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 8140 	beq.w	800444a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041d2:	429a      	cmp	r2, r3
 80041d4:	f080 8139 	bcs.w	800444a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ea:	f000 8088 	beq.w	80042fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	330c      	adds	r3, #12
 80041f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041fc:	e853 3f00 	ldrex	r3, [r3]
 8004200:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004204:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800420c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	330c      	adds	r3, #12
 8004216:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800421a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800421e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004222:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004226:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800422a:	e841 2300 	strex	r3, r2, [r1]
 800422e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004232:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1d9      	bne.n	80041ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3314      	adds	r3, #20
 8004240:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004244:	e853 3f00 	ldrex	r3, [r3]
 8004248:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800424a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800424c:	f023 0301 	bic.w	r3, r3, #1
 8004250:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3314      	adds	r3, #20
 800425a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800425e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004262:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004264:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004266:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800426a:	e841 2300 	strex	r3, r2, [r1]
 800426e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004270:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1e1      	bne.n	800423a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3314      	adds	r3, #20
 800427c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004280:	e853 3f00 	ldrex	r3, [r3]
 8004284:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800428c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3314      	adds	r3, #20
 8004296:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800429a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800429c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80042a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042a2:	e841 2300 	strex	r3, r2, [r1]
 80042a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80042a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1e3      	bne.n	8004276 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	330c      	adds	r3, #12
 80042c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042c6:	e853 3f00 	ldrex	r3, [r3]
 80042ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80042cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042ce:	f023 0310 	bic.w	r3, r3, #16
 80042d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	330c      	adds	r3, #12
 80042dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80042e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80042e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042e8:	e841 2300 	strex	r3, r2, [r1]
 80042ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1e3      	bne.n	80042bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7fe feb8 	bl	800306e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004306:	b29b      	uxth	r3, r3
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	b29b      	uxth	r3, r3
 800430c:	4619      	mov	r1, r3
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f8ac 	bl	800446c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004314:	e099      	b.n	800444a <HAL_UART_IRQHandler+0x50e>
 8004316:	bf00      	nop
 8004318:	080045bf 	.word	0x080045bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004324:	b29b      	uxth	r3, r3
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 808b 	beq.w	800444e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004338:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 8086 	beq.w	800444e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	330c      	adds	r3, #12
 8004348:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434c:	e853 3f00 	ldrex	r3, [r3]
 8004350:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004354:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004358:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	330c      	adds	r3, #12
 8004362:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004366:	647a      	str	r2, [r7, #68]	; 0x44
 8004368:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800436c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800436e:	e841 2300 	strex	r3, r2, [r1]
 8004372:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1e3      	bne.n	8004342 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3314      	adds	r3, #20
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	e853 3f00 	ldrex	r3, [r3]
 8004388:	623b      	str	r3, [r7, #32]
   return(result);
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	f023 0301 	bic.w	r3, r3, #1
 8004390:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3314      	adds	r3, #20
 800439a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800439e:	633a      	str	r2, [r7, #48]	; 0x30
 80043a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043a6:	e841 2300 	strex	r3, r2, [r1]
 80043aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1e3      	bne.n	800437a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	330c      	adds	r3, #12
 80043c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	e853 3f00 	ldrex	r3, [r3]
 80043ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 0310 	bic.w	r3, r3, #16
 80043d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	330c      	adds	r3, #12
 80043e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80043e4:	61fa      	str	r2, [r7, #28]
 80043e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e8:	69b9      	ldr	r1, [r7, #24]
 80043ea:	69fa      	ldr	r2, [r7, #28]
 80043ec:	e841 2300 	strex	r3, r2, [r1]
 80043f0:	617b      	str	r3, [r7, #20]
   return(result);
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1e3      	bne.n	80043c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043fc:	4619      	mov	r1, r3
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f834 	bl	800446c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004404:	e023      	b.n	800444e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800440a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440e:	2b00      	cmp	r3, #0
 8004410:	d009      	beq.n	8004426 <HAL_UART_IRQHandler+0x4ea>
 8004412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f8e1 	bl	80045e6 <UART_Transmit_IT>
    return;
 8004424:	e014      	b.n	8004450 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800442a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00e      	beq.n	8004450 <HAL_UART_IRQHandler+0x514>
 8004432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d008      	beq.n	8004450 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f921 	bl	8004686 <UART_EndTransmit_IT>
    return;
 8004444:	e004      	b.n	8004450 <HAL_UART_IRQHandler+0x514>
    return;
 8004446:	bf00      	nop
 8004448:	e002      	b.n	8004450 <HAL_UART_IRQHandler+0x514>
      return;
 800444a:	bf00      	nop
 800444c:	e000      	b.n	8004450 <HAL_UART_IRQHandler+0x514>
      return;
 800444e:	bf00      	nop
  }
}
 8004450:	37e8      	adds	r7, #232	; 0xe8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop

08004458 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	4613      	mov	r3, r2
 8004490:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	88fa      	ldrh	r2, [r7, #6]
 800449c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	88fa      	ldrh	r2, [r7, #6]
 80044a2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2222      	movs	r2, #34	; 0x22
 80044ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044c8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695a      	ldr	r2, [r3, #20]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 0201 	orr.w	r2, r2, #1
 80044d8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f042 0220 	orr.w	r2, r2, #32
 80044e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b095      	sub	sp, #84	; 0x54
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	330c      	adds	r3, #12
 8004506:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800450a:	e853 3f00 	ldrex	r3, [r3]
 800450e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004512:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	330c      	adds	r3, #12
 800451e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004520:	643a      	str	r2, [r7, #64]	; 0x40
 8004522:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004524:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004526:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004528:	e841 2300 	strex	r3, r2, [r1]
 800452c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800452e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e5      	bne.n	8004500 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3314      	adds	r3, #20
 800453a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	e853 3f00 	ldrex	r3, [r3]
 8004542:	61fb      	str	r3, [r7, #28]
   return(result);
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	f023 0301 	bic.w	r3, r3, #1
 800454a:	64bb      	str	r3, [r7, #72]	; 0x48
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3314      	adds	r3, #20
 8004552:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004554:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004556:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004558:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800455a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800455c:	e841 2300 	strex	r3, r2, [r1]
 8004560:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1e5      	bne.n	8004534 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456c:	2b01      	cmp	r3, #1
 800456e:	d119      	bne.n	80045a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	330c      	adds	r3, #12
 8004576:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	e853 3f00 	ldrex	r3, [r3]
 800457e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f023 0310 	bic.w	r3, r3, #16
 8004586:	647b      	str	r3, [r7, #68]	; 0x44
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	330c      	adds	r3, #12
 800458e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004590:	61ba      	str	r2, [r7, #24]
 8004592:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	6979      	ldr	r1, [r7, #20]
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	e841 2300 	strex	r3, r2, [r1]
 800459c:	613b      	str	r3, [r7, #16]
   return(result);
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e5      	bne.n	8004570 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80045b2:	bf00      	nop
 80045b4:	3754      	adds	r7, #84	; 0x54
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f7ff ff3d 	bl	8004458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045de:	bf00      	nop
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b085      	sub	sp, #20
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b21      	cmp	r3, #33	; 0x21
 80045f8:	d13e      	bne.n	8004678 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004602:	d114      	bne.n	800462e <UART_Transmit_IT+0x48>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d110      	bne.n	800462e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	881b      	ldrh	r3, [r3, #0]
 8004616:	461a      	mov	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004620:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	1c9a      	adds	r2, r3, #2
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	621a      	str	r2, [r3, #32]
 800462c:	e008      	b.n	8004640 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	1c59      	adds	r1, r3, #1
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6211      	str	r1, [r2, #32]
 8004638:	781a      	ldrb	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004644:	b29b      	uxth	r3, r3
 8004646:	3b01      	subs	r3, #1
 8004648:	b29b      	uxth	r3, r3
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	4619      	mov	r1, r3
 800464e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10f      	bne.n	8004674 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004662:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68da      	ldr	r2, [r3, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004672:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	e000      	b.n	800467a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004678:	2302      	movs	r3, #2
  }
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b082      	sub	sp, #8
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800469c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fc ffac 	bl	8001604 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b08c      	sub	sp, #48	; 0x30
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b22      	cmp	r3, #34	; 0x22
 80046c8:	f040 80ab 	bne.w	8004822 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d4:	d117      	bne.n	8004706 <UART_Receive_IT+0x50>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d113      	bne.n	8004706 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046de:	2300      	movs	r3, #0
 80046e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fe:	1c9a      	adds	r2, r3, #2
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	629a      	str	r2, [r3, #40]	; 0x28
 8004704:	e026      	b.n	8004754 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800470c:	2300      	movs	r3, #0
 800470e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004718:	d007      	beq.n	800472a <UART_Receive_IT+0x74>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10a      	bne.n	8004738 <UART_Receive_IT+0x82>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	b2da      	uxtb	r2, r3
 8004732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004734:	701a      	strb	r2, [r3, #0]
 8004736:	e008      	b.n	800474a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004744:	b2da      	uxtb	r2, r3
 8004746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004748:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b01      	subs	r3, #1
 800475c:	b29b      	uxth	r3, r3
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	4619      	mov	r1, r3
 8004762:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004764:	2b00      	cmp	r3, #0
 8004766:	d15a      	bne.n	800481e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0220 	bic.w	r2, r2, #32
 8004776:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004786:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695a      	ldr	r2, [r3, #20]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0201 	bic.w	r2, r2, #1
 8004796:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d135      	bne.n	8004814 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	330c      	adds	r3, #12
 80047b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	e853 3f00 	ldrex	r3, [r3]
 80047bc:	613b      	str	r3, [r7, #16]
   return(result);
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f023 0310 	bic.w	r3, r3, #16
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	330c      	adds	r3, #12
 80047cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ce:	623a      	str	r2, [r7, #32]
 80047d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d2:	69f9      	ldr	r1, [r7, #28]
 80047d4:	6a3a      	ldr	r2, [r7, #32]
 80047d6:	e841 2300 	strex	r3, r2, [r1]
 80047da:	61bb      	str	r3, [r7, #24]
   return(result);
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1e5      	bne.n	80047ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0310 	and.w	r3, r3, #16
 80047ec:	2b10      	cmp	r3, #16
 80047ee:	d10a      	bne.n	8004806 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047f0:	2300      	movs	r3, #0
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800480a:	4619      	mov	r1, r3
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff fe2d 	bl	800446c <HAL_UARTEx_RxEventCallback>
 8004812:	e002      	b.n	800481a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7fc ff29 	bl	800166c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	e002      	b.n	8004824 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	e000      	b.n	8004824 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004822:	2302      	movs	r3, #2
  }
}
 8004824:	4618      	mov	r0, r3
 8004826:	3730      	adds	r7, #48	; 0x30
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800482c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004830:	b09f      	sub	sp, #124	; 0x7c
 8004832:	af00      	add	r7, sp, #0
 8004834:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004842:	68d9      	ldr	r1, [r3, #12]
 8004844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	ea40 0301 	orr.w	r3, r0, r1
 800484c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800484e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	431a      	orrs	r2, r3
 8004858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	431a      	orrs	r2, r3
 800485e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	4313      	orrs	r3, r2
 8004864:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004870:	f021 010c 	bic.w	r1, r1, #12
 8004874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800487a:	430b      	orrs	r3, r1
 800487c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800487e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800488a:	6999      	ldr	r1, [r3, #24]
 800488c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	ea40 0301 	orr.w	r3, r0, r1
 8004894:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	4bc5      	ldr	r3, [pc, #788]	; (8004bb0 <UART_SetConfig+0x384>)
 800489c:	429a      	cmp	r2, r3
 800489e:	d004      	beq.n	80048aa <UART_SetConfig+0x7e>
 80048a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	4bc3      	ldr	r3, [pc, #780]	; (8004bb4 <UART_SetConfig+0x388>)
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d103      	bne.n	80048b2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048aa:	f7ff fa71 	bl	8003d90 <HAL_RCC_GetPCLK2Freq>
 80048ae:	6778      	str	r0, [r7, #116]	; 0x74
 80048b0:	e002      	b.n	80048b8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048b2:	f7ff fa59 	bl	8003d68 <HAL_RCC_GetPCLK1Freq>
 80048b6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048c0:	f040 80b6 	bne.w	8004a30 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048c6:	461c      	mov	r4, r3
 80048c8:	f04f 0500 	mov.w	r5, #0
 80048cc:	4622      	mov	r2, r4
 80048ce:	462b      	mov	r3, r5
 80048d0:	1891      	adds	r1, r2, r2
 80048d2:	6439      	str	r1, [r7, #64]	; 0x40
 80048d4:	415b      	adcs	r3, r3
 80048d6:	647b      	str	r3, [r7, #68]	; 0x44
 80048d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048dc:	1912      	adds	r2, r2, r4
 80048de:	eb45 0303 	adc.w	r3, r5, r3
 80048e2:	f04f 0000 	mov.w	r0, #0
 80048e6:	f04f 0100 	mov.w	r1, #0
 80048ea:	00d9      	lsls	r1, r3, #3
 80048ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048f0:	00d0      	lsls	r0, r2, #3
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	1911      	adds	r1, r2, r4
 80048f8:	6639      	str	r1, [r7, #96]	; 0x60
 80048fa:	416b      	adcs	r3, r5
 80048fc:	667b      	str	r3, [r7, #100]	; 0x64
 80048fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	461a      	mov	r2, r3
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	1891      	adds	r1, r2, r2
 800490a:	63b9      	str	r1, [r7, #56]	; 0x38
 800490c:	415b      	adcs	r3, r3
 800490e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004910:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004914:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004918:	f7fc f94e 	bl	8000bb8 <__aeabi_uldivmod>
 800491c:	4602      	mov	r2, r0
 800491e:	460b      	mov	r3, r1
 8004920:	4ba5      	ldr	r3, [pc, #660]	; (8004bb8 <UART_SetConfig+0x38c>)
 8004922:	fba3 2302 	umull	r2, r3, r3, r2
 8004926:	095b      	lsrs	r3, r3, #5
 8004928:	011e      	lsls	r6, r3, #4
 800492a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800492c:	461c      	mov	r4, r3
 800492e:	f04f 0500 	mov.w	r5, #0
 8004932:	4622      	mov	r2, r4
 8004934:	462b      	mov	r3, r5
 8004936:	1891      	adds	r1, r2, r2
 8004938:	6339      	str	r1, [r7, #48]	; 0x30
 800493a:	415b      	adcs	r3, r3
 800493c:	637b      	str	r3, [r7, #52]	; 0x34
 800493e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004942:	1912      	adds	r2, r2, r4
 8004944:	eb45 0303 	adc.w	r3, r5, r3
 8004948:	f04f 0000 	mov.w	r0, #0
 800494c:	f04f 0100 	mov.w	r1, #0
 8004950:	00d9      	lsls	r1, r3, #3
 8004952:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004956:	00d0      	lsls	r0, r2, #3
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	1911      	adds	r1, r2, r4
 800495e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004960:	416b      	adcs	r3, r5
 8004962:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	461a      	mov	r2, r3
 800496a:	f04f 0300 	mov.w	r3, #0
 800496e:	1891      	adds	r1, r2, r2
 8004970:	62b9      	str	r1, [r7, #40]	; 0x28
 8004972:	415b      	adcs	r3, r3
 8004974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004976:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800497a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800497e:	f7fc f91b 	bl	8000bb8 <__aeabi_uldivmod>
 8004982:	4602      	mov	r2, r0
 8004984:	460b      	mov	r3, r1
 8004986:	4b8c      	ldr	r3, [pc, #560]	; (8004bb8 <UART_SetConfig+0x38c>)
 8004988:	fba3 1302 	umull	r1, r3, r3, r2
 800498c:	095b      	lsrs	r3, r3, #5
 800498e:	2164      	movs	r1, #100	; 0x64
 8004990:	fb01 f303 	mul.w	r3, r1, r3
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	3332      	adds	r3, #50	; 0x32
 800499a:	4a87      	ldr	r2, [pc, #540]	; (8004bb8 <UART_SetConfig+0x38c>)
 800499c:	fba2 2303 	umull	r2, r3, r2, r3
 80049a0:	095b      	lsrs	r3, r3, #5
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049a8:	441e      	add	r6, r3
 80049aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049ac:	4618      	mov	r0, r3
 80049ae:	f04f 0100 	mov.w	r1, #0
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	1894      	adds	r4, r2, r2
 80049b8:	623c      	str	r4, [r7, #32]
 80049ba:	415b      	adcs	r3, r3
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24
 80049be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049c2:	1812      	adds	r2, r2, r0
 80049c4:	eb41 0303 	adc.w	r3, r1, r3
 80049c8:	f04f 0400 	mov.w	r4, #0
 80049cc:	f04f 0500 	mov.w	r5, #0
 80049d0:	00dd      	lsls	r5, r3, #3
 80049d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049d6:	00d4      	lsls	r4, r2, #3
 80049d8:	4622      	mov	r2, r4
 80049da:	462b      	mov	r3, r5
 80049dc:	1814      	adds	r4, r2, r0
 80049de:	653c      	str	r4, [r7, #80]	; 0x50
 80049e0:	414b      	adcs	r3, r1
 80049e2:	657b      	str	r3, [r7, #84]	; 0x54
 80049e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	461a      	mov	r2, r3
 80049ea:	f04f 0300 	mov.w	r3, #0
 80049ee:	1891      	adds	r1, r2, r2
 80049f0:	61b9      	str	r1, [r7, #24]
 80049f2:	415b      	adcs	r3, r3
 80049f4:	61fb      	str	r3, [r7, #28]
 80049f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80049fe:	f7fc f8db 	bl	8000bb8 <__aeabi_uldivmod>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4b6c      	ldr	r3, [pc, #432]	; (8004bb8 <UART_SetConfig+0x38c>)
 8004a08:	fba3 1302 	umull	r1, r3, r3, r2
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	2164      	movs	r1, #100	; 0x64
 8004a10:	fb01 f303 	mul.w	r3, r1, r3
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	3332      	adds	r3, #50	; 0x32
 8004a1a:	4a67      	ldr	r2, [pc, #412]	; (8004bb8 <UART_SetConfig+0x38c>)
 8004a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a20:	095b      	lsrs	r3, r3, #5
 8004a22:	f003 0207 	and.w	r2, r3, #7
 8004a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4432      	add	r2, r6
 8004a2c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a2e:	e0b9      	b.n	8004ba4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a32:	461c      	mov	r4, r3
 8004a34:	f04f 0500 	mov.w	r5, #0
 8004a38:	4622      	mov	r2, r4
 8004a3a:	462b      	mov	r3, r5
 8004a3c:	1891      	adds	r1, r2, r2
 8004a3e:	6139      	str	r1, [r7, #16]
 8004a40:	415b      	adcs	r3, r3
 8004a42:	617b      	str	r3, [r7, #20]
 8004a44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a48:	1912      	adds	r2, r2, r4
 8004a4a:	eb45 0303 	adc.w	r3, r5, r3
 8004a4e:	f04f 0000 	mov.w	r0, #0
 8004a52:	f04f 0100 	mov.w	r1, #0
 8004a56:	00d9      	lsls	r1, r3, #3
 8004a58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a5c:	00d0      	lsls	r0, r2, #3
 8004a5e:	4602      	mov	r2, r0
 8004a60:	460b      	mov	r3, r1
 8004a62:	eb12 0804 	adds.w	r8, r2, r4
 8004a66:	eb43 0905 	adc.w	r9, r3, r5
 8004a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f04f 0100 	mov.w	r1, #0
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	008b      	lsls	r3, r1, #2
 8004a7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a82:	0082      	lsls	r2, r0, #2
 8004a84:	4640      	mov	r0, r8
 8004a86:	4649      	mov	r1, r9
 8004a88:	f7fc f896 	bl	8000bb8 <__aeabi_uldivmod>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4b49      	ldr	r3, [pc, #292]	; (8004bb8 <UART_SetConfig+0x38c>)
 8004a92:	fba3 2302 	umull	r2, r3, r3, r2
 8004a96:	095b      	lsrs	r3, r3, #5
 8004a98:	011e      	lsls	r6, r3, #4
 8004a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f04f 0100 	mov.w	r1, #0
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	1894      	adds	r4, r2, r2
 8004aa8:	60bc      	str	r4, [r7, #8]
 8004aaa:	415b      	adcs	r3, r3
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ab2:	1812      	adds	r2, r2, r0
 8004ab4:	eb41 0303 	adc.w	r3, r1, r3
 8004ab8:	f04f 0400 	mov.w	r4, #0
 8004abc:	f04f 0500 	mov.w	r5, #0
 8004ac0:	00dd      	lsls	r5, r3, #3
 8004ac2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ac6:	00d4      	lsls	r4, r2, #3
 8004ac8:	4622      	mov	r2, r4
 8004aca:	462b      	mov	r3, r5
 8004acc:	1814      	adds	r4, r2, r0
 8004ace:	64bc      	str	r4, [r7, #72]	; 0x48
 8004ad0:	414b      	adcs	r3, r1
 8004ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f04f 0100 	mov.w	r1, #0
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	008b      	lsls	r3, r1, #2
 8004ae8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004aec:	0082      	lsls	r2, r0, #2
 8004aee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004af2:	f7fc f861 	bl	8000bb8 <__aeabi_uldivmod>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4b2f      	ldr	r3, [pc, #188]	; (8004bb8 <UART_SetConfig+0x38c>)
 8004afc:	fba3 1302 	umull	r1, r3, r3, r2
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	2164      	movs	r1, #100	; 0x64
 8004b04:	fb01 f303 	mul.w	r3, r1, r3
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	3332      	adds	r3, #50	; 0x32
 8004b0e:	4a2a      	ldr	r2, [pc, #168]	; (8004bb8 <UART_SetConfig+0x38c>)
 8004b10:	fba2 2303 	umull	r2, r3, r2, r3
 8004b14:	095b      	lsrs	r3, r3, #5
 8004b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b1a:	441e      	add	r6, r3
 8004b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f04f 0100 	mov.w	r1, #0
 8004b24:	4602      	mov	r2, r0
 8004b26:	460b      	mov	r3, r1
 8004b28:	1894      	adds	r4, r2, r2
 8004b2a:	603c      	str	r4, [r7, #0]
 8004b2c:	415b      	adcs	r3, r3
 8004b2e:	607b      	str	r3, [r7, #4]
 8004b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b34:	1812      	adds	r2, r2, r0
 8004b36:	eb41 0303 	adc.w	r3, r1, r3
 8004b3a:	f04f 0400 	mov.w	r4, #0
 8004b3e:	f04f 0500 	mov.w	r5, #0
 8004b42:	00dd      	lsls	r5, r3, #3
 8004b44:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b48:	00d4      	lsls	r4, r2, #3
 8004b4a:	4622      	mov	r2, r4
 8004b4c:	462b      	mov	r3, r5
 8004b4e:	eb12 0a00 	adds.w	sl, r2, r0
 8004b52:	eb43 0b01 	adc.w	fp, r3, r1
 8004b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f04f 0100 	mov.w	r1, #0
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	008b      	lsls	r3, r1, #2
 8004b6a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b6e:	0082      	lsls	r2, r0, #2
 8004b70:	4650      	mov	r0, sl
 8004b72:	4659      	mov	r1, fp
 8004b74:	f7fc f820 	bl	8000bb8 <__aeabi_uldivmod>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4b0e      	ldr	r3, [pc, #56]	; (8004bb8 <UART_SetConfig+0x38c>)
 8004b7e:	fba3 1302 	umull	r1, r3, r3, r2
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	2164      	movs	r1, #100	; 0x64
 8004b86:	fb01 f303 	mul.w	r3, r1, r3
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	3332      	adds	r3, #50	; 0x32
 8004b90:	4a09      	ldr	r2, [pc, #36]	; (8004bb8 <UART_SetConfig+0x38c>)
 8004b92:	fba2 2303 	umull	r2, r3, r2, r3
 8004b96:	095b      	lsrs	r3, r3, #5
 8004b98:	f003 020f 	and.w	r2, r3, #15
 8004b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4432      	add	r2, r6
 8004ba2:	609a      	str	r2, [r3, #8]
}
 8004ba4:	bf00      	nop
 8004ba6:	377c      	adds	r7, #124	; 0x7c
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bae:	bf00      	nop
 8004bb0:	40011000 	.word	0x40011000
 8004bb4:	40011400 	.word	0x40011400
 8004bb8:	51eb851f 	.word	0x51eb851f

08004bbc <__assert_func>:
 8004bbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004bbe:	4614      	mov	r4, r2
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	4b09      	ldr	r3, [pc, #36]	; (8004be8 <__assert_func+0x2c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4605      	mov	r5, r0
 8004bc8:	68d8      	ldr	r0, [r3, #12]
 8004bca:	b14c      	cbz	r4, 8004be0 <__assert_func+0x24>
 8004bcc:	4b07      	ldr	r3, [pc, #28]	; (8004bec <__assert_func+0x30>)
 8004bce:	9100      	str	r1, [sp, #0]
 8004bd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004bd4:	4906      	ldr	r1, [pc, #24]	; (8004bf0 <__assert_func+0x34>)
 8004bd6:	462b      	mov	r3, r5
 8004bd8:	f000 f814 	bl	8004c04 <fiprintf>
 8004bdc:	f001 f832 	bl	8005c44 <abort>
 8004be0:	4b04      	ldr	r3, [pc, #16]	; (8004bf4 <__assert_func+0x38>)
 8004be2:	461c      	mov	r4, r3
 8004be4:	e7f3      	b.n	8004bce <__assert_func+0x12>
 8004be6:	bf00      	nop
 8004be8:	20000024 	.word	0x20000024
 8004bec:	08007d38 	.word	0x08007d38
 8004bf0:	08007d45 	.word	0x08007d45
 8004bf4:	08007d73 	.word	0x08007d73

08004bf8 <__errno>:
 8004bf8:	4b01      	ldr	r3, [pc, #4]	; (8004c00 <__errno+0x8>)
 8004bfa:	6818      	ldr	r0, [r3, #0]
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	20000024 	.word	0x20000024

08004c04 <fiprintf>:
 8004c04:	b40e      	push	{r1, r2, r3}
 8004c06:	b503      	push	{r0, r1, lr}
 8004c08:	4601      	mov	r1, r0
 8004c0a:	ab03      	add	r3, sp, #12
 8004c0c:	4805      	ldr	r0, [pc, #20]	; (8004c24 <fiprintf+0x20>)
 8004c0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c12:	6800      	ldr	r0, [r0, #0]
 8004c14:	9301      	str	r3, [sp, #4]
 8004c16:	f000 f91d 	bl	8004e54 <_vfiprintf_r>
 8004c1a:	b002      	add	sp, #8
 8004c1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c20:	b003      	add	sp, #12
 8004c22:	4770      	bx	lr
 8004c24:	20000024 	.word	0x20000024

08004c28 <__libc_init_array>:
 8004c28:	b570      	push	{r4, r5, r6, lr}
 8004c2a:	4d0d      	ldr	r5, [pc, #52]	; (8004c60 <__libc_init_array+0x38>)
 8004c2c:	4c0d      	ldr	r4, [pc, #52]	; (8004c64 <__libc_init_array+0x3c>)
 8004c2e:	1b64      	subs	r4, r4, r5
 8004c30:	10a4      	asrs	r4, r4, #2
 8004c32:	2600      	movs	r6, #0
 8004c34:	42a6      	cmp	r6, r4
 8004c36:	d109      	bne.n	8004c4c <__libc_init_array+0x24>
 8004c38:	4d0b      	ldr	r5, [pc, #44]	; (8004c68 <__libc_init_array+0x40>)
 8004c3a:	4c0c      	ldr	r4, [pc, #48]	; (8004c6c <__libc_init_array+0x44>)
 8004c3c:	f002 fd4e 	bl	80076dc <_init>
 8004c40:	1b64      	subs	r4, r4, r5
 8004c42:	10a4      	asrs	r4, r4, #2
 8004c44:	2600      	movs	r6, #0
 8004c46:	42a6      	cmp	r6, r4
 8004c48:	d105      	bne.n	8004c56 <__libc_init_array+0x2e>
 8004c4a:	bd70      	pop	{r4, r5, r6, pc}
 8004c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c50:	4798      	blx	r3
 8004c52:	3601      	adds	r6, #1
 8004c54:	e7ee      	b.n	8004c34 <__libc_init_array+0xc>
 8004c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c5a:	4798      	blx	r3
 8004c5c:	3601      	adds	r6, #1
 8004c5e:	e7f2      	b.n	8004c46 <__libc_init_array+0x1e>
 8004c60:	08008128 	.word	0x08008128
 8004c64:	08008128 	.word	0x08008128
 8004c68:	08008128 	.word	0x08008128
 8004c6c:	0800812c 	.word	0x0800812c

08004c70 <malloc>:
 8004c70:	4b02      	ldr	r3, [pc, #8]	; (8004c7c <malloc+0xc>)
 8004c72:	4601      	mov	r1, r0
 8004c74:	6818      	ldr	r0, [r3, #0]
 8004c76:	f000 b869 	b.w	8004d4c <_malloc_r>
 8004c7a:	bf00      	nop
 8004c7c:	20000024 	.word	0x20000024

08004c80 <memcpy>:
 8004c80:	440a      	add	r2, r1
 8004c82:	4291      	cmp	r1, r2
 8004c84:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c88:	d100      	bne.n	8004c8c <memcpy+0xc>
 8004c8a:	4770      	bx	lr
 8004c8c:	b510      	push	{r4, lr}
 8004c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c96:	4291      	cmp	r1, r2
 8004c98:	d1f9      	bne.n	8004c8e <memcpy+0xe>
 8004c9a:	bd10      	pop	{r4, pc}

08004c9c <memset>:
 8004c9c:	4402      	add	r2, r0
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d100      	bne.n	8004ca6 <memset+0xa>
 8004ca4:	4770      	bx	lr
 8004ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8004caa:	e7f9      	b.n	8004ca0 <memset+0x4>

08004cac <_free_r>:
 8004cac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cae:	2900      	cmp	r1, #0
 8004cb0:	d048      	beq.n	8004d44 <_free_r+0x98>
 8004cb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cb6:	9001      	str	r0, [sp, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f1a1 0404 	sub.w	r4, r1, #4
 8004cbe:	bfb8      	it	lt
 8004cc0:	18e4      	addlt	r4, r4, r3
 8004cc2:	f002 f861 	bl	8006d88 <__malloc_lock>
 8004cc6:	4a20      	ldr	r2, [pc, #128]	; (8004d48 <_free_r+0x9c>)
 8004cc8:	9801      	ldr	r0, [sp, #4]
 8004cca:	6813      	ldr	r3, [r2, #0]
 8004ccc:	4615      	mov	r5, r2
 8004cce:	b933      	cbnz	r3, 8004cde <_free_r+0x32>
 8004cd0:	6063      	str	r3, [r4, #4]
 8004cd2:	6014      	str	r4, [r2, #0]
 8004cd4:	b003      	add	sp, #12
 8004cd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cda:	f002 b85b 	b.w	8006d94 <__malloc_unlock>
 8004cde:	42a3      	cmp	r3, r4
 8004ce0:	d90b      	bls.n	8004cfa <_free_r+0x4e>
 8004ce2:	6821      	ldr	r1, [r4, #0]
 8004ce4:	1862      	adds	r2, r4, r1
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	bf04      	itt	eq
 8004cea:	681a      	ldreq	r2, [r3, #0]
 8004cec:	685b      	ldreq	r3, [r3, #4]
 8004cee:	6063      	str	r3, [r4, #4]
 8004cf0:	bf04      	itt	eq
 8004cf2:	1852      	addeq	r2, r2, r1
 8004cf4:	6022      	streq	r2, [r4, #0]
 8004cf6:	602c      	str	r4, [r5, #0]
 8004cf8:	e7ec      	b.n	8004cd4 <_free_r+0x28>
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	b10b      	cbz	r3, 8004d04 <_free_r+0x58>
 8004d00:	42a3      	cmp	r3, r4
 8004d02:	d9fa      	bls.n	8004cfa <_free_r+0x4e>
 8004d04:	6811      	ldr	r1, [r2, #0]
 8004d06:	1855      	adds	r5, r2, r1
 8004d08:	42a5      	cmp	r5, r4
 8004d0a:	d10b      	bne.n	8004d24 <_free_r+0x78>
 8004d0c:	6824      	ldr	r4, [r4, #0]
 8004d0e:	4421      	add	r1, r4
 8004d10:	1854      	adds	r4, r2, r1
 8004d12:	42a3      	cmp	r3, r4
 8004d14:	6011      	str	r1, [r2, #0]
 8004d16:	d1dd      	bne.n	8004cd4 <_free_r+0x28>
 8004d18:	681c      	ldr	r4, [r3, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	6053      	str	r3, [r2, #4]
 8004d1e:	4421      	add	r1, r4
 8004d20:	6011      	str	r1, [r2, #0]
 8004d22:	e7d7      	b.n	8004cd4 <_free_r+0x28>
 8004d24:	d902      	bls.n	8004d2c <_free_r+0x80>
 8004d26:	230c      	movs	r3, #12
 8004d28:	6003      	str	r3, [r0, #0]
 8004d2a:	e7d3      	b.n	8004cd4 <_free_r+0x28>
 8004d2c:	6825      	ldr	r5, [r4, #0]
 8004d2e:	1961      	adds	r1, r4, r5
 8004d30:	428b      	cmp	r3, r1
 8004d32:	bf04      	itt	eq
 8004d34:	6819      	ldreq	r1, [r3, #0]
 8004d36:	685b      	ldreq	r3, [r3, #4]
 8004d38:	6063      	str	r3, [r4, #4]
 8004d3a:	bf04      	itt	eq
 8004d3c:	1949      	addeq	r1, r1, r5
 8004d3e:	6021      	streq	r1, [r4, #0]
 8004d40:	6054      	str	r4, [r2, #4]
 8004d42:	e7c7      	b.n	8004cd4 <_free_r+0x28>
 8004d44:	b003      	add	sp, #12
 8004d46:	bd30      	pop	{r4, r5, pc}
 8004d48:	20000a90 	.word	0x20000a90

08004d4c <_malloc_r>:
 8004d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4e:	1ccd      	adds	r5, r1, #3
 8004d50:	f025 0503 	bic.w	r5, r5, #3
 8004d54:	3508      	adds	r5, #8
 8004d56:	2d0c      	cmp	r5, #12
 8004d58:	bf38      	it	cc
 8004d5a:	250c      	movcc	r5, #12
 8004d5c:	2d00      	cmp	r5, #0
 8004d5e:	4606      	mov	r6, r0
 8004d60:	db01      	blt.n	8004d66 <_malloc_r+0x1a>
 8004d62:	42a9      	cmp	r1, r5
 8004d64:	d903      	bls.n	8004d6e <_malloc_r+0x22>
 8004d66:	230c      	movs	r3, #12
 8004d68:	6033      	str	r3, [r6, #0]
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d6e:	f002 f80b 	bl	8006d88 <__malloc_lock>
 8004d72:	4921      	ldr	r1, [pc, #132]	; (8004df8 <_malloc_r+0xac>)
 8004d74:	680a      	ldr	r2, [r1, #0]
 8004d76:	4614      	mov	r4, r2
 8004d78:	b99c      	cbnz	r4, 8004da2 <_malloc_r+0x56>
 8004d7a:	4f20      	ldr	r7, [pc, #128]	; (8004dfc <_malloc_r+0xb0>)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	b923      	cbnz	r3, 8004d8a <_malloc_r+0x3e>
 8004d80:	4621      	mov	r1, r4
 8004d82:	4630      	mov	r0, r6
 8004d84:	f000 fe8e 	bl	8005aa4 <_sbrk_r>
 8004d88:	6038      	str	r0, [r7, #0]
 8004d8a:	4629      	mov	r1, r5
 8004d8c:	4630      	mov	r0, r6
 8004d8e:	f000 fe89 	bl	8005aa4 <_sbrk_r>
 8004d92:	1c43      	adds	r3, r0, #1
 8004d94:	d123      	bne.n	8004dde <_malloc_r+0x92>
 8004d96:	230c      	movs	r3, #12
 8004d98:	6033      	str	r3, [r6, #0]
 8004d9a:	4630      	mov	r0, r6
 8004d9c:	f001 fffa 	bl	8006d94 <__malloc_unlock>
 8004da0:	e7e3      	b.n	8004d6a <_malloc_r+0x1e>
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	1b5b      	subs	r3, r3, r5
 8004da6:	d417      	bmi.n	8004dd8 <_malloc_r+0x8c>
 8004da8:	2b0b      	cmp	r3, #11
 8004daa:	d903      	bls.n	8004db4 <_malloc_r+0x68>
 8004dac:	6023      	str	r3, [r4, #0]
 8004dae:	441c      	add	r4, r3
 8004db0:	6025      	str	r5, [r4, #0]
 8004db2:	e004      	b.n	8004dbe <_malloc_r+0x72>
 8004db4:	6863      	ldr	r3, [r4, #4]
 8004db6:	42a2      	cmp	r2, r4
 8004db8:	bf0c      	ite	eq
 8004dba:	600b      	streq	r3, [r1, #0]
 8004dbc:	6053      	strne	r3, [r2, #4]
 8004dbe:	4630      	mov	r0, r6
 8004dc0:	f001 ffe8 	bl	8006d94 <__malloc_unlock>
 8004dc4:	f104 000b 	add.w	r0, r4, #11
 8004dc8:	1d23      	adds	r3, r4, #4
 8004dca:	f020 0007 	bic.w	r0, r0, #7
 8004dce:	1ac2      	subs	r2, r0, r3
 8004dd0:	d0cc      	beq.n	8004d6c <_malloc_r+0x20>
 8004dd2:	1a1b      	subs	r3, r3, r0
 8004dd4:	50a3      	str	r3, [r4, r2]
 8004dd6:	e7c9      	b.n	8004d6c <_malloc_r+0x20>
 8004dd8:	4622      	mov	r2, r4
 8004dda:	6864      	ldr	r4, [r4, #4]
 8004ddc:	e7cc      	b.n	8004d78 <_malloc_r+0x2c>
 8004dde:	1cc4      	adds	r4, r0, #3
 8004de0:	f024 0403 	bic.w	r4, r4, #3
 8004de4:	42a0      	cmp	r0, r4
 8004de6:	d0e3      	beq.n	8004db0 <_malloc_r+0x64>
 8004de8:	1a21      	subs	r1, r4, r0
 8004dea:	4630      	mov	r0, r6
 8004dec:	f000 fe5a 	bl	8005aa4 <_sbrk_r>
 8004df0:	3001      	adds	r0, #1
 8004df2:	d1dd      	bne.n	8004db0 <_malloc_r+0x64>
 8004df4:	e7cf      	b.n	8004d96 <_malloc_r+0x4a>
 8004df6:	bf00      	nop
 8004df8:	20000a90 	.word	0x20000a90
 8004dfc:	20000a94 	.word	0x20000a94

08004e00 <__sfputc_r>:
 8004e00:	6893      	ldr	r3, [r2, #8]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	b410      	push	{r4}
 8004e08:	6093      	str	r3, [r2, #8]
 8004e0a:	da08      	bge.n	8004e1e <__sfputc_r+0x1e>
 8004e0c:	6994      	ldr	r4, [r2, #24]
 8004e0e:	42a3      	cmp	r3, r4
 8004e10:	db01      	blt.n	8004e16 <__sfputc_r+0x16>
 8004e12:	290a      	cmp	r1, #10
 8004e14:	d103      	bne.n	8004e1e <__sfputc_r+0x1e>
 8004e16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e1a:	f000 be53 	b.w	8005ac4 <__swbuf_r>
 8004e1e:	6813      	ldr	r3, [r2, #0]
 8004e20:	1c58      	adds	r0, r3, #1
 8004e22:	6010      	str	r0, [r2, #0]
 8004e24:	7019      	strb	r1, [r3, #0]
 8004e26:	4608      	mov	r0, r1
 8004e28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <__sfputs_r>:
 8004e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e30:	4606      	mov	r6, r0
 8004e32:	460f      	mov	r7, r1
 8004e34:	4614      	mov	r4, r2
 8004e36:	18d5      	adds	r5, r2, r3
 8004e38:	42ac      	cmp	r4, r5
 8004e3a:	d101      	bne.n	8004e40 <__sfputs_r+0x12>
 8004e3c:	2000      	movs	r0, #0
 8004e3e:	e007      	b.n	8004e50 <__sfputs_r+0x22>
 8004e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e44:	463a      	mov	r2, r7
 8004e46:	4630      	mov	r0, r6
 8004e48:	f7ff ffda 	bl	8004e00 <__sfputc_r>
 8004e4c:	1c43      	adds	r3, r0, #1
 8004e4e:	d1f3      	bne.n	8004e38 <__sfputs_r+0xa>
 8004e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e54 <_vfiprintf_r>:
 8004e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e58:	460d      	mov	r5, r1
 8004e5a:	b09d      	sub	sp, #116	; 0x74
 8004e5c:	4614      	mov	r4, r2
 8004e5e:	4698      	mov	r8, r3
 8004e60:	4606      	mov	r6, r0
 8004e62:	b118      	cbz	r0, 8004e6c <_vfiprintf_r+0x18>
 8004e64:	6983      	ldr	r3, [r0, #24]
 8004e66:	b90b      	cbnz	r3, 8004e6c <_vfiprintf_r+0x18>
 8004e68:	f001 fe84 	bl	8006b74 <__sinit>
 8004e6c:	4b89      	ldr	r3, [pc, #548]	; (8005094 <_vfiprintf_r+0x240>)
 8004e6e:	429d      	cmp	r5, r3
 8004e70:	d11b      	bne.n	8004eaa <_vfiprintf_r+0x56>
 8004e72:	6875      	ldr	r5, [r6, #4]
 8004e74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e76:	07d9      	lsls	r1, r3, #31
 8004e78:	d405      	bmi.n	8004e86 <_vfiprintf_r+0x32>
 8004e7a:	89ab      	ldrh	r3, [r5, #12]
 8004e7c:	059a      	lsls	r2, r3, #22
 8004e7e:	d402      	bmi.n	8004e86 <_vfiprintf_r+0x32>
 8004e80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e82:	f001 ff1a 	bl	8006cba <__retarget_lock_acquire_recursive>
 8004e86:	89ab      	ldrh	r3, [r5, #12]
 8004e88:	071b      	lsls	r3, r3, #28
 8004e8a:	d501      	bpl.n	8004e90 <_vfiprintf_r+0x3c>
 8004e8c:	692b      	ldr	r3, [r5, #16]
 8004e8e:	b9eb      	cbnz	r3, 8004ecc <_vfiprintf_r+0x78>
 8004e90:	4629      	mov	r1, r5
 8004e92:	4630      	mov	r0, r6
 8004e94:	f000 fe68 	bl	8005b68 <__swsetup_r>
 8004e98:	b1c0      	cbz	r0, 8004ecc <_vfiprintf_r+0x78>
 8004e9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e9c:	07dc      	lsls	r4, r3, #31
 8004e9e:	d50e      	bpl.n	8004ebe <_vfiprintf_r+0x6a>
 8004ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea4:	b01d      	add	sp, #116	; 0x74
 8004ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eaa:	4b7b      	ldr	r3, [pc, #492]	; (8005098 <_vfiprintf_r+0x244>)
 8004eac:	429d      	cmp	r5, r3
 8004eae:	d101      	bne.n	8004eb4 <_vfiprintf_r+0x60>
 8004eb0:	68b5      	ldr	r5, [r6, #8]
 8004eb2:	e7df      	b.n	8004e74 <_vfiprintf_r+0x20>
 8004eb4:	4b79      	ldr	r3, [pc, #484]	; (800509c <_vfiprintf_r+0x248>)
 8004eb6:	429d      	cmp	r5, r3
 8004eb8:	bf08      	it	eq
 8004eba:	68f5      	ldreq	r5, [r6, #12]
 8004ebc:	e7da      	b.n	8004e74 <_vfiprintf_r+0x20>
 8004ebe:	89ab      	ldrh	r3, [r5, #12]
 8004ec0:	0598      	lsls	r0, r3, #22
 8004ec2:	d4ed      	bmi.n	8004ea0 <_vfiprintf_r+0x4c>
 8004ec4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ec6:	f001 fef9 	bl	8006cbc <__retarget_lock_release_recursive>
 8004eca:	e7e9      	b.n	8004ea0 <_vfiprintf_r+0x4c>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	9309      	str	r3, [sp, #36]	; 0x24
 8004ed0:	2320      	movs	r3, #32
 8004ed2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ed6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004eda:	2330      	movs	r3, #48	; 0x30
 8004edc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80050a0 <_vfiprintf_r+0x24c>
 8004ee0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ee4:	f04f 0901 	mov.w	r9, #1
 8004ee8:	4623      	mov	r3, r4
 8004eea:	469a      	mov	sl, r3
 8004eec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ef0:	b10a      	cbz	r2, 8004ef6 <_vfiprintf_r+0xa2>
 8004ef2:	2a25      	cmp	r2, #37	; 0x25
 8004ef4:	d1f9      	bne.n	8004eea <_vfiprintf_r+0x96>
 8004ef6:	ebba 0b04 	subs.w	fp, sl, r4
 8004efa:	d00b      	beq.n	8004f14 <_vfiprintf_r+0xc0>
 8004efc:	465b      	mov	r3, fp
 8004efe:	4622      	mov	r2, r4
 8004f00:	4629      	mov	r1, r5
 8004f02:	4630      	mov	r0, r6
 8004f04:	f7ff ff93 	bl	8004e2e <__sfputs_r>
 8004f08:	3001      	adds	r0, #1
 8004f0a:	f000 80aa 	beq.w	8005062 <_vfiprintf_r+0x20e>
 8004f0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f10:	445a      	add	r2, fp
 8004f12:	9209      	str	r2, [sp, #36]	; 0x24
 8004f14:	f89a 3000 	ldrb.w	r3, [sl]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 80a2 	beq.w	8005062 <_vfiprintf_r+0x20e>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	f04f 32ff 	mov.w	r2, #4294967295
 8004f24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f28:	f10a 0a01 	add.w	sl, sl, #1
 8004f2c:	9304      	str	r3, [sp, #16]
 8004f2e:	9307      	str	r3, [sp, #28]
 8004f30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f34:	931a      	str	r3, [sp, #104]	; 0x68
 8004f36:	4654      	mov	r4, sl
 8004f38:	2205      	movs	r2, #5
 8004f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f3e:	4858      	ldr	r0, [pc, #352]	; (80050a0 <_vfiprintf_r+0x24c>)
 8004f40:	f7fb f956 	bl	80001f0 <memchr>
 8004f44:	9a04      	ldr	r2, [sp, #16]
 8004f46:	b9d8      	cbnz	r0, 8004f80 <_vfiprintf_r+0x12c>
 8004f48:	06d1      	lsls	r1, r2, #27
 8004f4a:	bf44      	itt	mi
 8004f4c:	2320      	movmi	r3, #32
 8004f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f52:	0713      	lsls	r3, r2, #28
 8004f54:	bf44      	itt	mi
 8004f56:	232b      	movmi	r3, #43	; 0x2b
 8004f58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f5c:	f89a 3000 	ldrb.w	r3, [sl]
 8004f60:	2b2a      	cmp	r3, #42	; 0x2a
 8004f62:	d015      	beq.n	8004f90 <_vfiprintf_r+0x13c>
 8004f64:	9a07      	ldr	r2, [sp, #28]
 8004f66:	4654      	mov	r4, sl
 8004f68:	2000      	movs	r0, #0
 8004f6a:	f04f 0c0a 	mov.w	ip, #10
 8004f6e:	4621      	mov	r1, r4
 8004f70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f74:	3b30      	subs	r3, #48	; 0x30
 8004f76:	2b09      	cmp	r3, #9
 8004f78:	d94e      	bls.n	8005018 <_vfiprintf_r+0x1c4>
 8004f7a:	b1b0      	cbz	r0, 8004faa <_vfiprintf_r+0x156>
 8004f7c:	9207      	str	r2, [sp, #28]
 8004f7e:	e014      	b.n	8004faa <_vfiprintf_r+0x156>
 8004f80:	eba0 0308 	sub.w	r3, r0, r8
 8004f84:	fa09 f303 	lsl.w	r3, r9, r3
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	9304      	str	r3, [sp, #16]
 8004f8c:	46a2      	mov	sl, r4
 8004f8e:	e7d2      	b.n	8004f36 <_vfiprintf_r+0xe2>
 8004f90:	9b03      	ldr	r3, [sp, #12]
 8004f92:	1d19      	adds	r1, r3, #4
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	9103      	str	r1, [sp, #12]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	bfbb      	ittet	lt
 8004f9c:	425b      	neglt	r3, r3
 8004f9e:	f042 0202 	orrlt.w	r2, r2, #2
 8004fa2:	9307      	strge	r3, [sp, #28]
 8004fa4:	9307      	strlt	r3, [sp, #28]
 8004fa6:	bfb8      	it	lt
 8004fa8:	9204      	strlt	r2, [sp, #16]
 8004faa:	7823      	ldrb	r3, [r4, #0]
 8004fac:	2b2e      	cmp	r3, #46	; 0x2e
 8004fae:	d10c      	bne.n	8004fca <_vfiprintf_r+0x176>
 8004fb0:	7863      	ldrb	r3, [r4, #1]
 8004fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8004fb4:	d135      	bne.n	8005022 <_vfiprintf_r+0x1ce>
 8004fb6:	9b03      	ldr	r3, [sp, #12]
 8004fb8:	1d1a      	adds	r2, r3, #4
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	9203      	str	r2, [sp, #12]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	bfb8      	it	lt
 8004fc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fc6:	3402      	adds	r4, #2
 8004fc8:	9305      	str	r3, [sp, #20]
 8004fca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80050b0 <_vfiprintf_r+0x25c>
 8004fce:	7821      	ldrb	r1, [r4, #0]
 8004fd0:	2203      	movs	r2, #3
 8004fd2:	4650      	mov	r0, sl
 8004fd4:	f7fb f90c 	bl	80001f0 <memchr>
 8004fd8:	b140      	cbz	r0, 8004fec <_vfiprintf_r+0x198>
 8004fda:	2340      	movs	r3, #64	; 0x40
 8004fdc:	eba0 000a 	sub.w	r0, r0, sl
 8004fe0:	fa03 f000 	lsl.w	r0, r3, r0
 8004fe4:	9b04      	ldr	r3, [sp, #16]
 8004fe6:	4303      	orrs	r3, r0
 8004fe8:	3401      	adds	r4, #1
 8004fea:	9304      	str	r3, [sp, #16]
 8004fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ff0:	482c      	ldr	r0, [pc, #176]	; (80050a4 <_vfiprintf_r+0x250>)
 8004ff2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ff6:	2206      	movs	r2, #6
 8004ff8:	f7fb f8fa 	bl	80001f0 <memchr>
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	d03f      	beq.n	8005080 <_vfiprintf_r+0x22c>
 8005000:	4b29      	ldr	r3, [pc, #164]	; (80050a8 <_vfiprintf_r+0x254>)
 8005002:	bb1b      	cbnz	r3, 800504c <_vfiprintf_r+0x1f8>
 8005004:	9b03      	ldr	r3, [sp, #12]
 8005006:	3307      	adds	r3, #7
 8005008:	f023 0307 	bic.w	r3, r3, #7
 800500c:	3308      	adds	r3, #8
 800500e:	9303      	str	r3, [sp, #12]
 8005010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005012:	443b      	add	r3, r7
 8005014:	9309      	str	r3, [sp, #36]	; 0x24
 8005016:	e767      	b.n	8004ee8 <_vfiprintf_r+0x94>
 8005018:	fb0c 3202 	mla	r2, ip, r2, r3
 800501c:	460c      	mov	r4, r1
 800501e:	2001      	movs	r0, #1
 8005020:	e7a5      	b.n	8004f6e <_vfiprintf_r+0x11a>
 8005022:	2300      	movs	r3, #0
 8005024:	3401      	adds	r4, #1
 8005026:	9305      	str	r3, [sp, #20]
 8005028:	4619      	mov	r1, r3
 800502a:	f04f 0c0a 	mov.w	ip, #10
 800502e:	4620      	mov	r0, r4
 8005030:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005034:	3a30      	subs	r2, #48	; 0x30
 8005036:	2a09      	cmp	r2, #9
 8005038:	d903      	bls.n	8005042 <_vfiprintf_r+0x1ee>
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0c5      	beq.n	8004fca <_vfiprintf_r+0x176>
 800503e:	9105      	str	r1, [sp, #20]
 8005040:	e7c3      	b.n	8004fca <_vfiprintf_r+0x176>
 8005042:	fb0c 2101 	mla	r1, ip, r1, r2
 8005046:	4604      	mov	r4, r0
 8005048:	2301      	movs	r3, #1
 800504a:	e7f0      	b.n	800502e <_vfiprintf_r+0x1da>
 800504c:	ab03      	add	r3, sp, #12
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	462a      	mov	r2, r5
 8005052:	4b16      	ldr	r3, [pc, #88]	; (80050ac <_vfiprintf_r+0x258>)
 8005054:	a904      	add	r1, sp, #16
 8005056:	4630      	mov	r0, r6
 8005058:	f000 f8cc 	bl	80051f4 <_printf_float>
 800505c:	4607      	mov	r7, r0
 800505e:	1c78      	adds	r0, r7, #1
 8005060:	d1d6      	bne.n	8005010 <_vfiprintf_r+0x1bc>
 8005062:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005064:	07d9      	lsls	r1, r3, #31
 8005066:	d405      	bmi.n	8005074 <_vfiprintf_r+0x220>
 8005068:	89ab      	ldrh	r3, [r5, #12]
 800506a:	059a      	lsls	r2, r3, #22
 800506c:	d402      	bmi.n	8005074 <_vfiprintf_r+0x220>
 800506e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005070:	f001 fe24 	bl	8006cbc <__retarget_lock_release_recursive>
 8005074:	89ab      	ldrh	r3, [r5, #12]
 8005076:	065b      	lsls	r3, r3, #25
 8005078:	f53f af12 	bmi.w	8004ea0 <_vfiprintf_r+0x4c>
 800507c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800507e:	e711      	b.n	8004ea4 <_vfiprintf_r+0x50>
 8005080:	ab03      	add	r3, sp, #12
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	462a      	mov	r2, r5
 8005086:	4b09      	ldr	r3, [pc, #36]	; (80050ac <_vfiprintf_r+0x258>)
 8005088:	a904      	add	r1, sp, #16
 800508a:	4630      	mov	r0, r6
 800508c:	f000 fb56 	bl	800573c <_printf_i>
 8005090:	e7e4      	b.n	800505c <_vfiprintf_r+0x208>
 8005092:	bf00      	nop
 8005094:	08007e74 	.word	0x08007e74
 8005098:	08007e94 	.word	0x08007e94
 800509c:	08007e54 	.word	0x08007e54
 80050a0:	08007d78 	.word	0x08007d78
 80050a4:	08007d82 	.word	0x08007d82
 80050a8:	080051f5 	.word	0x080051f5
 80050ac:	08004e2f 	.word	0x08004e2f
 80050b0:	08007d7e 	.word	0x08007d7e

080050b4 <__cvt>:
 80050b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050b8:	ec55 4b10 	vmov	r4, r5, d0
 80050bc:	2d00      	cmp	r5, #0
 80050be:	460e      	mov	r6, r1
 80050c0:	4619      	mov	r1, r3
 80050c2:	462b      	mov	r3, r5
 80050c4:	bfbb      	ittet	lt
 80050c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80050ca:	461d      	movlt	r5, r3
 80050cc:	2300      	movge	r3, #0
 80050ce:	232d      	movlt	r3, #45	; 0x2d
 80050d0:	700b      	strb	r3, [r1, #0]
 80050d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80050d8:	4691      	mov	r9, r2
 80050da:	f023 0820 	bic.w	r8, r3, #32
 80050de:	bfbc      	itt	lt
 80050e0:	4622      	movlt	r2, r4
 80050e2:	4614      	movlt	r4, r2
 80050e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050e8:	d005      	beq.n	80050f6 <__cvt+0x42>
 80050ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80050ee:	d100      	bne.n	80050f2 <__cvt+0x3e>
 80050f0:	3601      	adds	r6, #1
 80050f2:	2102      	movs	r1, #2
 80050f4:	e000      	b.n	80050f8 <__cvt+0x44>
 80050f6:	2103      	movs	r1, #3
 80050f8:	ab03      	add	r3, sp, #12
 80050fa:	9301      	str	r3, [sp, #4]
 80050fc:	ab02      	add	r3, sp, #8
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	ec45 4b10 	vmov	d0, r4, r5
 8005104:	4653      	mov	r3, sl
 8005106:	4632      	mov	r2, r6
 8005108:	f000 fe2e 	bl	8005d68 <_dtoa_r>
 800510c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005110:	4607      	mov	r7, r0
 8005112:	d102      	bne.n	800511a <__cvt+0x66>
 8005114:	f019 0f01 	tst.w	r9, #1
 8005118:	d022      	beq.n	8005160 <__cvt+0xac>
 800511a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800511e:	eb07 0906 	add.w	r9, r7, r6
 8005122:	d110      	bne.n	8005146 <__cvt+0x92>
 8005124:	783b      	ldrb	r3, [r7, #0]
 8005126:	2b30      	cmp	r3, #48	; 0x30
 8005128:	d10a      	bne.n	8005140 <__cvt+0x8c>
 800512a:	2200      	movs	r2, #0
 800512c:	2300      	movs	r3, #0
 800512e:	4620      	mov	r0, r4
 8005130:	4629      	mov	r1, r5
 8005132:	f7fb fcd1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005136:	b918      	cbnz	r0, 8005140 <__cvt+0x8c>
 8005138:	f1c6 0601 	rsb	r6, r6, #1
 800513c:	f8ca 6000 	str.w	r6, [sl]
 8005140:	f8da 3000 	ldr.w	r3, [sl]
 8005144:	4499      	add	r9, r3
 8005146:	2200      	movs	r2, #0
 8005148:	2300      	movs	r3, #0
 800514a:	4620      	mov	r0, r4
 800514c:	4629      	mov	r1, r5
 800514e:	f7fb fcc3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005152:	b108      	cbz	r0, 8005158 <__cvt+0xa4>
 8005154:	f8cd 900c 	str.w	r9, [sp, #12]
 8005158:	2230      	movs	r2, #48	; 0x30
 800515a:	9b03      	ldr	r3, [sp, #12]
 800515c:	454b      	cmp	r3, r9
 800515e:	d307      	bcc.n	8005170 <__cvt+0xbc>
 8005160:	9b03      	ldr	r3, [sp, #12]
 8005162:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005164:	1bdb      	subs	r3, r3, r7
 8005166:	4638      	mov	r0, r7
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	b004      	add	sp, #16
 800516c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005170:	1c59      	adds	r1, r3, #1
 8005172:	9103      	str	r1, [sp, #12]
 8005174:	701a      	strb	r2, [r3, #0]
 8005176:	e7f0      	b.n	800515a <__cvt+0xa6>

08005178 <__exponent>:
 8005178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800517a:	4603      	mov	r3, r0
 800517c:	2900      	cmp	r1, #0
 800517e:	bfb8      	it	lt
 8005180:	4249      	neglt	r1, r1
 8005182:	f803 2b02 	strb.w	r2, [r3], #2
 8005186:	bfb4      	ite	lt
 8005188:	222d      	movlt	r2, #45	; 0x2d
 800518a:	222b      	movge	r2, #43	; 0x2b
 800518c:	2909      	cmp	r1, #9
 800518e:	7042      	strb	r2, [r0, #1]
 8005190:	dd2a      	ble.n	80051e8 <__exponent+0x70>
 8005192:	f10d 0407 	add.w	r4, sp, #7
 8005196:	46a4      	mov	ip, r4
 8005198:	270a      	movs	r7, #10
 800519a:	46a6      	mov	lr, r4
 800519c:	460a      	mov	r2, r1
 800519e:	fb91 f6f7 	sdiv	r6, r1, r7
 80051a2:	fb07 1516 	mls	r5, r7, r6, r1
 80051a6:	3530      	adds	r5, #48	; 0x30
 80051a8:	2a63      	cmp	r2, #99	; 0x63
 80051aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80051ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80051b2:	4631      	mov	r1, r6
 80051b4:	dcf1      	bgt.n	800519a <__exponent+0x22>
 80051b6:	3130      	adds	r1, #48	; 0x30
 80051b8:	f1ae 0502 	sub.w	r5, lr, #2
 80051bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80051c0:	1c44      	adds	r4, r0, #1
 80051c2:	4629      	mov	r1, r5
 80051c4:	4561      	cmp	r1, ip
 80051c6:	d30a      	bcc.n	80051de <__exponent+0x66>
 80051c8:	f10d 0209 	add.w	r2, sp, #9
 80051cc:	eba2 020e 	sub.w	r2, r2, lr
 80051d0:	4565      	cmp	r5, ip
 80051d2:	bf88      	it	hi
 80051d4:	2200      	movhi	r2, #0
 80051d6:	4413      	add	r3, r2
 80051d8:	1a18      	subs	r0, r3, r0
 80051da:	b003      	add	sp, #12
 80051dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80051e6:	e7ed      	b.n	80051c4 <__exponent+0x4c>
 80051e8:	2330      	movs	r3, #48	; 0x30
 80051ea:	3130      	adds	r1, #48	; 0x30
 80051ec:	7083      	strb	r3, [r0, #2]
 80051ee:	70c1      	strb	r1, [r0, #3]
 80051f0:	1d03      	adds	r3, r0, #4
 80051f2:	e7f1      	b.n	80051d8 <__exponent+0x60>

080051f4 <_printf_float>:
 80051f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f8:	ed2d 8b02 	vpush	{d8}
 80051fc:	b08d      	sub	sp, #52	; 0x34
 80051fe:	460c      	mov	r4, r1
 8005200:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005204:	4616      	mov	r6, r2
 8005206:	461f      	mov	r7, r3
 8005208:	4605      	mov	r5, r0
 800520a:	f001 fd51 	bl	8006cb0 <_localeconv_r>
 800520e:	f8d0 a000 	ldr.w	sl, [r0]
 8005212:	4650      	mov	r0, sl
 8005214:	f7fa ffe4 	bl	80001e0 <strlen>
 8005218:	2300      	movs	r3, #0
 800521a:	930a      	str	r3, [sp, #40]	; 0x28
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	9305      	str	r3, [sp, #20]
 8005220:	f8d8 3000 	ldr.w	r3, [r8]
 8005224:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005228:	3307      	adds	r3, #7
 800522a:	f023 0307 	bic.w	r3, r3, #7
 800522e:	f103 0208 	add.w	r2, r3, #8
 8005232:	f8c8 2000 	str.w	r2, [r8]
 8005236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800523e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005242:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005246:	9307      	str	r3, [sp, #28]
 8005248:	f8cd 8018 	str.w	r8, [sp, #24]
 800524c:	ee08 0a10 	vmov	s16, r0
 8005250:	4b9f      	ldr	r3, [pc, #636]	; (80054d0 <_printf_float+0x2dc>)
 8005252:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005256:	f04f 32ff 	mov.w	r2, #4294967295
 800525a:	f7fb fc6f 	bl	8000b3c <__aeabi_dcmpun>
 800525e:	bb88      	cbnz	r0, 80052c4 <_printf_float+0xd0>
 8005260:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005264:	4b9a      	ldr	r3, [pc, #616]	; (80054d0 <_printf_float+0x2dc>)
 8005266:	f04f 32ff 	mov.w	r2, #4294967295
 800526a:	f7fb fc49 	bl	8000b00 <__aeabi_dcmple>
 800526e:	bb48      	cbnz	r0, 80052c4 <_printf_float+0xd0>
 8005270:	2200      	movs	r2, #0
 8005272:	2300      	movs	r3, #0
 8005274:	4640      	mov	r0, r8
 8005276:	4649      	mov	r1, r9
 8005278:	f7fb fc38 	bl	8000aec <__aeabi_dcmplt>
 800527c:	b110      	cbz	r0, 8005284 <_printf_float+0x90>
 800527e:	232d      	movs	r3, #45	; 0x2d
 8005280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005284:	4b93      	ldr	r3, [pc, #588]	; (80054d4 <_printf_float+0x2e0>)
 8005286:	4894      	ldr	r0, [pc, #592]	; (80054d8 <_printf_float+0x2e4>)
 8005288:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800528c:	bf94      	ite	ls
 800528e:	4698      	movls	r8, r3
 8005290:	4680      	movhi	r8, r0
 8005292:	2303      	movs	r3, #3
 8005294:	6123      	str	r3, [r4, #16]
 8005296:	9b05      	ldr	r3, [sp, #20]
 8005298:	f023 0204 	bic.w	r2, r3, #4
 800529c:	6022      	str	r2, [r4, #0]
 800529e:	f04f 0900 	mov.w	r9, #0
 80052a2:	9700      	str	r7, [sp, #0]
 80052a4:	4633      	mov	r3, r6
 80052a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80052a8:	4621      	mov	r1, r4
 80052aa:	4628      	mov	r0, r5
 80052ac:	f000 f9d8 	bl	8005660 <_printf_common>
 80052b0:	3001      	adds	r0, #1
 80052b2:	f040 8090 	bne.w	80053d6 <_printf_float+0x1e2>
 80052b6:	f04f 30ff 	mov.w	r0, #4294967295
 80052ba:	b00d      	add	sp, #52	; 0x34
 80052bc:	ecbd 8b02 	vpop	{d8}
 80052c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052c4:	4642      	mov	r2, r8
 80052c6:	464b      	mov	r3, r9
 80052c8:	4640      	mov	r0, r8
 80052ca:	4649      	mov	r1, r9
 80052cc:	f7fb fc36 	bl	8000b3c <__aeabi_dcmpun>
 80052d0:	b140      	cbz	r0, 80052e4 <_printf_float+0xf0>
 80052d2:	464b      	mov	r3, r9
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	bfbc      	itt	lt
 80052d8:	232d      	movlt	r3, #45	; 0x2d
 80052da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80052de:	487f      	ldr	r0, [pc, #508]	; (80054dc <_printf_float+0x2e8>)
 80052e0:	4b7f      	ldr	r3, [pc, #508]	; (80054e0 <_printf_float+0x2ec>)
 80052e2:	e7d1      	b.n	8005288 <_printf_float+0x94>
 80052e4:	6863      	ldr	r3, [r4, #4]
 80052e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80052ea:	9206      	str	r2, [sp, #24]
 80052ec:	1c5a      	adds	r2, r3, #1
 80052ee:	d13f      	bne.n	8005370 <_printf_float+0x17c>
 80052f0:	2306      	movs	r3, #6
 80052f2:	6063      	str	r3, [r4, #4]
 80052f4:	9b05      	ldr	r3, [sp, #20]
 80052f6:	6861      	ldr	r1, [r4, #4]
 80052f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80052fc:	2300      	movs	r3, #0
 80052fe:	9303      	str	r3, [sp, #12]
 8005300:	ab0a      	add	r3, sp, #40	; 0x28
 8005302:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005306:	ab09      	add	r3, sp, #36	; 0x24
 8005308:	ec49 8b10 	vmov	d0, r8, r9
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	6022      	str	r2, [r4, #0]
 8005310:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005314:	4628      	mov	r0, r5
 8005316:	f7ff fecd 	bl	80050b4 <__cvt>
 800531a:	9b06      	ldr	r3, [sp, #24]
 800531c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800531e:	2b47      	cmp	r3, #71	; 0x47
 8005320:	4680      	mov	r8, r0
 8005322:	d108      	bne.n	8005336 <_printf_float+0x142>
 8005324:	1cc8      	adds	r0, r1, #3
 8005326:	db02      	blt.n	800532e <_printf_float+0x13a>
 8005328:	6863      	ldr	r3, [r4, #4]
 800532a:	4299      	cmp	r1, r3
 800532c:	dd41      	ble.n	80053b2 <_printf_float+0x1be>
 800532e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005332:	fa5f fb8b 	uxtb.w	fp, fp
 8005336:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800533a:	d820      	bhi.n	800537e <_printf_float+0x18a>
 800533c:	3901      	subs	r1, #1
 800533e:	465a      	mov	r2, fp
 8005340:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005344:	9109      	str	r1, [sp, #36]	; 0x24
 8005346:	f7ff ff17 	bl	8005178 <__exponent>
 800534a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800534c:	1813      	adds	r3, r2, r0
 800534e:	2a01      	cmp	r2, #1
 8005350:	4681      	mov	r9, r0
 8005352:	6123      	str	r3, [r4, #16]
 8005354:	dc02      	bgt.n	800535c <_printf_float+0x168>
 8005356:	6822      	ldr	r2, [r4, #0]
 8005358:	07d2      	lsls	r2, r2, #31
 800535a:	d501      	bpl.n	8005360 <_printf_float+0x16c>
 800535c:	3301      	adds	r3, #1
 800535e:	6123      	str	r3, [r4, #16]
 8005360:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005364:	2b00      	cmp	r3, #0
 8005366:	d09c      	beq.n	80052a2 <_printf_float+0xae>
 8005368:	232d      	movs	r3, #45	; 0x2d
 800536a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800536e:	e798      	b.n	80052a2 <_printf_float+0xae>
 8005370:	9a06      	ldr	r2, [sp, #24]
 8005372:	2a47      	cmp	r2, #71	; 0x47
 8005374:	d1be      	bne.n	80052f4 <_printf_float+0x100>
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1bc      	bne.n	80052f4 <_printf_float+0x100>
 800537a:	2301      	movs	r3, #1
 800537c:	e7b9      	b.n	80052f2 <_printf_float+0xfe>
 800537e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005382:	d118      	bne.n	80053b6 <_printf_float+0x1c2>
 8005384:	2900      	cmp	r1, #0
 8005386:	6863      	ldr	r3, [r4, #4]
 8005388:	dd0b      	ble.n	80053a2 <_printf_float+0x1ae>
 800538a:	6121      	str	r1, [r4, #16]
 800538c:	b913      	cbnz	r3, 8005394 <_printf_float+0x1a0>
 800538e:	6822      	ldr	r2, [r4, #0]
 8005390:	07d0      	lsls	r0, r2, #31
 8005392:	d502      	bpl.n	800539a <_printf_float+0x1a6>
 8005394:	3301      	adds	r3, #1
 8005396:	440b      	add	r3, r1
 8005398:	6123      	str	r3, [r4, #16]
 800539a:	65a1      	str	r1, [r4, #88]	; 0x58
 800539c:	f04f 0900 	mov.w	r9, #0
 80053a0:	e7de      	b.n	8005360 <_printf_float+0x16c>
 80053a2:	b913      	cbnz	r3, 80053aa <_printf_float+0x1b6>
 80053a4:	6822      	ldr	r2, [r4, #0]
 80053a6:	07d2      	lsls	r2, r2, #31
 80053a8:	d501      	bpl.n	80053ae <_printf_float+0x1ba>
 80053aa:	3302      	adds	r3, #2
 80053ac:	e7f4      	b.n	8005398 <_printf_float+0x1a4>
 80053ae:	2301      	movs	r3, #1
 80053b0:	e7f2      	b.n	8005398 <_printf_float+0x1a4>
 80053b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80053b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053b8:	4299      	cmp	r1, r3
 80053ba:	db05      	blt.n	80053c8 <_printf_float+0x1d4>
 80053bc:	6823      	ldr	r3, [r4, #0]
 80053be:	6121      	str	r1, [r4, #16]
 80053c0:	07d8      	lsls	r0, r3, #31
 80053c2:	d5ea      	bpl.n	800539a <_printf_float+0x1a6>
 80053c4:	1c4b      	adds	r3, r1, #1
 80053c6:	e7e7      	b.n	8005398 <_printf_float+0x1a4>
 80053c8:	2900      	cmp	r1, #0
 80053ca:	bfd4      	ite	le
 80053cc:	f1c1 0202 	rsble	r2, r1, #2
 80053d0:	2201      	movgt	r2, #1
 80053d2:	4413      	add	r3, r2
 80053d4:	e7e0      	b.n	8005398 <_printf_float+0x1a4>
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	055a      	lsls	r2, r3, #21
 80053da:	d407      	bmi.n	80053ec <_printf_float+0x1f8>
 80053dc:	6923      	ldr	r3, [r4, #16]
 80053de:	4642      	mov	r2, r8
 80053e0:	4631      	mov	r1, r6
 80053e2:	4628      	mov	r0, r5
 80053e4:	47b8      	blx	r7
 80053e6:	3001      	adds	r0, #1
 80053e8:	d12c      	bne.n	8005444 <_printf_float+0x250>
 80053ea:	e764      	b.n	80052b6 <_printf_float+0xc2>
 80053ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80053f0:	f240 80e0 	bls.w	80055b4 <_printf_float+0x3c0>
 80053f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053f8:	2200      	movs	r2, #0
 80053fa:	2300      	movs	r3, #0
 80053fc:	f7fb fb6c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005400:	2800      	cmp	r0, #0
 8005402:	d034      	beq.n	800546e <_printf_float+0x27a>
 8005404:	4a37      	ldr	r2, [pc, #220]	; (80054e4 <_printf_float+0x2f0>)
 8005406:	2301      	movs	r3, #1
 8005408:	4631      	mov	r1, r6
 800540a:	4628      	mov	r0, r5
 800540c:	47b8      	blx	r7
 800540e:	3001      	adds	r0, #1
 8005410:	f43f af51 	beq.w	80052b6 <_printf_float+0xc2>
 8005414:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005418:	429a      	cmp	r2, r3
 800541a:	db02      	blt.n	8005422 <_printf_float+0x22e>
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	07d8      	lsls	r0, r3, #31
 8005420:	d510      	bpl.n	8005444 <_printf_float+0x250>
 8005422:	ee18 3a10 	vmov	r3, s16
 8005426:	4652      	mov	r2, sl
 8005428:	4631      	mov	r1, r6
 800542a:	4628      	mov	r0, r5
 800542c:	47b8      	blx	r7
 800542e:	3001      	adds	r0, #1
 8005430:	f43f af41 	beq.w	80052b6 <_printf_float+0xc2>
 8005434:	f04f 0800 	mov.w	r8, #0
 8005438:	f104 091a 	add.w	r9, r4, #26
 800543c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800543e:	3b01      	subs	r3, #1
 8005440:	4543      	cmp	r3, r8
 8005442:	dc09      	bgt.n	8005458 <_printf_float+0x264>
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	079b      	lsls	r3, r3, #30
 8005448:	f100 8105 	bmi.w	8005656 <_printf_float+0x462>
 800544c:	68e0      	ldr	r0, [r4, #12]
 800544e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005450:	4298      	cmp	r0, r3
 8005452:	bfb8      	it	lt
 8005454:	4618      	movlt	r0, r3
 8005456:	e730      	b.n	80052ba <_printf_float+0xc6>
 8005458:	2301      	movs	r3, #1
 800545a:	464a      	mov	r2, r9
 800545c:	4631      	mov	r1, r6
 800545e:	4628      	mov	r0, r5
 8005460:	47b8      	blx	r7
 8005462:	3001      	adds	r0, #1
 8005464:	f43f af27 	beq.w	80052b6 <_printf_float+0xc2>
 8005468:	f108 0801 	add.w	r8, r8, #1
 800546c:	e7e6      	b.n	800543c <_printf_float+0x248>
 800546e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005470:	2b00      	cmp	r3, #0
 8005472:	dc39      	bgt.n	80054e8 <_printf_float+0x2f4>
 8005474:	4a1b      	ldr	r2, [pc, #108]	; (80054e4 <_printf_float+0x2f0>)
 8005476:	2301      	movs	r3, #1
 8005478:	4631      	mov	r1, r6
 800547a:	4628      	mov	r0, r5
 800547c:	47b8      	blx	r7
 800547e:	3001      	adds	r0, #1
 8005480:	f43f af19 	beq.w	80052b6 <_printf_float+0xc2>
 8005484:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005488:	4313      	orrs	r3, r2
 800548a:	d102      	bne.n	8005492 <_printf_float+0x29e>
 800548c:	6823      	ldr	r3, [r4, #0]
 800548e:	07d9      	lsls	r1, r3, #31
 8005490:	d5d8      	bpl.n	8005444 <_printf_float+0x250>
 8005492:	ee18 3a10 	vmov	r3, s16
 8005496:	4652      	mov	r2, sl
 8005498:	4631      	mov	r1, r6
 800549a:	4628      	mov	r0, r5
 800549c:	47b8      	blx	r7
 800549e:	3001      	adds	r0, #1
 80054a0:	f43f af09 	beq.w	80052b6 <_printf_float+0xc2>
 80054a4:	f04f 0900 	mov.w	r9, #0
 80054a8:	f104 0a1a 	add.w	sl, r4, #26
 80054ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ae:	425b      	negs	r3, r3
 80054b0:	454b      	cmp	r3, r9
 80054b2:	dc01      	bgt.n	80054b8 <_printf_float+0x2c4>
 80054b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054b6:	e792      	b.n	80053de <_printf_float+0x1ea>
 80054b8:	2301      	movs	r3, #1
 80054ba:	4652      	mov	r2, sl
 80054bc:	4631      	mov	r1, r6
 80054be:	4628      	mov	r0, r5
 80054c0:	47b8      	blx	r7
 80054c2:	3001      	adds	r0, #1
 80054c4:	f43f aef7 	beq.w	80052b6 <_printf_float+0xc2>
 80054c8:	f109 0901 	add.w	r9, r9, #1
 80054cc:	e7ee      	b.n	80054ac <_printf_float+0x2b8>
 80054ce:	bf00      	nop
 80054d0:	7fefffff 	.word	0x7fefffff
 80054d4:	08007d89 	.word	0x08007d89
 80054d8:	08007d8d 	.word	0x08007d8d
 80054dc:	08007d95 	.word	0x08007d95
 80054e0:	08007d91 	.word	0x08007d91
 80054e4:	08007d99 	.word	0x08007d99
 80054e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054ec:	429a      	cmp	r2, r3
 80054ee:	bfa8      	it	ge
 80054f0:	461a      	movge	r2, r3
 80054f2:	2a00      	cmp	r2, #0
 80054f4:	4691      	mov	r9, r2
 80054f6:	dc37      	bgt.n	8005568 <_printf_float+0x374>
 80054f8:	f04f 0b00 	mov.w	fp, #0
 80054fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005500:	f104 021a 	add.w	r2, r4, #26
 8005504:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005506:	9305      	str	r3, [sp, #20]
 8005508:	eba3 0309 	sub.w	r3, r3, r9
 800550c:	455b      	cmp	r3, fp
 800550e:	dc33      	bgt.n	8005578 <_printf_float+0x384>
 8005510:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005514:	429a      	cmp	r2, r3
 8005516:	db3b      	blt.n	8005590 <_printf_float+0x39c>
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	07da      	lsls	r2, r3, #31
 800551c:	d438      	bmi.n	8005590 <_printf_float+0x39c>
 800551e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005520:	9b05      	ldr	r3, [sp, #20]
 8005522:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	eba2 0901 	sub.w	r9, r2, r1
 800552a:	4599      	cmp	r9, r3
 800552c:	bfa8      	it	ge
 800552e:	4699      	movge	r9, r3
 8005530:	f1b9 0f00 	cmp.w	r9, #0
 8005534:	dc35      	bgt.n	80055a2 <_printf_float+0x3ae>
 8005536:	f04f 0800 	mov.w	r8, #0
 800553a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800553e:	f104 0a1a 	add.w	sl, r4, #26
 8005542:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005546:	1a9b      	subs	r3, r3, r2
 8005548:	eba3 0309 	sub.w	r3, r3, r9
 800554c:	4543      	cmp	r3, r8
 800554e:	f77f af79 	ble.w	8005444 <_printf_float+0x250>
 8005552:	2301      	movs	r3, #1
 8005554:	4652      	mov	r2, sl
 8005556:	4631      	mov	r1, r6
 8005558:	4628      	mov	r0, r5
 800555a:	47b8      	blx	r7
 800555c:	3001      	adds	r0, #1
 800555e:	f43f aeaa 	beq.w	80052b6 <_printf_float+0xc2>
 8005562:	f108 0801 	add.w	r8, r8, #1
 8005566:	e7ec      	b.n	8005542 <_printf_float+0x34e>
 8005568:	4613      	mov	r3, r2
 800556a:	4631      	mov	r1, r6
 800556c:	4642      	mov	r2, r8
 800556e:	4628      	mov	r0, r5
 8005570:	47b8      	blx	r7
 8005572:	3001      	adds	r0, #1
 8005574:	d1c0      	bne.n	80054f8 <_printf_float+0x304>
 8005576:	e69e      	b.n	80052b6 <_printf_float+0xc2>
 8005578:	2301      	movs	r3, #1
 800557a:	4631      	mov	r1, r6
 800557c:	4628      	mov	r0, r5
 800557e:	9205      	str	r2, [sp, #20]
 8005580:	47b8      	blx	r7
 8005582:	3001      	adds	r0, #1
 8005584:	f43f ae97 	beq.w	80052b6 <_printf_float+0xc2>
 8005588:	9a05      	ldr	r2, [sp, #20]
 800558a:	f10b 0b01 	add.w	fp, fp, #1
 800558e:	e7b9      	b.n	8005504 <_printf_float+0x310>
 8005590:	ee18 3a10 	vmov	r3, s16
 8005594:	4652      	mov	r2, sl
 8005596:	4631      	mov	r1, r6
 8005598:	4628      	mov	r0, r5
 800559a:	47b8      	blx	r7
 800559c:	3001      	adds	r0, #1
 800559e:	d1be      	bne.n	800551e <_printf_float+0x32a>
 80055a0:	e689      	b.n	80052b6 <_printf_float+0xc2>
 80055a2:	9a05      	ldr	r2, [sp, #20]
 80055a4:	464b      	mov	r3, r9
 80055a6:	4442      	add	r2, r8
 80055a8:	4631      	mov	r1, r6
 80055aa:	4628      	mov	r0, r5
 80055ac:	47b8      	blx	r7
 80055ae:	3001      	adds	r0, #1
 80055b0:	d1c1      	bne.n	8005536 <_printf_float+0x342>
 80055b2:	e680      	b.n	80052b6 <_printf_float+0xc2>
 80055b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055b6:	2a01      	cmp	r2, #1
 80055b8:	dc01      	bgt.n	80055be <_printf_float+0x3ca>
 80055ba:	07db      	lsls	r3, r3, #31
 80055bc:	d538      	bpl.n	8005630 <_printf_float+0x43c>
 80055be:	2301      	movs	r3, #1
 80055c0:	4642      	mov	r2, r8
 80055c2:	4631      	mov	r1, r6
 80055c4:	4628      	mov	r0, r5
 80055c6:	47b8      	blx	r7
 80055c8:	3001      	adds	r0, #1
 80055ca:	f43f ae74 	beq.w	80052b6 <_printf_float+0xc2>
 80055ce:	ee18 3a10 	vmov	r3, s16
 80055d2:	4652      	mov	r2, sl
 80055d4:	4631      	mov	r1, r6
 80055d6:	4628      	mov	r0, r5
 80055d8:	47b8      	blx	r7
 80055da:	3001      	adds	r0, #1
 80055dc:	f43f ae6b 	beq.w	80052b6 <_printf_float+0xc2>
 80055e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055e4:	2200      	movs	r2, #0
 80055e6:	2300      	movs	r3, #0
 80055e8:	f7fb fa76 	bl	8000ad8 <__aeabi_dcmpeq>
 80055ec:	b9d8      	cbnz	r0, 8005626 <_printf_float+0x432>
 80055ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055f0:	f108 0201 	add.w	r2, r8, #1
 80055f4:	3b01      	subs	r3, #1
 80055f6:	4631      	mov	r1, r6
 80055f8:	4628      	mov	r0, r5
 80055fa:	47b8      	blx	r7
 80055fc:	3001      	adds	r0, #1
 80055fe:	d10e      	bne.n	800561e <_printf_float+0x42a>
 8005600:	e659      	b.n	80052b6 <_printf_float+0xc2>
 8005602:	2301      	movs	r3, #1
 8005604:	4652      	mov	r2, sl
 8005606:	4631      	mov	r1, r6
 8005608:	4628      	mov	r0, r5
 800560a:	47b8      	blx	r7
 800560c:	3001      	adds	r0, #1
 800560e:	f43f ae52 	beq.w	80052b6 <_printf_float+0xc2>
 8005612:	f108 0801 	add.w	r8, r8, #1
 8005616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005618:	3b01      	subs	r3, #1
 800561a:	4543      	cmp	r3, r8
 800561c:	dcf1      	bgt.n	8005602 <_printf_float+0x40e>
 800561e:	464b      	mov	r3, r9
 8005620:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005624:	e6dc      	b.n	80053e0 <_printf_float+0x1ec>
 8005626:	f04f 0800 	mov.w	r8, #0
 800562a:	f104 0a1a 	add.w	sl, r4, #26
 800562e:	e7f2      	b.n	8005616 <_printf_float+0x422>
 8005630:	2301      	movs	r3, #1
 8005632:	4642      	mov	r2, r8
 8005634:	e7df      	b.n	80055f6 <_printf_float+0x402>
 8005636:	2301      	movs	r3, #1
 8005638:	464a      	mov	r2, r9
 800563a:	4631      	mov	r1, r6
 800563c:	4628      	mov	r0, r5
 800563e:	47b8      	blx	r7
 8005640:	3001      	adds	r0, #1
 8005642:	f43f ae38 	beq.w	80052b6 <_printf_float+0xc2>
 8005646:	f108 0801 	add.w	r8, r8, #1
 800564a:	68e3      	ldr	r3, [r4, #12]
 800564c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800564e:	1a5b      	subs	r3, r3, r1
 8005650:	4543      	cmp	r3, r8
 8005652:	dcf0      	bgt.n	8005636 <_printf_float+0x442>
 8005654:	e6fa      	b.n	800544c <_printf_float+0x258>
 8005656:	f04f 0800 	mov.w	r8, #0
 800565a:	f104 0919 	add.w	r9, r4, #25
 800565e:	e7f4      	b.n	800564a <_printf_float+0x456>

08005660 <_printf_common>:
 8005660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005664:	4616      	mov	r6, r2
 8005666:	4699      	mov	r9, r3
 8005668:	688a      	ldr	r2, [r1, #8]
 800566a:	690b      	ldr	r3, [r1, #16]
 800566c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005670:	4293      	cmp	r3, r2
 8005672:	bfb8      	it	lt
 8005674:	4613      	movlt	r3, r2
 8005676:	6033      	str	r3, [r6, #0]
 8005678:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800567c:	4607      	mov	r7, r0
 800567e:	460c      	mov	r4, r1
 8005680:	b10a      	cbz	r2, 8005686 <_printf_common+0x26>
 8005682:	3301      	adds	r3, #1
 8005684:	6033      	str	r3, [r6, #0]
 8005686:	6823      	ldr	r3, [r4, #0]
 8005688:	0699      	lsls	r1, r3, #26
 800568a:	bf42      	ittt	mi
 800568c:	6833      	ldrmi	r3, [r6, #0]
 800568e:	3302      	addmi	r3, #2
 8005690:	6033      	strmi	r3, [r6, #0]
 8005692:	6825      	ldr	r5, [r4, #0]
 8005694:	f015 0506 	ands.w	r5, r5, #6
 8005698:	d106      	bne.n	80056a8 <_printf_common+0x48>
 800569a:	f104 0a19 	add.w	sl, r4, #25
 800569e:	68e3      	ldr	r3, [r4, #12]
 80056a0:	6832      	ldr	r2, [r6, #0]
 80056a2:	1a9b      	subs	r3, r3, r2
 80056a4:	42ab      	cmp	r3, r5
 80056a6:	dc26      	bgt.n	80056f6 <_printf_common+0x96>
 80056a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056ac:	1e13      	subs	r3, r2, #0
 80056ae:	6822      	ldr	r2, [r4, #0]
 80056b0:	bf18      	it	ne
 80056b2:	2301      	movne	r3, #1
 80056b4:	0692      	lsls	r2, r2, #26
 80056b6:	d42b      	bmi.n	8005710 <_printf_common+0xb0>
 80056b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056bc:	4649      	mov	r1, r9
 80056be:	4638      	mov	r0, r7
 80056c0:	47c0      	blx	r8
 80056c2:	3001      	adds	r0, #1
 80056c4:	d01e      	beq.n	8005704 <_printf_common+0xa4>
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	68e5      	ldr	r5, [r4, #12]
 80056ca:	6832      	ldr	r2, [r6, #0]
 80056cc:	f003 0306 	and.w	r3, r3, #6
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	bf08      	it	eq
 80056d4:	1aad      	subeq	r5, r5, r2
 80056d6:	68a3      	ldr	r3, [r4, #8]
 80056d8:	6922      	ldr	r2, [r4, #16]
 80056da:	bf0c      	ite	eq
 80056dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056e0:	2500      	movne	r5, #0
 80056e2:	4293      	cmp	r3, r2
 80056e4:	bfc4      	itt	gt
 80056e6:	1a9b      	subgt	r3, r3, r2
 80056e8:	18ed      	addgt	r5, r5, r3
 80056ea:	2600      	movs	r6, #0
 80056ec:	341a      	adds	r4, #26
 80056ee:	42b5      	cmp	r5, r6
 80056f0:	d11a      	bne.n	8005728 <_printf_common+0xc8>
 80056f2:	2000      	movs	r0, #0
 80056f4:	e008      	b.n	8005708 <_printf_common+0xa8>
 80056f6:	2301      	movs	r3, #1
 80056f8:	4652      	mov	r2, sl
 80056fa:	4649      	mov	r1, r9
 80056fc:	4638      	mov	r0, r7
 80056fe:	47c0      	blx	r8
 8005700:	3001      	adds	r0, #1
 8005702:	d103      	bne.n	800570c <_printf_common+0xac>
 8005704:	f04f 30ff 	mov.w	r0, #4294967295
 8005708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800570c:	3501      	adds	r5, #1
 800570e:	e7c6      	b.n	800569e <_printf_common+0x3e>
 8005710:	18e1      	adds	r1, r4, r3
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	2030      	movs	r0, #48	; 0x30
 8005716:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800571a:	4422      	add	r2, r4
 800571c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005720:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005724:	3302      	adds	r3, #2
 8005726:	e7c7      	b.n	80056b8 <_printf_common+0x58>
 8005728:	2301      	movs	r3, #1
 800572a:	4622      	mov	r2, r4
 800572c:	4649      	mov	r1, r9
 800572e:	4638      	mov	r0, r7
 8005730:	47c0      	blx	r8
 8005732:	3001      	adds	r0, #1
 8005734:	d0e6      	beq.n	8005704 <_printf_common+0xa4>
 8005736:	3601      	adds	r6, #1
 8005738:	e7d9      	b.n	80056ee <_printf_common+0x8e>
	...

0800573c <_printf_i>:
 800573c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005740:	460c      	mov	r4, r1
 8005742:	4691      	mov	r9, r2
 8005744:	7e27      	ldrb	r7, [r4, #24]
 8005746:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005748:	2f78      	cmp	r7, #120	; 0x78
 800574a:	4680      	mov	r8, r0
 800574c:	469a      	mov	sl, r3
 800574e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005752:	d807      	bhi.n	8005764 <_printf_i+0x28>
 8005754:	2f62      	cmp	r7, #98	; 0x62
 8005756:	d80a      	bhi.n	800576e <_printf_i+0x32>
 8005758:	2f00      	cmp	r7, #0
 800575a:	f000 80d8 	beq.w	800590e <_printf_i+0x1d2>
 800575e:	2f58      	cmp	r7, #88	; 0x58
 8005760:	f000 80a3 	beq.w	80058aa <_printf_i+0x16e>
 8005764:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005768:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800576c:	e03a      	b.n	80057e4 <_printf_i+0xa8>
 800576e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005772:	2b15      	cmp	r3, #21
 8005774:	d8f6      	bhi.n	8005764 <_printf_i+0x28>
 8005776:	a001      	add	r0, pc, #4	; (adr r0, 800577c <_printf_i+0x40>)
 8005778:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800577c:	080057d5 	.word	0x080057d5
 8005780:	080057e9 	.word	0x080057e9
 8005784:	08005765 	.word	0x08005765
 8005788:	08005765 	.word	0x08005765
 800578c:	08005765 	.word	0x08005765
 8005790:	08005765 	.word	0x08005765
 8005794:	080057e9 	.word	0x080057e9
 8005798:	08005765 	.word	0x08005765
 800579c:	08005765 	.word	0x08005765
 80057a0:	08005765 	.word	0x08005765
 80057a4:	08005765 	.word	0x08005765
 80057a8:	080058f5 	.word	0x080058f5
 80057ac:	08005819 	.word	0x08005819
 80057b0:	080058d7 	.word	0x080058d7
 80057b4:	08005765 	.word	0x08005765
 80057b8:	08005765 	.word	0x08005765
 80057bc:	08005917 	.word	0x08005917
 80057c0:	08005765 	.word	0x08005765
 80057c4:	08005819 	.word	0x08005819
 80057c8:	08005765 	.word	0x08005765
 80057cc:	08005765 	.word	0x08005765
 80057d0:	080058df 	.word	0x080058df
 80057d4:	680b      	ldr	r3, [r1, #0]
 80057d6:	1d1a      	adds	r2, r3, #4
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	600a      	str	r2, [r1, #0]
 80057dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80057e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057e4:	2301      	movs	r3, #1
 80057e6:	e0a3      	b.n	8005930 <_printf_i+0x1f4>
 80057e8:	6825      	ldr	r5, [r4, #0]
 80057ea:	6808      	ldr	r0, [r1, #0]
 80057ec:	062e      	lsls	r6, r5, #24
 80057ee:	f100 0304 	add.w	r3, r0, #4
 80057f2:	d50a      	bpl.n	800580a <_printf_i+0xce>
 80057f4:	6805      	ldr	r5, [r0, #0]
 80057f6:	600b      	str	r3, [r1, #0]
 80057f8:	2d00      	cmp	r5, #0
 80057fa:	da03      	bge.n	8005804 <_printf_i+0xc8>
 80057fc:	232d      	movs	r3, #45	; 0x2d
 80057fe:	426d      	negs	r5, r5
 8005800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005804:	485e      	ldr	r0, [pc, #376]	; (8005980 <_printf_i+0x244>)
 8005806:	230a      	movs	r3, #10
 8005808:	e019      	b.n	800583e <_printf_i+0x102>
 800580a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800580e:	6805      	ldr	r5, [r0, #0]
 8005810:	600b      	str	r3, [r1, #0]
 8005812:	bf18      	it	ne
 8005814:	b22d      	sxthne	r5, r5
 8005816:	e7ef      	b.n	80057f8 <_printf_i+0xbc>
 8005818:	680b      	ldr	r3, [r1, #0]
 800581a:	6825      	ldr	r5, [r4, #0]
 800581c:	1d18      	adds	r0, r3, #4
 800581e:	6008      	str	r0, [r1, #0]
 8005820:	0628      	lsls	r0, r5, #24
 8005822:	d501      	bpl.n	8005828 <_printf_i+0xec>
 8005824:	681d      	ldr	r5, [r3, #0]
 8005826:	e002      	b.n	800582e <_printf_i+0xf2>
 8005828:	0669      	lsls	r1, r5, #25
 800582a:	d5fb      	bpl.n	8005824 <_printf_i+0xe8>
 800582c:	881d      	ldrh	r5, [r3, #0]
 800582e:	4854      	ldr	r0, [pc, #336]	; (8005980 <_printf_i+0x244>)
 8005830:	2f6f      	cmp	r7, #111	; 0x6f
 8005832:	bf0c      	ite	eq
 8005834:	2308      	moveq	r3, #8
 8005836:	230a      	movne	r3, #10
 8005838:	2100      	movs	r1, #0
 800583a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800583e:	6866      	ldr	r6, [r4, #4]
 8005840:	60a6      	str	r6, [r4, #8]
 8005842:	2e00      	cmp	r6, #0
 8005844:	bfa2      	ittt	ge
 8005846:	6821      	ldrge	r1, [r4, #0]
 8005848:	f021 0104 	bicge.w	r1, r1, #4
 800584c:	6021      	strge	r1, [r4, #0]
 800584e:	b90d      	cbnz	r5, 8005854 <_printf_i+0x118>
 8005850:	2e00      	cmp	r6, #0
 8005852:	d04d      	beq.n	80058f0 <_printf_i+0x1b4>
 8005854:	4616      	mov	r6, r2
 8005856:	fbb5 f1f3 	udiv	r1, r5, r3
 800585a:	fb03 5711 	mls	r7, r3, r1, r5
 800585e:	5dc7      	ldrb	r7, [r0, r7]
 8005860:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005864:	462f      	mov	r7, r5
 8005866:	42bb      	cmp	r3, r7
 8005868:	460d      	mov	r5, r1
 800586a:	d9f4      	bls.n	8005856 <_printf_i+0x11a>
 800586c:	2b08      	cmp	r3, #8
 800586e:	d10b      	bne.n	8005888 <_printf_i+0x14c>
 8005870:	6823      	ldr	r3, [r4, #0]
 8005872:	07df      	lsls	r7, r3, #31
 8005874:	d508      	bpl.n	8005888 <_printf_i+0x14c>
 8005876:	6923      	ldr	r3, [r4, #16]
 8005878:	6861      	ldr	r1, [r4, #4]
 800587a:	4299      	cmp	r1, r3
 800587c:	bfde      	ittt	le
 800587e:	2330      	movle	r3, #48	; 0x30
 8005880:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005884:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005888:	1b92      	subs	r2, r2, r6
 800588a:	6122      	str	r2, [r4, #16]
 800588c:	f8cd a000 	str.w	sl, [sp]
 8005890:	464b      	mov	r3, r9
 8005892:	aa03      	add	r2, sp, #12
 8005894:	4621      	mov	r1, r4
 8005896:	4640      	mov	r0, r8
 8005898:	f7ff fee2 	bl	8005660 <_printf_common>
 800589c:	3001      	adds	r0, #1
 800589e:	d14c      	bne.n	800593a <_printf_i+0x1fe>
 80058a0:	f04f 30ff 	mov.w	r0, #4294967295
 80058a4:	b004      	add	sp, #16
 80058a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058aa:	4835      	ldr	r0, [pc, #212]	; (8005980 <_printf_i+0x244>)
 80058ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80058b0:	6823      	ldr	r3, [r4, #0]
 80058b2:	680e      	ldr	r6, [r1, #0]
 80058b4:	061f      	lsls	r7, r3, #24
 80058b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80058ba:	600e      	str	r6, [r1, #0]
 80058bc:	d514      	bpl.n	80058e8 <_printf_i+0x1ac>
 80058be:	07d9      	lsls	r1, r3, #31
 80058c0:	bf44      	itt	mi
 80058c2:	f043 0320 	orrmi.w	r3, r3, #32
 80058c6:	6023      	strmi	r3, [r4, #0]
 80058c8:	b91d      	cbnz	r5, 80058d2 <_printf_i+0x196>
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	f023 0320 	bic.w	r3, r3, #32
 80058d0:	6023      	str	r3, [r4, #0]
 80058d2:	2310      	movs	r3, #16
 80058d4:	e7b0      	b.n	8005838 <_printf_i+0xfc>
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	f043 0320 	orr.w	r3, r3, #32
 80058dc:	6023      	str	r3, [r4, #0]
 80058de:	2378      	movs	r3, #120	; 0x78
 80058e0:	4828      	ldr	r0, [pc, #160]	; (8005984 <_printf_i+0x248>)
 80058e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058e6:	e7e3      	b.n	80058b0 <_printf_i+0x174>
 80058e8:	065e      	lsls	r6, r3, #25
 80058ea:	bf48      	it	mi
 80058ec:	b2ad      	uxthmi	r5, r5
 80058ee:	e7e6      	b.n	80058be <_printf_i+0x182>
 80058f0:	4616      	mov	r6, r2
 80058f2:	e7bb      	b.n	800586c <_printf_i+0x130>
 80058f4:	680b      	ldr	r3, [r1, #0]
 80058f6:	6826      	ldr	r6, [r4, #0]
 80058f8:	6960      	ldr	r0, [r4, #20]
 80058fa:	1d1d      	adds	r5, r3, #4
 80058fc:	600d      	str	r5, [r1, #0]
 80058fe:	0635      	lsls	r5, r6, #24
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	d501      	bpl.n	8005908 <_printf_i+0x1cc>
 8005904:	6018      	str	r0, [r3, #0]
 8005906:	e002      	b.n	800590e <_printf_i+0x1d2>
 8005908:	0671      	lsls	r1, r6, #25
 800590a:	d5fb      	bpl.n	8005904 <_printf_i+0x1c8>
 800590c:	8018      	strh	r0, [r3, #0]
 800590e:	2300      	movs	r3, #0
 8005910:	6123      	str	r3, [r4, #16]
 8005912:	4616      	mov	r6, r2
 8005914:	e7ba      	b.n	800588c <_printf_i+0x150>
 8005916:	680b      	ldr	r3, [r1, #0]
 8005918:	1d1a      	adds	r2, r3, #4
 800591a:	600a      	str	r2, [r1, #0]
 800591c:	681e      	ldr	r6, [r3, #0]
 800591e:	6862      	ldr	r2, [r4, #4]
 8005920:	2100      	movs	r1, #0
 8005922:	4630      	mov	r0, r6
 8005924:	f7fa fc64 	bl	80001f0 <memchr>
 8005928:	b108      	cbz	r0, 800592e <_printf_i+0x1f2>
 800592a:	1b80      	subs	r0, r0, r6
 800592c:	6060      	str	r0, [r4, #4]
 800592e:	6863      	ldr	r3, [r4, #4]
 8005930:	6123      	str	r3, [r4, #16]
 8005932:	2300      	movs	r3, #0
 8005934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005938:	e7a8      	b.n	800588c <_printf_i+0x150>
 800593a:	6923      	ldr	r3, [r4, #16]
 800593c:	4632      	mov	r2, r6
 800593e:	4649      	mov	r1, r9
 8005940:	4640      	mov	r0, r8
 8005942:	47d0      	blx	sl
 8005944:	3001      	adds	r0, #1
 8005946:	d0ab      	beq.n	80058a0 <_printf_i+0x164>
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	079b      	lsls	r3, r3, #30
 800594c:	d413      	bmi.n	8005976 <_printf_i+0x23a>
 800594e:	68e0      	ldr	r0, [r4, #12]
 8005950:	9b03      	ldr	r3, [sp, #12]
 8005952:	4298      	cmp	r0, r3
 8005954:	bfb8      	it	lt
 8005956:	4618      	movlt	r0, r3
 8005958:	e7a4      	b.n	80058a4 <_printf_i+0x168>
 800595a:	2301      	movs	r3, #1
 800595c:	4632      	mov	r2, r6
 800595e:	4649      	mov	r1, r9
 8005960:	4640      	mov	r0, r8
 8005962:	47d0      	blx	sl
 8005964:	3001      	adds	r0, #1
 8005966:	d09b      	beq.n	80058a0 <_printf_i+0x164>
 8005968:	3501      	adds	r5, #1
 800596a:	68e3      	ldr	r3, [r4, #12]
 800596c:	9903      	ldr	r1, [sp, #12]
 800596e:	1a5b      	subs	r3, r3, r1
 8005970:	42ab      	cmp	r3, r5
 8005972:	dcf2      	bgt.n	800595a <_printf_i+0x21e>
 8005974:	e7eb      	b.n	800594e <_printf_i+0x212>
 8005976:	2500      	movs	r5, #0
 8005978:	f104 0619 	add.w	r6, r4, #25
 800597c:	e7f5      	b.n	800596a <_printf_i+0x22e>
 800597e:	bf00      	nop
 8005980:	08007d9b 	.word	0x08007d9b
 8005984:	08007dac 	.word	0x08007dac

08005988 <iprintf>:
 8005988:	b40f      	push	{r0, r1, r2, r3}
 800598a:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <iprintf+0x2c>)
 800598c:	b513      	push	{r0, r1, r4, lr}
 800598e:	681c      	ldr	r4, [r3, #0]
 8005990:	b124      	cbz	r4, 800599c <iprintf+0x14>
 8005992:	69a3      	ldr	r3, [r4, #24]
 8005994:	b913      	cbnz	r3, 800599c <iprintf+0x14>
 8005996:	4620      	mov	r0, r4
 8005998:	f001 f8ec 	bl	8006b74 <__sinit>
 800599c:	ab05      	add	r3, sp, #20
 800599e:	9a04      	ldr	r2, [sp, #16]
 80059a0:	68a1      	ldr	r1, [r4, #8]
 80059a2:	9301      	str	r3, [sp, #4]
 80059a4:	4620      	mov	r0, r4
 80059a6:	f7ff fa55 	bl	8004e54 <_vfiprintf_r>
 80059aa:	b002      	add	sp, #8
 80059ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059b0:	b004      	add	sp, #16
 80059b2:	4770      	bx	lr
 80059b4:	20000024 	.word	0x20000024

080059b8 <_puts_r>:
 80059b8:	b570      	push	{r4, r5, r6, lr}
 80059ba:	460e      	mov	r6, r1
 80059bc:	4605      	mov	r5, r0
 80059be:	b118      	cbz	r0, 80059c8 <_puts_r+0x10>
 80059c0:	6983      	ldr	r3, [r0, #24]
 80059c2:	b90b      	cbnz	r3, 80059c8 <_puts_r+0x10>
 80059c4:	f001 f8d6 	bl	8006b74 <__sinit>
 80059c8:	69ab      	ldr	r3, [r5, #24]
 80059ca:	68ac      	ldr	r4, [r5, #8]
 80059cc:	b913      	cbnz	r3, 80059d4 <_puts_r+0x1c>
 80059ce:	4628      	mov	r0, r5
 80059d0:	f001 f8d0 	bl	8006b74 <__sinit>
 80059d4:	4b2c      	ldr	r3, [pc, #176]	; (8005a88 <_puts_r+0xd0>)
 80059d6:	429c      	cmp	r4, r3
 80059d8:	d120      	bne.n	8005a1c <_puts_r+0x64>
 80059da:	686c      	ldr	r4, [r5, #4]
 80059dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059de:	07db      	lsls	r3, r3, #31
 80059e0:	d405      	bmi.n	80059ee <_puts_r+0x36>
 80059e2:	89a3      	ldrh	r3, [r4, #12]
 80059e4:	0598      	lsls	r0, r3, #22
 80059e6:	d402      	bmi.n	80059ee <_puts_r+0x36>
 80059e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059ea:	f001 f966 	bl	8006cba <__retarget_lock_acquire_recursive>
 80059ee:	89a3      	ldrh	r3, [r4, #12]
 80059f0:	0719      	lsls	r1, r3, #28
 80059f2:	d51d      	bpl.n	8005a30 <_puts_r+0x78>
 80059f4:	6923      	ldr	r3, [r4, #16]
 80059f6:	b1db      	cbz	r3, 8005a30 <_puts_r+0x78>
 80059f8:	3e01      	subs	r6, #1
 80059fa:	68a3      	ldr	r3, [r4, #8]
 80059fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a00:	3b01      	subs	r3, #1
 8005a02:	60a3      	str	r3, [r4, #8]
 8005a04:	bb39      	cbnz	r1, 8005a56 <_puts_r+0x9e>
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	da38      	bge.n	8005a7c <_puts_r+0xc4>
 8005a0a:	4622      	mov	r2, r4
 8005a0c:	210a      	movs	r1, #10
 8005a0e:	4628      	mov	r0, r5
 8005a10:	f000 f858 	bl	8005ac4 <__swbuf_r>
 8005a14:	3001      	adds	r0, #1
 8005a16:	d011      	beq.n	8005a3c <_puts_r+0x84>
 8005a18:	250a      	movs	r5, #10
 8005a1a:	e011      	b.n	8005a40 <_puts_r+0x88>
 8005a1c:	4b1b      	ldr	r3, [pc, #108]	; (8005a8c <_puts_r+0xd4>)
 8005a1e:	429c      	cmp	r4, r3
 8005a20:	d101      	bne.n	8005a26 <_puts_r+0x6e>
 8005a22:	68ac      	ldr	r4, [r5, #8]
 8005a24:	e7da      	b.n	80059dc <_puts_r+0x24>
 8005a26:	4b1a      	ldr	r3, [pc, #104]	; (8005a90 <_puts_r+0xd8>)
 8005a28:	429c      	cmp	r4, r3
 8005a2a:	bf08      	it	eq
 8005a2c:	68ec      	ldreq	r4, [r5, #12]
 8005a2e:	e7d5      	b.n	80059dc <_puts_r+0x24>
 8005a30:	4621      	mov	r1, r4
 8005a32:	4628      	mov	r0, r5
 8005a34:	f000 f898 	bl	8005b68 <__swsetup_r>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	d0dd      	beq.n	80059f8 <_puts_r+0x40>
 8005a3c:	f04f 35ff 	mov.w	r5, #4294967295
 8005a40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a42:	07da      	lsls	r2, r3, #31
 8005a44:	d405      	bmi.n	8005a52 <_puts_r+0x9a>
 8005a46:	89a3      	ldrh	r3, [r4, #12]
 8005a48:	059b      	lsls	r3, r3, #22
 8005a4a:	d402      	bmi.n	8005a52 <_puts_r+0x9a>
 8005a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a4e:	f001 f935 	bl	8006cbc <__retarget_lock_release_recursive>
 8005a52:	4628      	mov	r0, r5
 8005a54:	bd70      	pop	{r4, r5, r6, pc}
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	da04      	bge.n	8005a64 <_puts_r+0xac>
 8005a5a:	69a2      	ldr	r2, [r4, #24]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	dc06      	bgt.n	8005a6e <_puts_r+0xb6>
 8005a60:	290a      	cmp	r1, #10
 8005a62:	d004      	beq.n	8005a6e <_puts_r+0xb6>
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	6022      	str	r2, [r4, #0]
 8005a6a:	7019      	strb	r1, [r3, #0]
 8005a6c:	e7c5      	b.n	80059fa <_puts_r+0x42>
 8005a6e:	4622      	mov	r2, r4
 8005a70:	4628      	mov	r0, r5
 8005a72:	f000 f827 	bl	8005ac4 <__swbuf_r>
 8005a76:	3001      	adds	r0, #1
 8005a78:	d1bf      	bne.n	80059fa <_puts_r+0x42>
 8005a7a:	e7df      	b.n	8005a3c <_puts_r+0x84>
 8005a7c:	6823      	ldr	r3, [r4, #0]
 8005a7e:	250a      	movs	r5, #10
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	6022      	str	r2, [r4, #0]
 8005a84:	701d      	strb	r5, [r3, #0]
 8005a86:	e7db      	b.n	8005a40 <_puts_r+0x88>
 8005a88:	08007e74 	.word	0x08007e74
 8005a8c:	08007e94 	.word	0x08007e94
 8005a90:	08007e54 	.word	0x08007e54

08005a94 <puts>:
 8005a94:	4b02      	ldr	r3, [pc, #8]	; (8005aa0 <puts+0xc>)
 8005a96:	4601      	mov	r1, r0
 8005a98:	6818      	ldr	r0, [r3, #0]
 8005a9a:	f7ff bf8d 	b.w	80059b8 <_puts_r>
 8005a9e:	bf00      	nop
 8005aa0:	20000024 	.word	0x20000024

08005aa4 <_sbrk_r>:
 8005aa4:	b538      	push	{r3, r4, r5, lr}
 8005aa6:	4d06      	ldr	r5, [pc, #24]	; (8005ac0 <_sbrk_r+0x1c>)
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	4604      	mov	r4, r0
 8005aac:	4608      	mov	r0, r1
 8005aae:	602b      	str	r3, [r5, #0]
 8005ab0:	f7fd f8e8 	bl	8002c84 <_sbrk>
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	d102      	bne.n	8005abe <_sbrk_r+0x1a>
 8005ab8:	682b      	ldr	r3, [r5, #0]
 8005aba:	b103      	cbz	r3, 8005abe <_sbrk_r+0x1a>
 8005abc:	6023      	str	r3, [r4, #0]
 8005abe:	bd38      	pop	{r3, r4, r5, pc}
 8005ac0:	20000d70 	.word	0x20000d70

08005ac4 <__swbuf_r>:
 8005ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac6:	460e      	mov	r6, r1
 8005ac8:	4614      	mov	r4, r2
 8005aca:	4605      	mov	r5, r0
 8005acc:	b118      	cbz	r0, 8005ad6 <__swbuf_r+0x12>
 8005ace:	6983      	ldr	r3, [r0, #24]
 8005ad0:	b90b      	cbnz	r3, 8005ad6 <__swbuf_r+0x12>
 8005ad2:	f001 f84f 	bl	8006b74 <__sinit>
 8005ad6:	4b21      	ldr	r3, [pc, #132]	; (8005b5c <__swbuf_r+0x98>)
 8005ad8:	429c      	cmp	r4, r3
 8005ada:	d12b      	bne.n	8005b34 <__swbuf_r+0x70>
 8005adc:	686c      	ldr	r4, [r5, #4]
 8005ade:	69a3      	ldr	r3, [r4, #24]
 8005ae0:	60a3      	str	r3, [r4, #8]
 8005ae2:	89a3      	ldrh	r3, [r4, #12]
 8005ae4:	071a      	lsls	r2, r3, #28
 8005ae6:	d52f      	bpl.n	8005b48 <__swbuf_r+0x84>
 8005ae8:	6923      	ldr	r3, [r4, #16]
 8005aea:	b36b      	cbz	r3, 8005b48 <__swbuf_r+0x84>
 8005aec:	6923      	ldr	r3, [r4, #16]
 8005aee:	6820      	ldr	r0, [r4, #0]
 8005af0:	1ac0      	subs	r0, r0, r3
 8005af2:	6963      	ldr	r3, [r4, #20]
 8005af4:	b2f6      	uxtb	r6, r6
 8005af6:	4283      	cmp	r3, r0
 8005af8:	4637      	mov	r7, r6
 8005afa:	dc04      	bgt.n	8005b06 <__swbuf_r+0x42>
 8005afc:	4621      	mov	r1, r4
 8005afe:	4628      	mov	r0, r5
 8005b00:	f000 ffa4 	bl	8006a4c <_fflush_r>
 8005b04:	bb30      	cbnz	r0, 8005b54 <__swbuf_r+0x90>
 8005b06:	68a3      	ldr	r3, [r4, #8]
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	60a3      	str	r3, [r4, #8]
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	6022      	str	r2, [r4, #0]
 8005b12:	701e      	strb	r6, [r3, #0]
 8005b14:	6963      	ldr	r3, [r4, #20]
 8005b16:	3001      	adds	r0, #1
 8005b18:	4283      	cmp	r3, r0
 8005b1a:	d004      	beq.n	8005b26 <__swbuf_r+0x62>
 8005b1c:	89a3      	ldrh	r3, [r4, #12]
 8005b1e:	07db      	lsls	r3, r3, #31
 8005b20:	d506      	bpl.n	8005b30 <__swbuf_r+0x6c>
 8005b22:	2e0a      	cmp	r6, #10
 8005b24:	d104      	bne.n	8005b30 <__swbuf_r+0x6c>
 8005b26:	4621      	mov	r1, r4
 8005b28:	4628      	mov	r0, r5
 8005b2a:	f000 ff8f 	bl	8006a4c <_fflush_r>
 8005b2e:	b988      	cbnz	r0, 8005b54 <__swbuf_r+0x90>
 8005b30:	4638      	mov	r0, r7
 8005b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b34:	4b0a      	ldr	r3, [pc, #40]	; (8005b60 <__swbuf_r+0x9c>)
 8005b36:	429c      	cmp	r4, r3
 8005b38:	d101      	bne.n	8005b3e <__swbuf_r+0x7a>
 8005b3a:	68ac      	ldr	r4, [r5, #8]
 8005b3c:	e7cf      	b.n	8005ade <__swbuf_r+0x1a>
 8005b3e:	4b09      	ldr	r3, [pc, #36]	; (8005b64 <__swbuf_r+0xa0>)
 8005b40:	429c      	cmp	r4, r3
 8005b42:	bf08      	it	eq
 8005b44:	68ec      	ldreq	r4, [r5, #12]
 8005b46:	e7ca      	b.n	8005ade <__swbuf_r+0x1a>
 8005b48:	4621      	mov	r1, r4
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	f000 f80c 	bl	8005b68 <__swsetup_r>
 8005b50:	2800      	cmp	r0, #0
 8005b52:	d0cb      	beq.n	8005aec <__swbuf_r+0x28>
 8005b54:	f04f 37ff 	mov.w	r7, #4294967295
 8005b58:	e7ea      	b.n	8005b30 <__swbuf_r+0x6c>
 8005b5a:	bf00      	nop
 8005b5c:	08007e74 	.word	0x08007e74
 8005b60:	08007e94 	.word	0x08007e94
 8005b64:	08007e54 	.word	0x08007e54

08005b68 <__swsetup_r>:
 8005b68:	4b32      	ldr	r3, [pc, #200]	; (8005c34 <__swsetup_r+0xcc>)
 8005b6a:	b570      	push	{r4, r5, r6, lr}
 8005b6c:	681d      	ldr	r5, [r3, #0]
 8005b6e:	4606      	mov	r6, r0
 8005b70:	460c      	mov	r4, r1
 8005b72:	b125      	cbz	r5, 8005b7e <__swsetup_r+0x16>
 8005b74:	69ab      	ldr	r3, [r5, #24]
 8005b76:	b913      	cbnz	r3, 8005b7e <__swsetup_r+0x16>
 8005b78:	4628      	mov	r0, r5
 8005b7a:	f000 fffb 	bl	8006b74 <__sinit>
 8005b7e:	4b2e      	ldr	r3, [pc, #184]	; (8005c38 <__swsetup_r+0xd0>)
 8005b80:	429c      	cmp	r4, r3
 8005b82:	d10f      	bne.n	8005ba4 <__swsetup_r+0x3c>
 8005b84:	686c      	ldr	r4, [r5, #4]
 8005b86:	89a3      	ldrh	r3, [r4, #12]
 8005b88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b8c:	0719      	lsls	r1, r3, #28
 8005b8e:	d42c      	bmi.n	8005bea <__swsetup_r+0x82>
 8005b90:	06dd      	lsls	r5, r3, #27
 8005b92:	d411      	bmi.n	8005bb8 <__swsetup_r+0x50>
 8005b94:	2309      	movs	r3, #9
 8005b96:	6033      	str	r3, [r6, #0]
 8005b98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b9c:	81a3      	strh	r3, [r4, #12]
 8005b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba2:	e03e      	b.n	8005c22 <__swsetup_r+0xba>
 8005ba4:	4b25      	ldr	r3, [pc, #148]	; (8005c3c <__swsetup_r+0xd4>)
 8005ba6:	429c      	cmp	r4, r3
 8005ba8:	d101      	bne.n	8005bae <__swsetup_r+0x46>
 8005baa:	68ac      	ldr	r4, [r5, #8]
 8005bac:	e7eb      	b.n	8005b86 <__swsetup_r+0x1e>
 8005bae:	4b24      	ldr	r3, [pc, #144]	; (8005c40 <__swsetup_r+0xd8>)
 8005bb0:	429c      	cmp	r4, r3
 8005bb2:	bf08      	it	eq
 8005bb4:	68ec      	ldreq	r4, [r5, #12]
 8005bb6:	e7e6      	b.n	8005b86 <__swsetup_r+0x1e>
 8005bb8:	0758      	lsls	r0, r3, #29
 8005bba:	d512      	bpl.n	8005be2 <__swsetup_r+0x7a>
 8005bbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bbe:	b141      	cbz	r1, 8005bd2 <__swsetup_r+0x6a>
 8005bc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bc4:	4299      	cmp	r1, r3
 8005bc6:	d002      	beq.n	8005bce <__swsetup_r+0x66>
 8005bc8:	4630      	mov	r0, r6
 8005bca:	f7ff f86f 	bl	8004cac <_free_r>
 8005bce:	2300      	movs	r3, #0
 8005bd0:	6363      	str	r3, [r4, #52]	; 0x34
 8005bd2:	89a3      	ldrh	r3, [r4, #12]
 8005bd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005bd8:	81a3      	strh	r3, [r4, #12]
 8005bda:	2300      	movs	r3, #0
 8005bdc:	6063      	str	r3, [r4, #4]
 8005bde:	6923      	ldr	r3, [r4, #16]
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	89a3      	ldrh	r3, [r4, #12]
 8005be4:	f043 0308 	orr.w	r3, r3, #8
 8005be8:	81a3      	strh	r3, [r4, #12]
 8005bea:	6923      	ldr	r3, [r4, #16]
 8005bec:	b94b      	cbnz	r3, 8005c02 <__swsetup_r+0x9a>
 8005bee:	89a3      	ldrh	r3, [r4, #12]
 8005bf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bf8:	d003      	beq.n	8005c02 <__swsetup_r+0x9a>
 8005bfa:	4621      	mov	r1, r4
 8005bfc:	4630      	mov	r0, r6
 8005bfe:	f001 f883 	bl	8006d08 <__smakebuf_r>
 8005c02:	89a0      	ldrh	r0, [r4, #12]
 8005c04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c08:	f010 0301 	ands.w	r3, r0, #1
 8005c0c:	d00a      	beq.n	8005c24 <__swsetup_r+0xbc>
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60a3      	str	r3, [r4, #8]
 8005c12:	6963      	ldr	r3, [r4, #20]
 8005c14:	425b      	negs	r3, r3
 8005c16:	61a3      	str	r3, [r4, #24]
 8005c18:	6923      	ldr	r3, [r4, #16]
 8005c1a:	b943      	cbnz	r3, 8005c2e <__swsetup_r+0xc6>
 8005c1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c20:	d1ba      	bne.n	8005b98 <__swsetup_r+0x30>
 8005c22:	bd70      	pop	{r4, r5, r6, pc}
 8005c24:	0781      	lsls	r1, r0, #30
 8005c26:	bf58      	it	pl
 8005c28:	6963      	ldrpl	r3, [r4, #20]
 8005c2a:	60a3      	str	r3, [r4, #8]
 8005c2c:	e7f4      	b.n	8005c18 <__swsetup_r+0xb0>
 8005c2e:	2000      	movs	r0, #0
 8005c30:	e7f7      	b.n	8005c22 <__swsetup_r+0xba>
 8005c32:	bf00      	nop
 8005c34:	20000024 	.word	0x20000024
 8005c38:	08007e74 	.word	0x08007e74
 8005c3c:	08007e94 	.word	0x08007e94
 8005c40:	08007e54 	.word	0x08007e54

08005c44 <abort>:
 8005c44:	b508      	push	{r3, lr}
 8005c46:	2006      	movs	r0, #6
 8005c48:	f001 fc60 	bl	800750c <raise>
 8005c4c:	2001      	movs	r0, #1
 8005c4e:	f7fc ffbd 	bl	8002bcc <_exit>

08005c52 <quorem>:
 8005c52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c56:	6903      	ldr	r3, [r0, #16]
 8005c58:	690c      	ldr	r4, [r1, #16]
 8005c5a:	42a3      	cmp	r3, r4
 8005c5c:	4607      	mov	r7, r0
 8005c5e:	f2c0 8081 	blt.w	8005d64 <quorem+0x112>
 8005c62:	3c01      	subs	r4, #1
 8005c64:	f101 0814 	add.w	r8, r1, #20
 8005c68:	f100 0514 	add.w	r5, r0, #20
 8005c6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c70:	9301      	str	r3, [sp, #4]
 8005c72:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c82:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c86:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c8a:	d331      	bcc.n	8005cf0 <quorem+0x9e>
 8005c8c:	f04f 0e00 	mov.w	lr, #0
 8005c90:	4640      	mov	r0, r8
 8005c92:	46ac      	mov	ip, r5
 8005c94:	46f2      	mov	sl, lr
 8005c96:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c9a:	b293      	uxth	r3, r2
 8005c9c:	fb06 e303 	mla	r3, r6, r3, lr
 8005ca0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	ebaa 0303 	sub.w	r3, sl, r3
 8005caa:	0c12      	lsrs	r2, r2, #16
 8005cac:	f8dc a000 	ldr.w	sl, [ip]
 8005cb0:	fb06 e202 	mla	r2, r6, r2, lr
 8005cb4:	fa13 f38a 	uxtah	r3, r3, sl
 8005cb8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005cbc:	fa1f fa82 	uxth.w	sl, r2
 8005cc0:	f8dc 2000 	ldr.w	r2, [ip]
 8005cc4:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005cc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cd2:	4581      	cmp	r9, r0
 8005cd4:	f84c 3b04 	str.w	r3, [ip], #4
 8005cd8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005cdc:	d2db      	bcs.n	8005c96 <quorem+0x44>
 8005cde:	f855 300b 	ldr.w	r3, [r5, fp]
 8005ce2:	b92b      	cbnz	r3, 8005cf0 <quorem+0x9e>
 8005ce4:	9b01      	ldr	r3, [sp, #4]
 8005ce6:	3b04      	subs	r3, #4
 8005ce8:	429d      	cmp	r5, r3
 8005cea:	461a      	mov	r2, r3
 8005cec:	d32e      	bcc.n	8005d4c <quorem+0xfa>
 8005cee:	613c      	str	r4, [r7, #16]
 8005cf0:	4638      	mov	r0, r7
 8005cf2:	f001 fad3 	bl	800729c <__mcmp>
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	db24      	blt.n	8005d44 <quorem+0xf2>
 8005cfa:	3601      	adds	r6, #1
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	f04f 0c00 	mov.w	ip, #0
 8005d02:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d06:	f8d0 e000 	ldr.w	lr, [r0]
 8005d0a:	b293      	uxth	r3, r2
 8005d0c:	ebac 0303 	sub.w	r3, ip, r3
 8005d10:	0c12      	lsrs	r2, r2, #16
 8005d12:	fa13 f38e 	uxtah	r3, r3, lr
 8005d16:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d24:	45c1      	cmp	r9, r8
 8005d26:	f840 3b04 	str.w	r3, [r0], #4
 8005d2a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d2e:	d2e8      	bcs.n	8005d02 <quorem+0xb0>
 8005d30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d38:	b922      	cbnz	r2, 8005d44 <quorem+0xf2>
 8005d3a:	3b04      	subs	r3, #4
 8005d3c:	429d      	cmp	r5, r3
 8005d3e:	461a      	mov	r2, r3
 8005d40:	d30a      	bcc.n	8005d58 <quorem+0x106>
 8005d42:	613c      	str	r4, [r7, #16]
 8005d44:	4630      	mov	r0, r6
 8005d46:	b003      	add	sp, #12
 8005d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d4c:	6812      	ldr	r2, [r2, #0]
 8005d4e:	3b04      	subs	r3, #4
 8005d50:	2a00      	cmp	r2, #0
 8005d52:	d1cc      	bne.n	8005cee <quorem+0x9c>
 8005d54:	3c01      	subs	r4, #1
 8005d56:	e7c7      	b.n	8005ce8 <quorem+0x96>
 8005d58:	6812      	ldr	r2, [r2, #0]
 8005d5a:	3b04      	subs	r3, #4
 8005d5c:	2a00      	cmp	r2, #0
 8005d5e:	d1f0      	bne.n	8005d42 <quorem+0xf0>
 8005d60:	3c01      	subs	r4, #1
 8005d62:	e7eb      	b.n	8005d3c <quorem+0xea>
 8005d64:	2000      	movs	r0, #0
 8005d66:	e7ee      	b.n	8005d46 <quorem+0xf4>

08005d68 <_dtoa_r>:
 8005d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6c:	ed2d 8b02 	vpush	{d8}
 8005d70:	ec57 6b10 	vmov	r6, r7, d0
 8005d74:	b095      	sub	sp, #84	; 0x54
 8005d76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005d7c:	9105      	str	r1, [sp, #20]
 8005d7e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005d82:	4604      	mov	r4, r0
 8005d84:	9209      	str	r2, [sp, #36]	; 0x24
 8005d86:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d88:	b975      	cbnz	r5, 8005da8 <_dtoa_r+0x40>
 8005d8a:	2010      	movs	r0, #16
 8005d8c:	f7fe ff70 	bl	8004c70 <malloc>
 8005d90:	4602      	mov	r2, r0
 8005d92:	6260      	str	r0, [r4, #36]	; 0x24
 8005d94:	b920      	cbnz	r0, 8005da0 <_dtoa_r+0x38>
 8005d96:	4bb2      	ldr	r3, [pc, #712]	; (8006060 <_dtoa_r+0x2f8>)
 8005d98:	21ea      	movs	r1, #234	; 0xea
 8005d9a:	48b2      	ldr	r0, [pc, #712]	; (8006064 <_dtoa_r+0x2fc>)
 8005d9c:	f7fe ff0e 	bl	8004bbc <__assert_func>
 8005da0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005da4:	6005      	str	r5, [r0, #0]
 8005da6:	60c5      	str	r5, [r0, #12]
 8005da8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005daa:	6819      	ldr	r1, [r3, #0]
 8005dac:	b151      	cbz	r1, 8005dc4 <_dtoa_r+0x5c>
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	604a      	str	r2, [r1, #4]
 8005db2:	2301      	movs	r3, #1
 8005db4:	4093      	lsls	r3, r2
 8005db6:	608b      	str	r3, [r1, #8]
 8005db8:	4620      	mov	r0, r4
 8005dba:	f001 f831 	bl	8006e20 <_Bfree>
 8005dbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	1e3b      	subs	r3, r7, #0
 8005dc6:	bfb9      	ittee	lt
 8005dc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005dcc:	9303      	strlt	r3, [sp, #12]
 8005dce:	2300      	movge	r3, #0
 8005dd0:	f8c8 3000 	strge.w	r3, [r8]
 8005dd4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005dd8:	4ba3      	ldr	r3, [pc, #652]	; (8006068 <_dtoa_r+0x300>)
 8005dda:	bfbc      	itt	lt
 8005ddc:	2201      	movlt	r2, #1
 8005dde:	f8c8 2000 	strlt.w	r2, [r8]
 8005de2:	ea33 0309 	bics.w	r3, r3, r9
 8005de6:	d11b      	bne.n	8005e20 <_dtoa_r+0xb8>
 8005de8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005dea:	f242 730f 	movw	r3, #9999	; 0x270f
 8005dee:	6013      	str	r3, [r2, #0]
 8005df0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005df4:	4333      	orrs	r3, r6
 8005df6:	f000 857a 	beq.w	80068ee <_dtoa_r+0xb86>
 8005dfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005dfc:	b963      	cbnz	r3, 8005e18 <_dtoa_r+0xb0>
 8005dfe:	4b9b      	ldr	r3, [pc, #620]	; (800606c <_dtoa_r+0x304>)
 8005e00:	e024      	b.n	8005e4c <_dtoa_r+0xe4>
 8005e02:	4b9b      	ldr	r3, [pc, #620]	; (8006070 <_dtoa_r+0x308>)
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	3308      	adds	r3, #8
 8005e08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	9800      	ldr	r0, [sp, #0]
 8005e0e:	b015      	add	sp, #84	; 0x54
 8005e10:	ecbd 8b02 	vpop	{d8}
 8005e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e18:	4b94      	ldr	r3, [pc, #592]	; (800606c <_dtoa_r+0x304>)
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	3303      	adds	r3, #3
 8005e1e:	e7f3      	b.n	8005e08 <_dtoa_r+0xa0>
 8005e20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e24:	2200      	movs	r2, #0
 8005e26:	ec51 0b17 	vmov	r0, r1, d7
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005e30:	f7fa fe52 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e34:	4680      	mov	r8, r0
 8005e36:	b158      	cbz	r0, 8005e50 <_dtoa_r+0xe8>
 8005e38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 8551 	beq.w	80068e8 <_dtoa_r+0xb80>
 8005e46:	488b      	ldr	r0, [pc, #556]	; (8006074 <_dtoa_r+0x30c>)
 8005e48:	6018      	str	r0, [r3, #0]
 8005e4a:	1e43      	subs	r3, r0, #1
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	e7dd      	b.n	8005e0c <_dtoa_r+0xa4>
 8005e50:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005e54:	aa12      	add	r2, sp, #72	; 0x48
 8005e56:	a913      	add	r1, sp, #76	; 0x4c
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f001 fac3 	bl	80073e4 <__d2b>
 8005e5e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005e62:	4683      	mov	fp, r0
 8005e64:	2d00      	cmp	r5, #0
 8005e66:	d07c      	beq.n	8005f62 <_dtoa_r+0x1fa>
 8005e68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e6a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005e6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e72:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005e76:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005e7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005e7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005e82:	4b7d      	ldr	r3, [pc, #500]	; (8006078 <_dtoa_r+0x310>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	4630      	mov	r0, r6
 8005e88:	4639      	mov	r1, r7
 8005e8a:	f7fa fa05 	bl	8000298 <__aeabi_dsub>
 8005e8e:	a36e      	add	r3, pc, #440	; (adr r3, 8006048 <_dtoa_r+0x2e0>)
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	f7fa fbb8 	bl	8000608 <__aeabi_dmul>
 8005e98:	a36d      	add	r3, pc, #436	; (adr r3, 8006050 <_dtoa_r+0x2e8>)
 8005e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9e:	f7fa f9fd 	bl	800029c <__adddf3>
 8005ea2:	4606      	mov	r6, r0
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	460f      	mov	r7, r1
 8005ea8:	f7fa fb44 	bl	8000534 <__aeabi_i2d>
 8005eac:	a36a      	add	r3, pc, #424	; (adr r3, 8006058 <_dtoa_r+0x2f0>)
 8005eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb2:	f7fa fba9 	bl	8000608 <__aeabi_dmul>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	460b      	mov	r3, r1
 8005eba:	4630      	mov	r0, r6
 8005ebc:	4639      	mov	r1, r7
 8005ebe:	f7fa f9ed 	bl	800029c <__adddf3>
 8005ec2:	4606      	mov	r6, r0
 8005ec4:	460f      	mov	r7, r1
 8005ec6:	f7fa fe4f 	bl	8000b68 <__aeabi_d2iz>
 8005eca:	2200      	movs	r2, #0
 8005ecc:	4682      	mov	sl, r0
 8005ece:	2300      	movs	r3, #0
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	4639      	mov	r1, r7
 8005ed4:	f7fa fe0a 	bl	8000aec <__aeabi_dcmplt>
 8005ed8:	b148      	cbz	r0, 8005eee <_dtoa_r+0x186>
 8005eda:	4650      	mov	r0, sl
 8005edc:	f7fa fb2a 	bl	8000534 <__aeabi_i2d>
 8005ee0:	4632      	mov	r2, r6
 8005ee2:	463b      	mov	r3, r7
 8005ee4:	f7fa fdf8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ee8:	b908      	cbnz	r0, 8005eee <_dtoa_r+0x186>
 8005eea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005eee:	f1ba 0f16 	cmp.w	sl, #22
 8005ef2:	d854      	bhi.n	8005f9e <_dtoa_r+0x236>
 8005ef4:	4b61      	ldr	r3, [pc, #388]	; (800607c <_dtoa_r+0x314>)
 8005ef6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f02:	f7fa fdf3 	bl	8000aec <__aeabi_dcmplt>
 8005f06:	2800      	cmp	r0, #0
 8005f08:	d04b      	beq.n	8005fa2 <_dtoa_r+0x23a>
 8005f0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f0e:	2300      	movs	r3, #0
 8005f10:	930e      	str	r3, [sp, #56]	; 0x38
 8005f12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f14:	1b5d      	subs	r5, r3, r5
 8005f16:	1e6b      	subs	r3, r5, #1
 8005f18:	9304      	str	r3, [sp, #16]
 8005f1a:	bf43      	ittte	mi
 8005f1c:	2300      	movmi	r3, #0
 8005f1e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005f22:	9304      	strmi	r3, [sp, #16]
 8005f24:	f04f 0800 	movpl.w	r8, #0
 8005f28:	f1ba 0f00 	cmp.w	sl, #0
 8005f2c:	db3b      	blt.n	8005fa6 <_dtoa_r+0x23e>
 8005f2e:	9b04      	ldr	r3, [sp, #16]
 8005f30:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005f34:	4453      	add	r3, sl
 8005f36:	9304      	str	r3, [sp, #16]
 8005f38:	2300      	movs	r3, #0
 8005f3a:	9306      	str	r3, [sp, #24]
 8005f3c:	9b05      	ldr	r3, [sp, #20]
 8005f3e:	2b09      	cmp	r3, #9
 8005f40:	d869      	bhi.n	8006016 <_dtoa_r+0x2ae>
 8005f42:	2b05      	cmp	r3, #5
 8005f44:	bfc4      	itt	gt
 8005f46:	3b04      	subgt	r3, #4
 8005f48:	9305      	strgt	r3, [sp, #20]
 8005f4a:	9b05      	ldr	r3, [sp, #20]
 8005f4c:	f1a3 0302 	sub.w	r3, r3, #2
 8005f50:	bfcc      	ite	gt
 8005f52:	2500      	movgt	r5, #0
 8005f54:	2501      	movle	r5, #1
 8005f56:	2b03      	cmp	r3, #3
 8005f58:	d869      	bhi.n	800602e <_dtoa_r+0x2c6>
 8005f5a:	e8df f003 	tbb	[pc, r3]
 8005f5e:	4e2c      	.short	0x4e2c
 8005f60:	5a4c      	.short	0x5a4c
 8005f62:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005f66:	441d      	add	r5, r3
 8005f68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005f6c:	2b20      	cmp	r3, #32
 8005f6e:	bfc1      	itttt	gt
 8005f70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f74:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005f78:	fa09 f303 	lslgt.w	r3, r9, r3
 8005f7c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005f80:	bfda      	itte	le
 8005f82:	f1c3 0320 	rsble	r3, r3, #32
 8005f86:	fa06 f003 	lslle.w	r0, r6, r3
 8005f8a:	4318      	orrgt	r0, r3
 8005f8c:	f7fa fac2 	bl	8000514 <__aeabi_ui2d>
 8005f90:	2301      	movs	r3, #1
 8005f92:	4606      	mov	r6, r0
 8005f94:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005f98:	3d01      	subs	r5, #1
 8005f9a:	9310      	str	r3, [sp, #64]	; 0x40
 8005f9c:	e771      	b.n	8005e82 <_dtoa_r+0x11a>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e7b6      	b.n	8005f10 <_dtoa_r+0x1a8>
 8005fa2:	900e      	str	r0, [sp, #56]	; 0x38
 8005fa4:	e7b5      	b.n	8005f12 <_dtoa_r+0x1aa>
 8005fa6:	f1ca 0300 	rsb	r3, sl, #0
 8005faa:	9306      	str	r3, [sp, #24]
 8005fac:	2300      	movs	r3, #0
 8005fae:	eba8 080a 	sub.w	r8, r8, sl
 8005fb2:	930d      	str	r3, [sp, #52]	; 0x34
 8005fb4:	e7c2      	b.n	8005f3c <_dtoa_r+0x1d4>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	9308      	str	r3, [sp, #32]
 8005fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	dc39      	bgt.n	8006034 <_dtoa_r+0x2cc>
 8005fc0:	f04f 0901 	mov.w	r9, #1
 8005fc4:	f8cd 9004 	str.w	r9, [sp, #4]
 8005fc8:	464b      	mov	r3, r9
 8005fca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005fce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	6042      	str	r2, [r0, #4]
 8005fd4:	2204      	movs	r2, #4
 8005fd6:	f102 0614 	add.w	r6, r2, #20
 8005fda:	429e      	cmp	r6, r3
 8005fdc:	6841      	ldr	r1, [r0, #4]
 8005fde:	d92f      	bls.n	8006040 <_dtoa_r+0x2d8>
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	f000 fedd 	bl	8006da0 <_Balloc>
 8005fe6:	9000      	str	r0, [sp, #0]
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	d14b      	bne.n	8006084 <_dtoa_r+0x31c>
 8005fec:	4b24      	ldr	r3, [pc, #144]	; (8006080 <_dtoa_r+0x318>)
 8005fee:	4602      	mov	r2, r0
 8005ff0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005ff4:	e6d1      	b.n	8005d9a <_dtoa_r+0x32>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e7de      	b.n	8005fb8 <_dtoa_r+0x250>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	9308      	str	r3, [sp, #32]
 8005ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006000:	eb0a 0903 	add.w	r9, sl, r3
 8006004:	f109 0301 	add.w	r3, r9, #1
 8006008:	2b01      	cmp	r3, #1
 800600a:	9301      	str	r3, [sp, #4]
 800600c:	bfb8      	it	lt
 800600e:	2301      	movlt	r3, #1
 8006010:	e7dd      	b.n	8005fce <_dtoa_r+0x266>
 8006012:	2301      	movs	r3, #1
 8006014:	e7f2      	b.n	8005ffc <_dtoa_r+0x294>
 8006016:	2501      	movs	r5, #1
 8006018:	2300      	movs	r3, #0
 800601a:	9305      	str	r3, [sp, #20]
 800601c:	9508      	str	r5, [sp, #32]
 800601e:	f04f 39ff 	mov.w	r9, #4294967295
 8006022:	2200      	movs	r2, #0
 8006024:	f8cd 9004 	str.w	r9, [sp, #4]
 8006028:	2312      	movs	r3, #18
 800602a:	9209      	str	r2, [sp, #36]	; 0x24
 800602c:	e7cf      	b.n	8005fce <_dtoa_r+0x266>
 800602e:	2301      	movs	r3, #1
 8006030:	9308      	str	r3, [sp, #32]
 8006032:	e7f4      	b.n	800601e <_dtoa_r+0x2b6>
 8006034:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006038:	f8cd 9004 	str.w	r9, [sp, #4]
 800603c:	464b      	mov	r3, r9
 800603e:	e7c6      	b.n	8005fce <_dtoa_r+0x266>
 8006040:	3101      	adds	r1, #1
 8006042:	6041      	str	r1, [r0, #4]
 8006044:	0052      	lsls	r2, r2, #1
 8006046:	e7c6      	b.n	8005fd6 <_dtoa_r+0x26e>
 8006048:	636f4361 	.word	0x636f4361
 800604c:	3fd287a7 	.word	0x3fd287a7
 8006050:	8b60c8b3 	.word	0x8b60c8b3
 8006054:	3fc68a28 	.word	0x3fc68a28
 8006058:	509f79fb 	.word	0x509f79fb
 800605c:	3fd34413 	.word	0x3fd34413
 8006060:	08007dca 	.word	0x08007dca
 8006064:	08007de1 	.word	0x08007de1
 8006068:	7ff00000 	.word	0x7ff00000
 800606c:	08007dc6 	.word	0x08007dc6
 8006070:	08007dbd 	.word	0x08007dbd
 8006074:	08007d9a 	.word	0x08007d9a
 8006078:	3ff80000 	.word	0x3ff80000
 800607c:	08007f40 	.word	0x08007f40
 8006080:	08007e40 	.word	0x08007e40
 8006084:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006086:	9a00      	ldr	r2, [sp, #0]
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	9b01      	ldr	r3, [sp, #4]
 800608c:	2b0e      	cmp	r3, #14
 800608e:	f200 80ad 	bhi.w	80061ec <_dtoa_r+0x484>
 8006092:	2d00      	cmp	r5, #0
 8006094:	f000 80aa 	beq.w	80061ec <_dtoa_r+0x484>
 8006098:	f1ba 0f00 	cmp.w	sl, #0
 800609c:	dd36      	ble.n	800610c <_dtoa_r+0x3a4>
 800609e:	4ac3      	ldr	r2, [pc, #780]	; (80063ac <_dtoa_r+0x644>)
 80060a0:	f00a 030f 	and.w	r3, sl, #15
 80060a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80060a8:	ed93 7b00 	vldr	d7, [r3]
 80060ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80060b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80060b4:	eeb0 8a47 	vmov.f32	s16, s14
 80060b8:	eef0 8a67 	vmov.f32	s17, s15
 80060bc:	d016      	beq.n	80060ec <_dtoa_r+0x384>
 80060be:	4bbc      	ldr	r3, [pc, #752]	; (80063b0 <_dtoa_r+0x648>)
 80060c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80060c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060c8:	f7fa fbc8 	bl	800085c <__aeabi_ddiv>
 80060cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060d0:	f007 070f 	and.w	r7, r7, #15
 80060d4:	2503      	movs	r5, #3
 80060d6:	4eb6      	ldr	r6, [pc, #728]	; (80063b0 <_dtoa_r+0x648>)
 80060d8:	b957      	cbnz	r7, 80060f0 <_dtoa_r+0x388>
 80060da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060de:	ec53 2b18 	vmov	r2, r3, d8
 80060e2:	f7fa fbbb 	bl	800085c <__aeabi_ddiv>
 80060e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060ea:	e029      	b.n	8006140 <_dtoa_r+0x3d8>
 80060ec:	2502      	movs	r5, #2
 80060ee:	e7f2      	b.n	80060d6 <_dtoa_r+0x36e>
 80060f0:	07f9      	lsls	r1, r7, #31
 80060f2:	d508      	bpl.n	8006106 <_dtoa_r+0x39e>
 80060f4:	ec51 0b18 	vmov	r0, r1, d8
 80060f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80060fc:	f7fa fa84 	bl	8000608 <__aeabi_dmul>
 8006100:	ec41 0b18 	vmov	d8, r0, r1
 8006104:	3501      	adds	r5, #1
 8006106:	107f      	asrs	r7, r7, #1
 8006108:	3608      	adds	r6, #8
 800610a:	e7e5      	b.n	80060d8 <_dtoa_r+0x370>
 800610c:	f000 80a6 	beq.w	800625c <_dtoa_r+0x4f4>
 8006110:	f1ca 0600 	rsb	r6, sl, #0
 8006114:	4ba5      	ldr	r3, [pc, #660]	; (80063ac <_dtoa_r+0x644>)
 8006116:	4fa6      	ldr	r7, [pc, #664]	; (80063b0 <_dtoa_r+0x648>)
 8006118:	f006 020f 	and.w	r2, r6, #15
 800611c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006124:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006128:	f7fa fa6e 	bl	8000608 <__aeabi_dmul>
 800612c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006130:	1136      	asrs	r6, r6, #4
 8006132:	2300      	movs	r3, #0
 8006134:	2502      	movs	r5, #2
 8006136:	2e00      	cmp	r6, #0
 8006138:	f040 8085 	bne.w	8006246 <_dtoa_r+0x4de>
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1d2      	bne.n	80060e6 <_dtoa_r+0x37e>
 8006140:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006142:	2b00      	cmp	r3, #0
 8006144:	f000 808c 	beq.w	8006260 <_dtoa_r+0x4f8>
 8006148:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800614c:	4b99      	ldr	r3, [pc, #612]	; (80063b4 <_dtoa_r+0x64c>)
 800614e:	2200      	movs	r2, #0
 8006150:	4630      	mov	r0, r6
 8006152:	4639      	mov	r1, r7
 8006154:	f7fa fcca 	bl	8000aec <__aeabi_dcmplt>
 8006158:	2800      	cmp	r0, #0
 800615a:	f000 8081 	beq.w	8006260 <_dtoa_r+0x4f8>
 800615e:	9b01      	ldr	r3, [sp, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d07d      	beq.n	8006260 <_dtoa_r+0x4f8>
 8006164:	f1b9 0f00 	cmp.w	r9, #0
 8006168:	dd3c      	ble.n	80061e4 <_dtoa_r+0x47c>
 800616a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800616e:	9307      	str	r3, [sp, #28]
 8006170:	2200      	movs	r2, #0
 8006172:	4b91      	ldr	r3, [pc, #580]	; (80063b8 <_dtoa_r+0x650>)
 8006174:	4630      	mov	r0, r6
 8006176:	4639      	mov	r1, r7
 8006178:	f7fa fa46 	bl	8000608 <__aeabi_dmul>
 800617c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006180:	3501      	adds	r5, #1
 8006182:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006186:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800618a:	4628      	mov	r0, r5
 800618c:	f7fa f9d2 	bl	8000534 <__aeabi_i2d>
 8006190:	4632      	mov	r2, r6
 8006192:	463b      	mov	r3, r7
 8006194:	f7fa fa38 	bl	8000608 <__aeabi_dmul>
 8006198:	4b88      	ldr	r3, [pc, #544]	; (80063bc <_dtoa_r+0x654>)
 800619a:	2200      	movs	r2, #0
 800619c:	f7fa f87e 	bl	800029c <__adddf3>
 80061a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80061a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061a8:	9303      	str	r3, [sp, #12]
 80061aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d15c      	bne.n	800626a <_dtoa_r+0x502>
 80061b0:	4b83      	ldr	r3, [pc, #524]	; (80063c0 <_dtoa_r+0x658>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	4630      	mov	r0, r6
 80061b6:	4639      	mov	r1, r7
 80061b8:	f7fa f86e 	bl	8000298 <__aeabi_dsub>
 80061bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061c0:	4606      	mov	r6, r0
 80061c2:	460f      	mov	r7, r1
 80061c4:	f7fa fcb0 	bl	8000b28 <__aeabi_dcmpgt>
 80061c8:	2800      	cmp	r0, #0
 80061ca:	f040 8296 	bne.w	80066fa <_dtoa_r+0x992>
 80061ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80061d2:	4630      	mov	r0, r6
 80061d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061d8:	4639      	mov	r1, r7
 80061da:	f7fa fc87 	bl	8000aec <__aeabi_dcmplt>
 80061de:	2800      	cmp	r0, #0
 80061e0:	f040 8288 	bne.w	80066f4 <_dtoa_r+0x98c>
 80061e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80061e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f2c0 8158 	blt.w	80064a4 <_dtoa_r+0x73c>
 80061f4:	f1ba 0f0e 	cmp.w	sl, #14
 80061f8:	f300 8154 	bgt.w	80064a4 <_dtoa_r+0x73c>
 80061fc:	4b6b      	ldr	r3, [pc, #428]	; (80063ac <_dtoa_r+0x644>)
 80061fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006202:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006208:	2b00      	cmp	r3, #0
 800620a:	f280 80e3 	bge.w	80063d4 <_dtoa_r+0x66c>
 800620e:	9b01      	ldr	r3, [sp, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	f300 80df 	bgt.w	80063d4 <_dtoa_r+0x66c>
 8006216:	f040 826d 	bne.w	80066f4 <_dtoa_r+0x98c>
 800621a:	4b69      	ldr	r3, [pc, #420]	; (80063c0 <_dtoa_r+0x658>)
 800621c:	2200      	movs	r2, #0
 800621e:	4640      	mov	r0, r8
 8006220:	4649      	mov	r1, r9
 8006222:	f7fa f9f1 	bl	8000608 <__aeabi_dmul>
 8006226:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800622a:	f7fa fc73 	bl	8000b14 <__aeabi_dcmpge>
 800622e:	9e01      	ldr	r6, [sp, #4]
 8006230:	4637      	mov	r7, r6
 8006232:	2800      	cmp	r0, #0
 8006234:	f040 8243 	bne.w	80066be <_dtoa_r+0x956>
 8006238:	9d00      	ldr	r5, [sp, #0]
 800623a:	2331      	movs	r3, #49	; 0x31
 800623c:	f805 3b01 	strb.w	r3, [r5], #1
 8006240:	f10a 0a01 	add.w	sl, sl, #1
 8006244:	e23f      	b.n	80066c6 <_dtoa_r+0x95e>
 8006246:	07f2      	lsls	r2, r6, #31
 8006248:	d505      	bpl.n	8006256 <_dtoa_r+0x4ee>
 800624a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800624e:	f7fa f9db 	bl	8000608 <__aeabi_dmul>
 8006252:	3501      	adds	r5, #1
 8006254:	2301      	movs	r3, #1
 8006256:	1076      	asrs	r6, r6, #1
 8006258:	3708      	adds	r7, #8
 800625a:	e76c      	b.n	8006136 <_dtoa_r+0x3ce>
 800625c:	2502      	movs	r5, #2
 800625e:	e76f      	b.n	8006140 <_dtoa_r+0x3d8>
 8006260:	9b01      	ldr	r3, [sp, #4]
 8006262:	f8cd a01c 	str.w	sl, [sp, #28]
 8006266:	930c      	str	r3, [sp, #48]	; 0x30
 8006268:	e78d      	b.n	8006186 <_dtoa_r+0x41e>
 800626a:	9900      	ldr	r1, [sp, #0]
 800626c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800626e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006270:	4b4e      	ldr	r3, [pc, #312]	; (80063ac <_dtoa_r+0x644>)
 8006272:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006276:	4401      	add	r1, r0
 8006278:	9102      	str	r1, [sp, #8]
 800627a:	9908      	ldr	r1, [sp, #32]
 800627c:	eeb0 8a47 	vmov.f32	s16, s14
 8006280:	eef0 8a67 	vmov.f32	s17, s15
 8006284:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006288:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800628c:	2900      	cmp	r1, #0
 800628e:	d045      	beq.n	800631c <_dtoa_r+0x5b4>
 8006290:	494c      	ldr	r1, [pc, #304]	; (80063c4 <_dtoa_r+0x65c>)
 8006292:	2000      	movs	r0, #0
 8006294:	f7fa fae2 	bl	800085c <__aeabi_ddiv>
 8006298:	ec53 2b18 	vmov	r2, r3, d8
 800629c:	f7f9 fffc 	bl	8000298 <__aeabi_dsub>
 80062a0:	9d00      	ldr	r5, [sp, #0]
 80062a2:	ec41 0b18 	vmov	d8, r0, r1
 80062a6:	4639      	mov	r1, r7
 80062a8:	4630      	mov	r0, r6
 80062aa:	f7fa fc5d 	bl	8000b68 <__aeabi_d2iz>
 80062ae:	900c      	str	r0, [sp, #48]	; 0x30
 80062b0:	f7fa f940 	bl	8000534 <__aeabi_i2d>
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4630      	mov	r0, r6
 80062ba:	4639      	mov	r1, r7
 80062bc:	f7f9 ffec 	bl	8000298 <__aeabi_dsub>
 80062c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062c2:	3330      	adds	r3, #48	; 0x30
 80062c4:	f805 3b01 	strb.w	r3, [r5], #1
 80062c8:	ec53 2b18 	vmov	r2, r3, d8
 80062cc:	4606      	mov	r6, r0
 80062ce:	460f      	mov	r7, r1
 80062d0:	f7fa fc0c 	bl	8000aec <__aeabi_dcmplt>
 80062d4:	2800      	cmp	r0, #0
 80062d6:	d165      	bne.n	80063a4 <_dtoa_r+0x63c>
 80062d8:	4632      	mov	r2, r6
 80062da:	463b      	mov	r3, r7
 80062dc:	4935      	ldr	r1, [pc, #212]	; (80063b4 <_dtoa_r+0x64c>)
 80062de:	2000      	movs	r0, #0
 80062e0:	f7f9 ffda 	bl	8000298 <__aeabi_dsub>
 80062e4:	ec53 2b18 	vmov	r2, r3, d8
 80062e8:	f7fa fc00 	bl	8000aec <__aeabi_dcmplt>
 80062ec:	2800      	cmp	r0, #0
 80062ee:	f040 80b9 	bne.w	8006464 <_dtoa_r+0x6fc>
 80062f2:	9b02      	ldr	r3, [sp, #8]
 80062f4:	429d      	cmp	r5, r3
 80062f6:	f43f af75 	beq.w	80061e4 <_dtoa_r+0x47c>
 80062fa:	4b2f      	ldr	r3, [pc, #188]	; (80063b8 <_dtoa_r+0x650>)
 80062fc:	ec51 0b18 	vmov	r0, r1, d8
 8006300:	2200      	movs	r2, #0
 8006302:	f7fa f981 	bl	8000608 <__aeabi_dmul>
 8006306:	4b2c      	ldr	r3, [pc, #176]	; (80063b8 <_dtoa_r+0x650>)
 8006308:	ec41 0b18 	vmov	d8, r0, r1
 800630c:	2200      	movs	r2, #0
 800630e:	4630      	mov	r0, r6
 8006310:	4639      	mov	r1, r7
 8006312:	f7fa f979 	bl	8000608 <__aeabi_dmul>
 8006316:	4606      	mov	r6, r0
 8006318:	460f      	mov	r7, r1
 800631a:	e7c4      	b.n	80062a6 <_dtoa_r+0x53e>
 800631c:	ec51 0b17 	vmov	r0, r1, d7
 8006320:	f7fa f972 	bl	8000608 <__aeabi_dmul>
 8006324:	9b02      	ldr	r3, [sp, #8]
 8006326:	9d00      	ldr	r5, [sp, #0]
 8006328:	930c      	str	r3, [sp, #48]	; 0x30
 800632a:	ec41 0b18 	vmov	d8, r0, r1
 800632e:	4639      	mov	r1, r7
 8006330:	4630      	mov	r0, r6
 8006332:	f7fa fc19 	bl	8000b68 <__aeabi_d2iz>
 8006336:	9011      	str	r0, [sp, #68]	; 0x44
 8006338:	f7fa f8fc 	bl	8000534 <__aeabi_i2d>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	4630      	mov	r0, r6
 8006342:	4639      	mov	r1, r7
 8006344:	f7f9 ffa8 	bl	8000298 <__aeabi_dsub>
 8006348:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800634a:	3330      	adds	r3, #48	; 0x30
 800634c:	f805 3b01 	strb.w	r3, [r5], #1
 8006350:	9b02      	ldr	r3, [sp, #8]
 8006352:	429d      	cmp	r5, r3
 8006354:	4606      	mov	r6, r0
 8006356:	460f      	mov	r7, r1
 8006358:	f04f 0200 	mov.w	r2, #0
 800635c:	d134      	bne.n	80063c8 <_dtoa_r+0x660>
 800635e:	4b19      	ldr	r3, [pc, #100]	; (80063c4 <_dtoa_r+0x65c>)
 8006360:	ec51 0b18 	vmov	r0, r1, d8
 8006364:	f7f9 ff9a 	bl	800029c <__adddf3>
 8006368:	4602      	mov	r2, r0
 800636a:	460b      	mov	r3, r1
 800636c:	4630      	mov	r0, r6
 800636e:	4639      	mov	r1, r7
 8006370:	f7fa fbda 	bl	8000b28 <__aeabi_dcmpgt>
 8006374:	2800      	cmp	r0, #0
 8006376:	d175      	bne.n	8006464 <_dtoa_r+0x6fc>
 8006378:	ec53 2b18 	vmov	r2, r3, d8
 800637c:	4911      	ldr	r1, [pc, #68]	; (80063c4 <_dtoa_r+0x65c>)
 800637e:	2000      	movs	r0, #0
 8006380:	f7f9 ff8a 	bl	8000298 <__aeabi_dsub>
 8006384:	4602      	mov	r2, r0
 8006386:	460b      	mov	r3, r1
 8006388:	4630      	mov	r0, r6
 800638a:	4639      	mov	r1, r7
 800638c:	f7fa fbae 	bl	8000aec <__aeabi_dcmplt>
 8006390:	2800      	cmp	r0, #0
 8006392:	f43f af27 	beq.w	80061e4 <_dtoa_r+0x47c>
 8006396:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006398:	1e6b      	subs	r3, r5, #1
 800639a:	930c      	str	r3, [sp, #48]	; 0x30
 800639c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80063a0:	2b30      	cmp	r3, #48	; 0x30
 80063a2:	d0f8      	beq.n	8006396 <_dtoa_r+0x62e>
 80063a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80063a8:	e04a      	b.n	8006440 <_dtoa_r+0x6d8>
 80063aa:	bf00      	nop
 80063ac:	08007f40 	.word	0x08007f40
 80063b0:	08007f18 	.word	0x08007f18
 80063b4:	3ff00000 	.word	0x3ff00000
 80063b8:	40240000 	.word	0x40240000
 80063bc:	401c0000 	.word	0x401c0000
 80063c0:	40140000 	.word	0x40140000
 80063c4:	3fe00000 	.word	0x3fe00000
 80063c8:	4baf      	ldr	r3, [pc, #700]	; (8006688 <_dtoa_r+0x920>)
 80063ca:	f7fa f91d 	bl	8000608 <__aeabi_dmul>
 80063ce:	4606      	mov	r6, r0
 80063d0:	460f      	mov	r7, r1
 80063d2:	e7ac      	b.n	800632e <_dtoa_r+0x5c6>
 80063d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80063d8:	9d00      	ldr	r5, [sp, #0]
 80063da:	4642      	mov	r2, r8
 80063dc:	464b      	mov	r3, r9
 80063de:	4630      	mov	r0, r6
 80063e0:	4639      	mov	r1, r7
 80063e2:	f7fa fa3b 	bl	800085c <__aeabi_ddiv>
 80063e6:	f7fa fbbf 	bl	8000b68 <__aeabi_d2iz>
 80063ea:	9002      	str	r0, [sp, #8]
 80063ec:	f7fa f8a2 	bl	8000534 <__aeabi_i2d>
 80063f0:	4642      	mov	r2, r8
 80063f2:	464b      	mov	r3, r9
 80063f4:	f7fa f908 	bl	8000608 <__aeabi_dmul>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	4630      	mov	r0, r6
 80063fe:	4639      	mov	r1, r7
 8006400:	f7f9 ff4a 	bl	8000298 <__aeabi_dsub>
 8006404:	9e02      	ldr	r6, [sp, #8]
 8006406:	9f01      	ldr	r7, [sp, #4]
 8006408:	3630      	adds	r6, #48	; 0x30
 800640a:	f805 6b01 	strb.w	r6, [r5], #1
 800640e:	9e00      	ldr	r6, [sp, #0]
 8006410:	1bae      	subs	r6, r5, r6
 8006412:	42b7      	cmp	r7, r6
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	d137      	bne.n	800648a <_dtoa_r+0x722>
 800641a:	f7f9 ff3f 	bl	800029c <__adddf3>
 800641e:	4642      	mov	r2, r8
 8006420:	464b      	mov	r3, r9
 8006422:	4606      	mov	r6, r0
 8006424:	460f      	mov	r7, r1
 8006426:	f7fa fb7f 	bl	8000b28 <__aeabi_dcmpgt>
 800642a:	b9c8      	cbnz	r0, 8006460 <_dtoa_r+0x6f8>
 800642c:	4642      	mov	r2, r8
 800642e:	464b      	mov	r3, r9
 8006430:	4630      	mov	r0, r6
 8006432:	4639      	mov	r1, r7
 8006434:	f7fa fb50 	bl	8000ad8 <__aeabi_dcmpeq>
 8006438:	b110      	cbz	r0, 8006440 <_dtoa_r+0x6d8>
 800643a:	9b02      	ldr	r3, [sp, #8]
 800643c:	07d9      	lsls	r1, r3, #31
 800643e:	d40f      	bmi.n	8006460 <_dtoa_r+0x6f8>
 8006440:	4620      	mov	r0, r4
 8006442:	4659      	mov	r1, fp
 8006444:	f000 fcec 	bl	8006e20 <_Bfree>
 8006448:	2300      	movs	r3, #0
 800644a:	702b      	strb	r3, [r5, #0]
 800644c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800644e:	f10a 0001 	add.w	r0, sl, #1
 8006452:	6018      	str	r0, [r3, #0]
 8006454:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006456:	2b00      	cmp	r3, #0
 8006458:	f43f acd8 	beq.w	8005e0c <_dtoa_r+0xa4>
 800645c:	601d      	str	r5, [r3, #0]
 800645e:	e4d5      	b.n	8005e0c <_dtoa_r+0xa4>
 8006460:	f8cd a01c 	str.w	sl, [sp, #28]
 8006464:	462b      	mov	r3, r5
 8006466:	461d      	mov	r5, r3
 8006468:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800646c:	2a39      	cmp	r2, #57	; 0x39
 800646e:	d108      	bne.n	8006482 <_dtoa_r+0x71a>
 8006470:	9a00      	ldr	r2, [sp, #0]
 8006472:	429a      	cmp	r2, r3
 8006474:	d1f7      	bne.n	8006466 <_dtoa_r+0x6fe>
 8006476:	9a07      	ldr	r2, [sp, #28]
 8006478:	9900      	ldr	r1, [sp, #0]
 800647a:	3201      	adds	r2, #1
 800647c:	9207      	str	r2, [sp, #28]
 800647e:	2230      	movs	r2, #48	; 0x30
 8006480:	700a      	strb	r2, [r1, #0]
 8006482:	781a      	ldrb	r2, [r3, #0]
 8006484:	3201      	adds	r2, #1
 8006486:	701a      	strb	r2, [r3, #0]
 8006488:	e78c      	b.n	80063a4 <_dtoa_r+0x63c>
 800648a:	4b7f      	ldr	r3, [pc, #508]	; (8006688 <_dtoa_r+0x920>)
 800648c:	2200      	movs	r2, #0
 800648e:	f7fa f8bb 	bl	8000608 <__aeabi_dmul>
 8006492:	2200      	movs	r2, #0
 8006494:	2300      	movs	r3, #0
 8006496:	4606      	mov	r6, r0
 8006498:	460f      	mov	r7, r1
 800649a:	f7fa fb1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800649e:	2800      	cmp	r0, #0
 80064a0:	d09b      	beq.n	80063da <_dtoa_r+0x672>
 80064a2:	e7cd      	b.n	8006440 <_dtoa_r+0x6d8>
 80064a4:	9a08      	ldr	r2, [sp, #32]
 80064a6:	2a00      	cmp	r2, #0
 80064a8:	f000 80c4 	beq.w	8006634 <_dtoa_r+0x8cc>
 80064ac:	9a05      	ldr	r2, [sp, #20]
 80064ae:	2a01      	cmp	r2, #1
 80064b0:	f300 80a8 	bgt.w	8006604 <_dtoa_r+0x89c>
 80064b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80064b6:	2a00      	cmp	r2, #0
 80064b8:	f000 80a0 	beq.w	80065fc <_dtoa_r+0x894>
 80064bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80064c0:	9e06      	ldr	r6, [sp, #24]
 80064c2:	4645      	mov	r5, r8
 80064c4:	9a04      	ldr	r2, [sp, #16]
 80064c6:	2101      	movs	r1, #1
 80064c8:	441a      	add	r2, r3
 80064ca:	4620      	mov	r0, r4
 80064cc:	4498      	add	r8, r3
 80064ce:	9204      	str	r2, [sp, #16]
 80064d0:	f000 fd62 	bl	8006f98 <__i2b>
 80064d4:	4607      	mov	r7, r0
 80064d6:	2d00      	cmp	r5, #0
 80064d8:	dd0b      	ble.n	80064f2 <_dtoa_r+0x78a>
 80064da:	9b04      	ldr	r3, [sp, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	dd08      	ble.n	80064f2 <_dtoa_r+0x78a>
 80064e0:	42ab      	cmp	r3, r5
 80064e2:	9a04      	ldr	r2, [sp, #16]
 80064e4:	bfa8      	it	ge
 80064e6:	462b      	movge	r3, r5
 80064e8:	eba8 0803 	sub.w	r8, r8, r3
 80064ec:	1aed      	subs	r5, r5, r3
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	9304      	str	r3, [sp, #16]
 80064f2:	9b06      	ldr	r3, [sp, #24]
 80064f4:	b1fb      	cbz	r3, 8006536 <_dtoa_r+0x7ce>
 80064f6:	9b08      	ldr	r3, [sp, #32]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 809f 	beq.w	800663c <_dtoa_r+0x8d4>
 80064fe:	2e00      	cmp	r6, #0
 8006500:	dd11      	ble.n	8006526 <_dtoa_r+0x7be>
 8006502:	4639      	mov	r1, r7
 8006504:	4632      	mov	r2, r6
 8006506:	4620      	mov	r0, r4
 8006508:	f000 fe02 	bl	8007110 <__pow5mult>
 800650c:	465a      	mov	r2, fp
 800650e:	4601      	mov	r1, r0
 8006510:	4607      	mov	r7, r0
 8006512:	4620      	mov	r0, r4
 8006514:	f000 fd56 	bl	8006fc4 <__multiply>
 8006518:	4659      	mov	r1, fp
 800651a:	9007      	str	r0, [sp, #28]
 800651c:	4620      	mov	r0, r4
 800651e:	f000 fc7f 	bl	8006e20 <_Bfree>
 8006522:	9b07      	ldr	r3, [sp, #28]
 8006524:	469b      	mov	fp, r3
 8006526:	9b06      	ldr	r3, [sp, #24]
 8006528:	1b9a      	subs	r2, r3, r6
 800652a:	d004      	beq.n	8006536 <_dtoa_r+0x7ce>
 800652c:	4659      	mov	r1, fp
 800652e:	4620      	mov	r0, r4
 8006530:	f000 fdee 	bl	8007110 <__pow5mult>
 8006534:	4683      	mov	fp, r0
 8006536:	2101      	movs	r1, #1
 8006538:	4620      	mov	r0, r4
 800653a:	f000 fd2d 	bl	8006f98 <__i2b>
 800653e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006540:	2b00      	cmp	r3, #0
 8006542:	4606      	mov	r6, r0
 8006544:	dd7c      	ble.n	8006640 <_dtoa_r+0x8d8>
 8006546:	461a      	mov	r2, r3
 8006548:	4601      	mov	r1, r0
 800654a:	4620      	mov	r0, r4
 800654c:	f000 fde0 	bl	8007110 <__pow5mult>
 8006550:	9b05      	ldr	r3, [sp, #20]
 8006552:	2b01      	cmp	r3, #1
 8006554:	4606      	mov	r6, r0
 8006556:	dd76      	ble.n	8006646 <_dtoa_r+0x8de>
 8006558:	2300      	movs	r3, #0
 800655a:	9306      	str	r3, [sp, #24]
 800655c:	6933      	ldr	r3, [r6, #16]
 800655e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006562:	6918      	ldr	r0, [r3, #16]
 8006564:	f000 fcc8 	bl	8006ef8 <__hi0bits>
 8006568:	f1c0 0020 	rsb	r0, r0, #32
 800656c:	9b04      	ldr	r3, [sp, #16]
 800656e:	4418      	add	r0, r3
 8006570:	f010 001f 	ands.w	r0, r0, #31
 8006574:	f000 8086 	beq.w	8006684 <_dtoa_r+0x91c>
 8006578:	f1c0 0320 	rsb	r3, r0, #32
 800657c:	2b04      	cmp	r3, #4
 800657e:	dd7f      	ble.n	8006680 <_dtoa_r+0x918>
 8006580:	f1c0 001c 	rsb	r0, r0, #28
 8006584:	9b04      	ldr	r3, [sp, #16]
 8006586:	4403      	add	r3, r0
 8006588:	4480      	add	r8, r0
 800658a:	4405      	add	r5, r0
 800658c:	9304      	str	r3, [sp, #16]
 800658e:	f1b8 0f00 	cmp.w	r8, #0
 8006592:	dd05      	ble.n	80065a0 <_dtoa_r+0x838>
 8006594:	4659      	mov	r1, fp
 8006596:	4642      	mov	r2, r8
 8006598:	4620      	mov	r0, r4
 800659a:	f000 fe13 	bl	80071c4 <__lshift>
 800659e:	4683      	mov	fp, r0
 80065a0:	9b04      	ldr	r3, [sp, #16]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	dd05      	ble.n	80065b2 <_dtoa_r+0x84a>
 80065a6:	4631      	mov	r1, r6
 80065a8:	461a      	mov	r2, r3
 80065aa:	4620      	mov	r0, r4
 80065ac:	f000 fe0a 	bl	80071c4 <__lshift>
 80065b0:	4606      	mov	r6, r0
 80065b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d069      	beq.n	800668c <_dtoa_r+0x924>
 80065b8:	4631      	mov	r1, r6
 80065ba:	4658      	mov	r0, fp
 80065bc:	f000 fe6e 	bl	800729c <__mcmp>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	da63      	bge.n	800668c <_dtoa_r+0x924>
 80065c4:	2300      	movs	r3, #0
 80065c6:	4659      	mov	r1, fp
 80065c8:	220a      	movs	r2, #10
 80065ca:	4620      	mov	r0, r4
 80065cc:	f000 fc4a 	bl	8006e64 <__multadd>
 80065d0:	9b08      	ldr	r3, [sp, #32]
 80065d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065d6:	4683      	mov	fp, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 818f 	beq.w	80068fc <_dtoa_r+0xb94>
 80065de:	4639      	mov	r1, r7
 80065e0:	2300      	movs	r3, #0
 80065e2:	220a      	movs	r2, #10
 80065e4:	4620      	mov	r0, r4
 80065e6:	f000 fc3d 	bl	8006e64 <__multadd>
 80065ea:	f1b9 0f00 	cmp.w	r9, #0
 80065ee:	4607      	mov	r7, r0
 80065f0:	f300 808e 	bgt.w	8006710 <_dtoa_r+0x9a8>
 80065f4:	9b05      	ldr	r3, [sp, #20]
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	dc50      	bgt.n	800669c <_dtoa_r+0x934>
 80065fa:	e089      	b.n	8006710 <_dtoa_r+0x9a8>
 80065fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006602:	e75d      	b.n	80064c0 <_dtoa_r+0x758>
 8006604:	9b01      	ldr	r3, [sp, #4]
 8006606:	1e5e      	subs	r6, r3, #1
 8006608:	9b06      	ldr	r3, [sp, #24]
 800660a:	42b3      	cmp	r3, r6
 800660c:	bfbf      	itttt	lt
 800660e:	9b06      	ldrlt	r3, [sp, #24]
 8006610:	9606      	strlt	r6, [sp, #24]
 8006612:	1af2      	sublt	r2, r6, r3
 8006614:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006616:	bfb6      	itet	lt
 8006618:	189b      	addlt	r3, r3, r2
 800661a:	1b9e      	subge	r6, r3, r6
 800661c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800661e:	9b01      	ldr	r3, [sp, #4]
 8006620:	bfb8      	it	lt
 8006622:	2600      	movlt	r6, #0
 8006624:	2b00      	cmp	r3, #0
 8006626:	bfb5      	itete	lt
 8006628:	eba8 0503 	sublt.w	r5, r8, r3
 800662c:	9b01      	ldrge	r3, [sp, #4]
 800662e:	2300      	movlt	r3, #0
 8006630:	4645      	movge	r5, r8
 8006632:	e747      	b.n	80064c4 <_dtoa_r+0x75c>
 8006634:	9e06      	ldr	r6, [sp, #24]
 8006636:	9f08      	ldr	r7, [sp, #32]
 8006638:	4645      	mov	r5, r8
 800663a:	e74c      	b.n	80064d6 <_dtoa_r+0x76e>
 800663c:	9a06      	ldr	r2, [sp, #24]
 800663e:	e775      	b.n	800652c <_dtoa_r+0x7c4>
 8006640:	9b05      	ldr	r3, [sp, #20]
 8006642:	2b01      	cmp	r3, #1
 8006644:	dc18      	bgt.n	8006678 <_dtoa_r+0x910>
 8006646:	9b02      	ldr	r3, [sp, #8]
 8006648:	b9b3      	cbnz	r3, 8006678 <_dtoa_r+0x910>
 800664a:	9b03      	ldr	r3, [sp, #12]
 800664c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006650:	b9a3      	cbnz	r3, 800667c <_dtoa_r+0x914>
 8006652:	9b03      	ldr	r3, [sp, #12]
 8006654:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006658:	0d1b      	lsrs	r3, r3, #20
 800665a:	051b      	lsls	r3, r3, #20
 800665c:	b12b      	cbz	r3, 800666a <_dtoa_r+0x902>
 800665e:	9b04      	ldr	r3, [sp, #16]
 8006660:	3301      	adds	r3, #1
 8006662:	9304      	str	r3, [sp, #16]
 8006664:	f108 0801 	add.w	r8, r8, #1
 8006668:	2301      	movs	r3, #1
 800666a:	9306      	str	r3, [sp, #24]
 800666c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800666e:	2b00      	cmp	r3, #0
 8006670:	f47f af74 	bne.w	800655c <_dtoa_r+0x7f4>
 8006674:	2001      	movs	r0, #1
 8006676:	e779      	b.n	800656c <_dtoa_r+0x804>
 8006678:	2300      	movs	r3, #0
 800667a:	e7f6      	b.n	800666a <_dtoa_r+0x902>
 800667c:	9b02      	ldr	r3, [sp, #8]
 800667e:	e7f4      	b.n	800666a <_dtoa_r+0x902>
 8006680:	d085      	beq.n	800658e <_dtoa_r+0x826>
 8006682:	4618      	mov	r0, r3
 8006684:	301c      	adds	r0, #28
 8006686:	e77d      	b.n	8006584 <_dtoa_r+0x81c>
 8006688:	40240000 	.word	0x40240000
 800668c:	9b01      	ldr	r3, [sp, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	dc38      	bgt.n	8006704 <_dtoa_r+0x99c>
 8006692:	9b05      	ldr	r3, [sp, #20]
 8006694:	2b02      	cmp	r3, #2
 8006696:	dd35      	ble.n	8006704 <_dtoa_r+0x99c>
 8006698:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800669c:	f1b9 0f00 	cmp.w	r9, #0
 80066a0:	d10d      	bne.n	80066be <_dtoa_r+0x956>
 80066a2:	4631      	mov	r1, r6
 80066a4:	464b      	mov	r3, r9
 80066a6:	2205      	movs	r2, #5
 80066a8:	4620      	mov	r0, r4
 80066aa:	f000 fbdb 	bl	8006e64 <__multadd>
 80066ae:	4601      	mov	r1, r0
 80066b0:	4606      	mov	r6, r0
 80066b2:	4658      	mov	r0, fp
 80066b4:	f000 fdf2 	bl	800729c <__mcmp>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	f73f adbd 	bgt.w	8006238 <_dtoa_r+0x4d0>
 80066be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066c0:	9d00      	ldr	r5, [sp, #0]
 80066c2:	ea6f 0a03 	mvn.w	sl, r3
 80066c6:	f04f 0800 	mov.w	r8, #0
 80066ca:	4631      	mov	r1, r6
 80066cc:	4620      	mov	r0, r4
 80066ce:	f000 fba7 	bl	8006e20 <_Bfree>
 80066d2:	2f00      	cmp	r7, #0
 80066d4:	f43f aeb4 	beq.w	8006440 <_dtoa_r+0x6d8>
 80066d8:	f1b8 0f00 	cmp.w	r8, #0
 80066dc:	d005      	beq.n	80066ea <_dtoa_r+0x982>
 80066de:	45b8      	cmp	r8, r7
 80066e0:	d003      	beq.n	80066ea <_dtoa_r+0x982>
 80066e2:	4641      	mov	r1, r8
 80066e4:	4620      	mov	r0, r4
 80066e6:	f000 fb9b 	bl	8006e20 <_Bfree>
 80066ea:	4639      	mov	r1, r7
 80066ec:	4620      	mov	r0, r4
 80066ee:	f000 fb97 	bl	8006e20 <_Bfree>
 80066f2:	e6a5      	b.n	8006440 <_dtoa_r+0x6d8>
 80066f4:	2600      	movs	r6, #0
 80066f6:	4637      	mov	r7, r6
 80066f8:	e7e1      	b.n	80066be <_dtoa_r+0x956>
 80066fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80066fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006700:	4637      	mov	r7, r6
 8006702:	e599      	b.n	8006238 <_dtoa_r+0x4d0>
 8006704:	9b08      	ldr	r3, [sp, #32]
 8006706:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 80fd 	beq.w	800690a <_dtoa_r+0xba2>
 8006710:	2d00      	cmp	r5, #0
 8006712:	dd05      	ble.n	8006720 <_dtoa_r+0x9b8>
 8006714:	4639      	mov	r1, r7
 8006716:	462a      	mov	r2, r5
 8006718:	4620      	mov	r0, r4
 800671a:	f000 fd53 	bl	80071c4 <__lshift>
 800671e:	4607      	mov	r7, r0
 8006720:	9b06      	ldr	r3, [sp, #24]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d05c      	beq.n	80067e0 <_dtoa_r+0xa78>
 8006726:	6879      	ldr	r1, [r7, #4]
 8006728:	4620      	mov	r0, r4
 800672a:	f000 fb39 	bl	8006da0 <_Balloc>
 800672e:	4605      	mov	r5, r0
 8006730:	b928      	cbnz	r0, 800673e <_dtoa_r+0x9d6>
 8006732:	4b80      	ldr	r3, [pc, #512]	; (8006934 <_dtoa_r+0xbcc>)
 8006734:	4602      	mov	r2, r0
 8006736:	f240 21ea 	movw	r1, #746	; 0x2ea
 800673a:	f7ff bb2e 	b.w	8005d9a <_dtoa_r+0x32>
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	3202      	adds	r2, #2
 8006742:	0092      	lsls	r2, r2, #2
 8006744:	f107 010c 	add.w	r1, r7, #12
 8006748:	300c      	adds	r0, #12
 800674a:	f7fe fa99 	bl	8004c80 <memcpy>
 800674e:	2201      	movs	r2, #1
 8006750:	4629      	mov	r1, r5
 8006752:	4620      	mov	r0, r4
 8006754:	f000 fd36 	bl	80071c4 <__lshift>
 8006758:	9b00      	ldr	r3, [sp, #0]
 800675a:	3301      	adds	r3, #1
 800675c:	9301      	str	r3, [sp, #4]
 800675e:	9b00      	ldr	r3, [sp, #0]
 8006760:	444b      	add	r3, r9
 8006762:	9307      	str	r3, [sp, #28]
 8006764:	9b02      	ldr	r3, [sp, #8]
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	46b8      	mov	r8, r7
 800676c:	9306      	str	r3, [sp, #24]
 800676e:	4607      	mov	r7, r0
 8006770:	9b01      	ldr	r3, [sp, #4]
 8006772:	4631      	mov	r1, r6
 8006774:	3b01      	subs	r3, #1
 8006776:	4658      	mov	r0, fp
 8006778:	9302      	str	r3, [sp, #8]
 800677a:	f7ff fa6a 	bl	8005c52 <quorem>
 800677e:	4603      	mov	r3, r0
 8006780:	3330      	adds	r3, #48	; 0x30
 8006782:	9004      	str	r0, [sp, #16]
 8006784:	4641      	mov	r1, r8
 8006786:	4658      	mov	r0, fp
 8006788:	9308      	str	r3, [sp, #32]
 800678a:	f000 fd87 	bl	800729c <__mcmp>
 800678e:	463a      	mov	r2, r7
 8006790:	4681      	mov	r9, r0
 8006792:	4631      	mov	r1, r6
 8006794:	4620      	mov	r0, r4
 8006796:	f000 fd9d 	bl	80072d4 <__mdiff>
 800679a:	68c2      	ldr	r2, [r0, #12]
 800679c:	9b08      	ldr	r3, [sp, #32]
 800679e:	4605      	mov	r5, r0
 80067a0:	bb02      	cbnz	r2, 80067e4 <_dtoa_r+0xa7c>
 80067a2:	4601      	mov	r1, r0
 80067a4:	4658      	mov	r0, fp
 80067a6:	f000 fd79 	bl	800729c <__mcmp>
 80067aa:	9b08      	ldr	r3, [sp, #32]
 80067ac:	4602      	mov	r2, r0
 80067ae:	4629      	mov	r1, r5
 80067b0:	4620      	mov	r0, r4
 80067b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80067b6:	f000 fb33 	bl	8006e20 <_Bfree>
 80067ba:	9b05      	ldr	r3, [sp, #20]
 80067bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067be:	9d01      	ldr	r5, [sp, #4]
 80067c0:	ea43 0102 	orr.w	r1, r3, r2
 80067c4:	9b06      	ldr	r3, [sp, #24]
 80067c6:	430b      	orrs	r3, r1
 80067c8:	9b08      	ldr	r3, [sp, #32]
 80067ca:	d10d      	bne.n	80067e8 <_dtoa_r+0xa80>
 80067cc:	2b39      	cmp	r3, #57	; 0x39
 80067ce:	d029      	beq.n	8006824 <_dtoa_r+0xabc>
 80067d0:	f1b9 0f00 	cmp.w	r9, #0
 80067d4:	dd01      	ble.n	80067da <_dtoa_r+0xa72>
 80067d6:	9b04      	ldr	r3, [sp, #16]
 80067d8:	3331      	adds	r3, #49	; 0x31
 80067da:	9a02      	ldr	r2, [sp, #8]
 80067dc:	7013      	strb	r3, [r2, #0]
 80067de:	e774      	b.n	80066ca <_dtoa_r+0x962>
 80067e0:	4638      	mov	r0, r7
 80067e2:	e7b9      	b.n	8006758 <_dtoa_r+0x9f0>
 80067e4:	2201      	movs	r2, #1
 80067e6:	e7e2      	b.n	80067ae <_dtoa_r+0xa46>
 80067e8:	f1b9 0f00 	cmp.w	r9, #0
 80067ec:	db06      	blt.n	80067fc <_dtoa_r+0xa94>
 80067ee:	9905      	ldr	r1, [sp, #20]
 80067f0:	ea41 0909 	orr.w	r9, r1, r9
 80067f4:	9906      	ldr	r1, [sp, #24]
 80067f6:	ea59 0101 	orrs.w	r1, r9, r1
 80067fa:	d120      	bne.n	800683e <_dtoa_r+0xad6>
 80067fc:	2a00      	cmp	r2, #0
 80067fe:	ddec      	ble.n	80067da <_dtoa_r+0xa72>
 8006800:	4659      	mov	r1, fp
 8006802:	2201      	movs	r2, #1
 8006804:	4620      	mov	r0, r4
 8006806:	9301      	str	r3, [sp, #4]
 8006808:	f000 fcdc 	bl	80071c4 <__lshift>
 800680c:	4631      	mov	r1, r6
 800680e:	4683      	mov	fp, r0
 8006810:	f000 fd44 	bl	800729c <__mcmp>
 8006814:	2800      	cmp	r0, #0
 8006816:	9b01      	ldr	r3, [sp, #4]
 8006818:	dc02      	bgt.n	8006820 <_dtoa_r+0xab8>
 800681a:	d1de      	bne.n	80067da <_dtoa_r+0xa72>
 800681c:	07da      	lsls	r2, r3, #31
 800681e:	d5dc      	bpl.n	80067da <_dtoa_r+0xa72>
 8006820:	2b39      	cmp	r3, #57	; 0x39
 8006822:	d1d8      	bne.n	80067d6 <_dtoa_r+0xa6e>
 8006824:	9a02      	ldr	r2, [sp, #8]
 8006826:	2339      	movs	r3, #57	; 0x39
 8006828:	7013      	strb	r3, [r2, #0]
 800682a:	462b      	mov	r3, r5
 800682c:	461d      	mov	r5, r3
 800682e:	3b01      	subs	r3, #1
 8006830:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006834:	2a39      	cmp	r2, #57	; 0x39
 8006836:	d050      	beq.n	80068da <_dtoa_r+0xb72>
 8006838:	3201      	adds	r2, #1
 800683a:	701a      	strb	r2, [r3, #0]
 800683c:	e745      	b.n	80066ca <_dtoa_r+0x962>
 800683e:	2a00      	cmp	r2, #0
 8006840:	dd03      	ble.n	800684a <_dtoa_r+0xae2>
 8006842:	2b39      	cmp	r3, #57	; 0x39
 8006844:	d0ee      	beq.n	8006824 <_dtoa_r+0xabc>
 8006846:	3301      	adds	r3, #1
 8006848:	e7c7      	b.n	80067da <_dtoa_r+0xa72>
 800684a:	9a01      	ldr	r2, [sp, #4]
 800684c:	9907      	ldr	r1, [sp, #28]
 800684e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006852:	428a      	cmp	r2, r1
 8006854:	d02a      	beq.n	80068ac <_dtoa_r+0xb44>
 8006856:	4659      	mov	r1, fp
 8006858:	2300      	movs	r3, #0
 800685a:	220a      	movs	r2, #10
 800685c:	4620      	mov	r0, r4
 800685e:	f000 fb01 	bl	8006e64 <__multadd>
 8006862:	45b8      	cmp	r8, r7
 8006864:	4683      	mov	fp, r0
 8006866:	f04f 0300 	mov.w	r3, #0
 800686a:	f04f 020a 	mov.w	r2, #10
 800686e:	4641      	mov	r1, r8
 8006870:	4620      	mov	r0, r4
 8006872:	d107      	bne.n	8006884 <_dtoa_r+0xb1c>
 8006874:	f000 faf6 	bl	8006e64 <__multadd>
 8006878:	4680      	mov	r8, r0
 800687a:	4607      	mov	r7, r0
 800687c:	9b01      	ldr	r3, [sp, #4]
 800687e:	3301      	adds	r3, #1
 8006880:	9301      	str	r3, [sp, #4]
 8006882:	e775      	b.n	8006770 <_dtoa_r+0xa08>
 8006884:	f000 faee 	bl	8006e64 <__multadd>
 8006888:	4639      	mov	r1, r7
 800688a:	4680      	mov	r8, r0
 800688c:	2300      	movs	r3, #0
 800688e:	220a      	movs	r2, #10
 8006890:	4620      	mov	r0, r4
 8006892:	f000 fae7 	bl	8006e64 <__multadd>
 8006896:	4607      	mov	r7, r0
 8006898:	e7f0      	b.n	800687c <_dtoa_r+0xb14>
 800689a:	f1b9 0f00 	cmp.w	r9, #0
 800689e:	9a00      	ldr	r2, [sp, #0]
 80068a0:	bfcc      	ite	gt
 80068a2:	464d      	movgt	r5, r9
 80068a4:	2501      	movle	r5, #1
 80068a6:	4415      	add	r5, r2
 80068a8:	f04f 0800 	mov.w	r8, #0
 80068ac:	4659      	mov	r1, fp
 80068ae:	2201      	movs	r2, #1
 80068b0:	4620      	mov	r0, r4
 80068b2:	9301      	str	r3, [sp, #4]
 80068b4:	f000 fc86 	bl	80071c4 <__lshift>
 80068b8:	4631      	mov	r1, r6
 80068ba:	4683      	mov	fp, r0
 80068bc:	f000 fcee 	bl	800729c <__mcmp>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	dcb2      	bgt.n	800682a <_dtoa_r+0xac2>
 80068c4:	d102      	bne.n	80068cc <_dtoa_r+0xb64>
 80068c6:	9b01      	ldr	r3, [sp, #4]
 80068c8:	07db      	lsls	r3, r3, #31
 80068ca:	d4ae      	bmi.n	800682a <_dtoa_r+0xac2>
 80068cc:	462b      	mov	r3, r5
 80068ce:	461d      	mov	r5, r3
 80068d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068d4:	2a30      	cmp	r2, #48	; 0x30
 80068d6:	d0fa      	beq.n	80068ce <_dtoa_r+0xb66>
 80068d8:	e6f7      	b.n	80066ca <_dtoa_r+0x962>
 80068da:	9a00      	ldr	r2, [sp, #0]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d1a5      	bne.n	800682c <_dtoa_r+0xac4>
 80068e0:	f10a 0a01 	add.w	sl, sl, #1
 80068e4:	2331      	movs	r3, #49	; 0x31
 80068e6:	e779      	b.n	80067dc <_dtoa_r+0xa74>
 80068e8:	4b13      	ldr	r3, [pc, #76]	; (8006938 <_dtoa_r+0xbd0>)
 80068ea:	f7ff baaf 	b.w	8005e4c <_dtoa_r+0xe4>
 80068ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f47f aa86 	bne.w	8005e02 <_dtoa_r+0x9a>
 80068f6:	4b11      	ldr	r3, [pc, #68]	; (800693c <_dtoa_r+0xbd4>)
 80068f8:	f7ff baa8 	b.w	8005e4c <_dtoa_r+0xe4>
 80068fc:	f1b9 0f00 	cmp.w	r9, #0
 8006900:	dc03      	bgt.n	800690a <_dtoa_r+0xba2>
 8006902:	9b05      	ldr	r3, [sp, #20]
 8006904:	2b02      	cmp	r3, #2
 8006906:	f73f aec9 	bgt.w	800669c <_dtoa_r+0x934>
 800690a:	9d00      	ldr	r5, [sp, #0]
 800690c:	4631      	mov	r1, r6
 800690e:	4658      	mov	r0, fp
 8006910:	f7ff f99f 	bl	8005c52 <quorem>
 8006914:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006918:	f805 3b01 	strb.w	r3, [r5], #1
 800691c:	9a00      	ldr	r2, [sp, #0]
 800691e:	1aaa      	subs	r2, r5, r2
 8006920:	4591      	cmp	r9, r2
 8006922:	ddba      	ble.n	800689a <_dtoa_r+0xb32>
 8006924:	4659      	mov	r1, fp
 8006926:	2300      	movs	r3, #0
 8006928:	220a      	movs	r2, #10
 800692a:	4620      	mov	r0, r4
 800692c:	f000 fa9a 	bl	8006e64 <__multadd>
 8006930:	4683      	mov	fp, r0
 8006932:	e7eb      	b.n	800690c <_dtoa_r+0xba4>
 8006934:	08007e40 	.word	0x08007e40
 8006938:	08007d99 	.word	0x08007d99
 800693c:	08007dbd 	.word	0x08007dbd

08006940 <__sflush_r>:
 8006940:	898a      	ldrh	r2, [r1, #12]
 8006942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006946:	4605      	mov	r5, r0
 8006948:	0710      	lsls	r0, r2, #28
 800694a:	460c      	mov	r4, r1
 800694c:	d458      	bmi.n	8006a00 <__sflush_r+0xc0>
 800694e:	684b      	ldr	r3, [r1, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	dc05      	bgt.n	8006960 <__sflush_r+0x20>
 8006954:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006956:	2b00      	cmp	r3, #0
 8006958:	dc02      	bgt.n	8006960 <__sflush_r+0x20>
 800695a:	2000      	movs	r0, #0
 800695c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006960:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006962:	2e00      	cmp	r6, #0
 8006964:	d0f9      	beq.n	800695a <__sflush_r+0x1a>
 8006966:	2300      	movs	r3, #0
 8006968:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800696c:	682f      	ldr	r7, [r5, #0]
 800696e:	602b      	str	r3, [r5, #0]
 8006970:	d032      	beq.n	80069d8 <__sflush_r+0x98>
 8006972:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006974:	89a3      	ldrh	r3, [r4, #12]
 8006976:	075a      	lsls	r2, r3, #29
 8006978:	d505      	bpl.n	8006986 <__sflush_r+0x46>
 800697a:	6863      	ldr	r3, [r4, #4]
 800697c:	1ac0      	subs	r0, r0, r3
 800697e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006980:	b10b      	cbz	r3, 8006986 <__sflush_r+0x46>
 8006982:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006984:	1ac0      	subs	r0, r0, r3
 8006986:	2300      	movs	r3, #0
 8006988:	4602      	mov	r2, r0
 800698a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800698c:	6a21      	ldr	r1, [r4, #32]
 800698e:	4628      	mov	r0, r5
 8006990:	47b0      	blx	r6
 8006992:	1c43      	adds	r3, r0, #1
 8006994:	89a3      	ldrh	r3, [r4, #12]
 8006996:	d106      	bne.n	80069a6 <__sflush_r+0x66>
 8006998:	6829      	ldr	r1, [r5, #0]
 800699a:	291d      	cmp	r1, #29
 800699c:	d82c      	bhi.n	80069f8 <__sflush_r+0xb8>
 800699e:	4a2a      	ldr	r2, [pc, #168]	; (8006a48 <__sflush_r+0x108>)
 80069a0:	40ca      	lsrs	r2, r1
 80069a2:	07d6      	lsls	r6, r2, #31
 80069a4:	d528      	bpl.n	80069f8 <__sflush_r+0xb8>
 80069a6:	2200      	movs	r2, #0
 80069a8:	6062      	str	r2, [r4, #4]
 80069aa:	04d9      	lsls	r1, r3, #19
 80069ac:	6922      	ldr	r2, [r4, #16]
 80069ae:	6022      	str	r2, [r4, #0]
 80069b0:	d504      	bpl.n	80069bc <__sflush_r+0x7c>
 80069b2:	1c42      	adds	r2, r0, #1
 80069b4:	d101      	bne.n	80069ba <__sflush_r+0x7a>
 80069b6:	682b      	ldr	r3, [r5, #0]
 80069b8:	b903      	cbnz	r3, 80069bc <__sflush_r+0x7c>
 80069ba:	6560      	str	r0, [r4, #84]	; 0x54
 80069bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069be:	602f      	str	r7, [r5, #0]
 80069c0:	2900      	cmp	r1, #0
 80069c2:	d0ca      	beq.n	800695a <__sflush_r+0x1a>
 80069c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069c8:	4299      	cmp	r1, r3
 80069ca:	d002      	beq.n	80069d2 <__sflush_r+0x92>
 80069cc:	4628      	mov	r0, r5
 80069ce:	f7fe f96d 	bl	8004cac <_free_r>
 80069d2:	2000      	movs	r0, #0
 80069d4:	6360      	str	r0, [r4, #52]	; 0x34
 80069d6:	e7c1      	b.n	800695c <__sflush_r+0x1c>
 80069d8:	6a21      	ldr	r1, [r4, #32]
 80069da:	2301      	movs	r3, #1
 80069dc:	4628      	mov	r0, r5
 80069de:	47b0      	blx	r6
 80069e0:	1c41      	adds	r1, r0, #1
 80069e2:	d1c7      	bne.n	8006974 <__sflush_r+0x34>
 80069e4:	682b      	ldr	r3, [r5, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d0c4      	beq.n	8006974 <__sflush_r+0x34>
 80069ea:	2b1d      	cmp	r3, #29
 80069ec:	d001      	beq.n	80069f2 <__sflush_r+0xb2>
 80069ee:	2b16      	cmp	r3, #22
 80069f0:	d101      	bne.n	80069f6 <__sflush_r+0xb6>
 80069f2:	602f      	str	r7, [r5, #0]
 80069f4:	e7b1      	b.n	800695a <__sflush_r+0x1a>
 80069f6:	89a3      	ldrh	r3, [r4, #12]
 80069f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069fc:	81a3      	strh	r3, [r4, #12]
 80069fe:	e7ad      	b.n	800695c <__sflush_r+0x1c>
 8006a00:	690f      	ldr	r7, [r1, #16]
 8006a02:	2f00      	cmp	r7, #0
 8006a04:	d0a9      	beq.n	800695a <__sflush_r+0x1a>
 8006a06:	0793      	lsls	r3, r2, #30
 8006a08:	680e      	ldr	r6, [r1, #0]
 8006a0a:	bf08      	it	eq
 8006a0c:	694b      	ldreq	r3, [r1, #20]
 8006a0e:	600f      	str	r7, [r1, #0]
 8006a10:	bf18      	it	ne
 8006a12:	2300      	movne	r3, #0
 8006a14:	eba6 0807 	sub.w	r8, r6, r7
 8006a18:	608b      	str	r3, [r1, #8]
 8006a1a:	f1b8 0f00 	cmp.w	r8, #0
 8006a1e:	dd9c      	ble.n	800695a <__sflush_r+0x1a>
 8006a20:	6a21      	ldr	r1, [r4, #32]
 8006a22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a24:	4643      	mov	r3, r8
 8006a26:	463a      	mov	r2, r7
 8006a28:	4628      	mov	r0, r5
 8006a2a:	47b0      	blx	r6
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	dc06      	bgt.n	8006a3e <__sflush_r+0xfe>
 8006a30:	89a3      	ldrh	r3, [r4, #12]
 8006a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a36:	81a3      	strh	r3, [r4, #12]
 8006a38:	f04f 30ff 	mov.w	r0, #4294967295
 8006a3c:	e78e      	b.n	800695c <__sflush_r+0x1c>
 8006a3e:	4407      	add	r7, r0
 8006a40:	eba8 0800 	sub.w	r8, r8, r0
 8006a44:	e7e9      	b.n	8006a1a <__sflush_r+0xda>
 8006a46:	bf00      	nop
 8006a48:	20400001 	.word	0x20400001

08006a4c <_fflush_r>:
 8006a4c:	b538      	push	{r3, r4, r5, lr}
 8006a4e:	690b      	ldr	r3, [r1, #16]
 8006a50:	4605      	mov	r5, r0
 8006a52:	460c      	mov	r4, r1
 8006a54:	b913      	cbnz	r3, 8006a5c <_fflush_r+0x10>
 8006a56:	2500      	movs	r5, #0
 8006a58:	4628      	mov	r0, r5
 8006a5a:	bd38      	pop	{r3, r4, r5, pc}
 8006a5c:	b118      	cbz	r0, 8006a66 <_fflush_r+0x1a>
 8006a5e:	6983      	ldr	r3, [r0, #24]
 8006a60:	b90b      	cbnz	r3, 8006a66 <_fflush_r+0x1a>
 8006a62:	f000 f887 	bl	8006b74 <__sinit>
 8006a66:	4b14      	ldr	r3, [pc, #80]	; (8006ab8 <_fflush_r+0x6c>)
 8006a68:	429c      	cmp	r4, r3
 8006a6a:	d11b      	bne.n	8006aa4 <_fflush_r+0x58>
 8006a6c:	686c      	ldr	r4, [r5, #4]
 8006a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d0ef      	beq.n	8006a56 <_fflush_r+0xa>
 8006a76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a78:	07d0      	lsls	r0, r2, #31
 8006a7a:	d404      	bmi.n	8006a86 <_fflush_r+0x3a>
 8006a7c:	0599      	lsls	r1, r3, #22
 8006a7e:	d402      	bmi.n	8006a86 <_fflush_r+0x3a>
 8006a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a82:	f000 f91a 	bl	8006cba <__retarget_lock_acquire_recursive>
 8006a86:	4628      	mov	r0, r5
 8006a88:	4621      	mov	r1, r4
 8006a8a:	f7ff ff59 	bl	8006940 <__sflush_r>
 8006a8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a90:	07da      	lsls	r2, r3, #31
 8006a92:	4605      	mov	r5, r0
 8006a94:	d4e0      	bmi.n	8006a58 <_fflush_r+0xc>
 8006a96:	89a3      	ldrh	r3, [r4, #12]
 8006a98:	059b      	lsls	r3, r3, #22
 8006a9a:	d4dd      	bmi.n	8006a58 <_fflush_r+0xc>
 8006a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a9e:	f000 f90d 	bl	8006cbc <__retarget_lock_release_recursive>
 8006aa2:	e7d9      	b.n	8006a58 <_fflush_r+0xc>
 8006aa4:	4b05      	ldr	r3, [pc, #20]	; (8006abc <_fflush_r+0x70>)
 8006aa6:	429c      	cmp	r4, r3
 8006aa8:	d101      	bne.n	8006aae <_fflush_r+0x62>
 8006aaa:	68ac      	ldr	r4, [r5, #8]
 8006aac:	e7df      	b.n	8006a6e <_fflush_r+0x22>
 8006aae:	4b04      	ldr	r3, [pc, #16]	; (8006ac0 <_fflush_r+0x74>)
 8006ab0:	429c      	cmp	r4, r3
 8006ab2:	bf08      	it	eq
 8006ab4:	68ec      	ldreq	r4, [r5, #12]
 8006ab6:	e7da      	b.n	8006a6e <_fflush_r+0x22>
 8006ab8:	08007e74 	.word	0x08007e74
 8006abc:	08007e94 	.word	0x08007e94
 8006ac0:	08007e54 	.word	0x08007e54

08006ac4 <std>:
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	b510      	push	{r4, lr}
 8006ac8:	4604      	mov	r4, r0
 8006aca:	e9c0 3300 	strd	r3, r3, [r0]
 8006ace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ad2:	6083      	str	r3, [r0, #8]
 8006ad4:	8181      	strh	r1, [r0, #12]
 8006ad6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ad8:	81c2      	strh	r2, [r0, #14]
 8006ada:	6183      	str	r3, [r0, #24]
 8006adc:	4619      	mov	r1, r3
 8006ade:	2208      	movs	r2, #8
 8006ae0:	305c      	adds	r0, #92	; 0x5c
 8006ae2:	f7fe f8db 	bl	8004c9c <memset>
 8006ae6:	4b05      	ldr	r3, [pc, #20]	; (8006afc <std+0x38>)
 8006ae8:	6263      	str	r3, [r4, #36]	; 0x24
 8006aea:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <std+0x3c>)
 8006aec:	62a3      	str	r3, [r4, #40]	; 0x28
 8006aee:	4b05      	ldr	r3, [pc, #20]	; (8006b04 <std+0x40>)
 8006af0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006af2:	4b05      	ldr	r3, [pc, #20]	; (8006b08 <std+0x44>)
 8006af4:	6224      	str	r4, [r4, #32]
 8006af6:	6323      	str	r3, [r4, #48]	; 0x30
 8006af8:	bd10      	pop	{r4, pc}
 8006afa:	bf00      	nop
 8006afc:	08007545 	.word	0x08007545
 8006b00:	08007567 	.word	0x08007567
 8006b04:	0800759f 	.word	0x0800759f
 8006b08:	080075c3 	.word	0x080075c3

08006b0c <_cleanup_r>:
 8006b0c:	4901      	ldr	r1, [pc, #4]	; (8006b14 <_cleanup_r+0x8>)
 8006b0e:	f000 b8af 	b.w	8006c70 <_fwalk_reent>
 8006b12:	bf00      	nop
 8006b14:	08006a4d 	.word	0x08006a4d

08006b18 <__sfmoreglue>:
 8006b18:	b570      	push	{r4, r5, r6, lr}
 8006b1a:	1e4a      	subs	r2, r1, #1
 8006b1c:	2568      	movs	r5, #104	; 0x68
 8006b1e:	4355      	muls	r5, r2
 8006b20:	460e      	mov	r6, r1
 8006b22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b26:	f7fe f911 	bl	8004d4c <_malloc_r>
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	b140      	cbz	r0, 8006b40 <__sfmoreglue+0x28>
 8006b2e:	2100      	movs	r1, #0
 8006b30:	e9c0 1600 	strd	r1, r6, [r0]
 8006b34:	300c      	adds	r0, #12
 8006b36:	60a0      	str	r0, [r4, #8]
 8006b38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b3c:	f7fe f8ae 	bl	8004c9c <memset>
 8006b40:	4620      	mov	r0, r4
 8006b42:	bd70      	pop	{r4, r5, r6, pc}

08006b44 <__sfp_lock_acquire>:
 8006b44:	4801      	ldr	r0, [pc, #4]	; (8006b4c <__sfp_lock_acquire+0x8>)
 8006b46:	f000 b8b8 	b.w	8006cba <__retarget_lock_acquire_recursive>
 8006b4a:	bf00      	nop
 8006b4c:	20000d6c 	.word	0x20000d6c

08006b50 <__sfp_lock_release>:
 8006b50:	4801      	ldr	r0, [pc, #4]	; (8006b58 <__sfp_lock_release+0x8>)
 8006b52:	f000 b8b3 	b.w	8006cbc <__retarget_lock_release_recursive>
 8006b56:	bf00      	nop
 8006b58:	20000d6c 	.word	0x20000d6c

08006b5c <__sinit_lock_acquire>:
 8006b5c:	4801      	ldr	r0, [pc, #4]	; (8006b64 <__sinit_lock_acquire+0x8>)
 8006b5e:	f000 b8ac 	b.w	8006cba <__retarget_lock_acquire_recursive>
 8006b62:	bf00      	nop
 8006b64:	20000d67 	.word	0x20000d67

08006b68 <__sinit_lock_release>:
 8006b68:	4801      	ldr	r0, [pc, #4]	; (8006b70 <__sinit_lock_release+0x8>)
 8006b6a:	f000 b8a7 	b.w	8006cbc <__retarget_lock_release_recursive>
 8006b6e:	bf00      	nop
 8006b70:	20000d67 	.word	0x20000d67

08006b74 <__sinit>:
 8006b74:	b510      	push	{r4, lr}
 8006b76:	4604      	mov	r4, r0
 8006b78:	f7ff fff0 	bl	8006b5c <__sinit_lock_acquire>
 8006b7c:	69a3      	ldr	r3, [r4, #24]
 8006b7e:	b11b      	cbz	r3, 8006b88 <__sinit+0x14>
 8006b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b84:	f7ff bff0 	b.w	8006b68 <__sinit_lock_release>
 8006b88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b8c:	6523      	str	r3, [r4, #80]	; 0x50
 8006b8e:	4b13      	ldr	r3, [pc, #76]	; (8006bdc <__sinit+0x68>)
 8006b90:	4a13      	ldr	r2, [pc, #76]	; (8006be0 <__sinit+0x6c>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b96:	42a3      	cmp	r3, r4
 8006b98:	bf04      	itt	eq
 8006b9a:	2301      	moveq	r3, #1
 8006b9c:	61a3      	streq	r3, [r4, #24]
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	f000 f820 	bl	8006be4 <__sfp>
 8006ba4:	6060      	str	r0, [r4, #4]
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f000 f81c 	bl	8006be4 <__sfp>
 8006bac:	60a0      	str	r0, [r4, #8]
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f000 f818 	bl	8006be4 <__sfp>
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	60e0      	str	r0, [r4, #12]
 8006bb8:	2104      	movs	r1, #4
 8006bba:	6860      	ldr	r0, [r4, #4]
 8006bbc:	f7ff ff82 	bl	8006ac4 <std>
 8006bc0:	68a0      	ldr	r0, [r4, #8]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	2109      	movs	r1, #9
 8006bc6:	f7ff ff7d 	bl	8006ac4 <std>
 8006bca:	68e0      	ldr	r0, [r4, #12]
 8006bcc:	2202      	movs	r2, #2
 8006bce:	2112      	movs	r1, #18
 8006bd0:	f7ff ff78 	bl	8006ac4 <std>
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	61a3      	str	r3, [r4, #24]
 8006bd8:	e7d2      	b.n	8006b80 <__sinit+0xc>
 8006bda:	bf00      	nop
 8006bdc:	08007d74 	.word	0x08007d74
 8006be0:	08006b0d 	.word	0x08006b0d

08006be4 <__sfp>:
 8006be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be6:	4607      	mov	r7, r0
 8006be8:	f7ff ffac 	bl	8006b44 <__sfp_lock_acquire>
 8006bec:	4b1e      	ldr	r3, [pc, #120]	; (8006c68 <__sfp+0x84>)
 8006bee:	681e      	ldr	r6, [r3, #0]
 8006bf0:	69b3      	ldr	r3, [r6, #24]
 8006bf2:	b913      	cbnz	r3, 8006bfa <__sfp+0x16>
 8006bf4:	4630      	mov	r0, r6
 8006bf6:	f7ff ffbd 	bl	8006b74 <__sinit>
 8006bfa:	3648      	adds	r6, #72	; 0x48
 8006bfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	d503      	bpl.n	8006c0c <__sfp+0x28>
 8006c04:	6833      	ldr	r3, [r6, #0]
 8006c06:	b30b      	cbz	r3, 8006c4c <__sfp+0x68>
 8006c08:	6836      	ldr	r6, [r6, #0]
 8006c0a:	e7f7      	b.n	8006bfc <__sfp+0x18>
 8006c0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c10:	b9d5      	cbnz	r5, 8006c48 <__sfp+0x64>
 8006c12:	4b16      	ldr	r3, [pc, #88]	; (8006c6c <__sfp+0x88>)
 8006c14:	60e3      	str	r3, [r4, #12]
 8006c16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c1a:	6665      	str	r5, [r4, #100]	; 0x64
 8006c1c:	f000 f84c 	bl	8006cb8 <__retarget_lock_init_recursive>
 8006c20:	f7ff ff96 	bl	8006b50 <__sfp_lock_release>
 8006c24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c2c:	6025      	str	r5, [r4, #0]
 8006c2e:	61a5      	str	r5, [r4, #24]
 8006c30:	2208      	movs	r2, #8
 8006c32:	4629      	mov	r1, r5
 8006c34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c38:	f7fe f830 	bl	8004c9c <memset>
 8006c3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c44:	4620      	mov	r0, r4
 8006c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c48:	3468      	adds	r4, #104	; 0x68
 8006c4a:	e7d9      	b.n	8006c00 <__sfp+0x1c>
 8006c4c:	2104      	movs	r1, #4
 8006c4e:	4638      	mov	r0, r7
 8006c50:	f7ff ff62 	bl	8006b18 <__sfmoreglue>
 8006c54:	4604      	mov	r4, r0
 8006c56:	6030      	str	r0, [r6, #0]
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	d1d5      	bne.n	8006c08 <__sfp+0x24>
 8006c5c:	f7ff ff78 	bl	8006b50 <__sfp_lock_release>
 8006c60:	230c      	movs	r3, #12
 8006c62:	603b      	str	r3, [r7, #0]
 8006c64:	e7ee      	b.n	8006c44 <__sfp+0x60>
 8006c66:	bf00      	nop
 8006c68:	08007d74 	.word	0x08007d74
 8006c6c:	ffff0001 	.word	0xffff0001

08006c70 <_fwalk_reent>:
 8006c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c74:	4606      	mov	r6, r0
 8006c76:	4688      	mov	r8, r1
 8006c78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c7c:	2700      	movs	r7, #0
 8006c7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c82:	f1b9 0901 	subs.w	r9, r9, #1
 8006c86:	d505      	bpl.n	8006c94 <_fwalk_reent+0x24>
 8006c88:	6824      	ldr	r4, [r4, #0]
 8006c8a:	2c00      	cmp	r4, #0
 8006c8c:	d1f7      	bne.n	8006c7e <_fwalk_reent+0xe>
 8006c8e:	4638      	mov	r0, r7
 8006c90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c94:	89ab      	ldrh	r3, [r5, #12]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d907      	bls.n	8006caa <_fwalk_reent+0x3a>
 8006c9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	d003      	beq.n	8006caa <_fwalk_reent+0x3a>
 8006ca2:	4629      	mov	r1, r5
 8006ca4:	4630      	mov	r0, r6
 8006ca6:	47c0      	blx	r8
 8006ca8:	4307      	orrs	r7, r0
 8006caa:	3568      	adds	r5, #104	; 0x68
 8006cac:	e7e9      	b.n	8006c82 <_fwalk_reent+0x12>
	...

08006cb0 <_localeconv_r>:
 8006cb0:	4800      	ldr	r0, [pc, #0]	; (8006cb4 <_localeconv_r+0x4>)
 8006cb2:	4770      	bx	lr
 8006cb4:	20000178 	.word	0x20000178

08006cb8 <__retarget_lock_init_recursive>:
 8006cb8:	4770      	bx	lr

08006cba <__retarget_lock_acquire_recursive>:
 8006cba:	4770      	bx	lr

08006cbc <__retarget_lock_release_recursive>:
 8006cbc:	4770      	bx	lr

08006cbe <__swhatbuf_r>:
 8006cbe:	b570      	push	{r4, r5, r6, lr}
 8006cc0:	460e      	mov	r6, r1
 8006cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cc6:	2900      	cmp	r1, #0
 8006cc8:	b096      	sub	sp, #88	; 0x58
 8006cca:	4614      	mov	r4, r2
 8006ccc:	461d      	mov	r5, r3
 8006cce:	da07      	bge.n	8006ce0 <__swhatbuf_r+0x22>
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	602b      	str	r3, [r5, #0]
 8006cd4:	89b3      	ldrh	r3, [r6, #12]
 8006cd6:	061a      	lsls	r2, r3, #24
 8006cd8:	d410      	bmi.n	8006cfc <__swhatbuf_r+0x3e>
 8006cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cde:	e00e      	b.n	8006cfe <__swhatbuf_r+0x40>
 8006ce0:	466a      	mov	r2, sp
 8006ce2:	f000 fc95 	bl	8007610 <_fstat_r>
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	dbf2      	blt.n	8006cd0 <__swhatbuf_r+0x12>
 8006cea:	9a01      	ldr	r2, [sp, #4]
 8006cec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006cf0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006cf4:	425a      	negs	r2, r3
 8006cf6:	415a      	adcs	r2, r3
 8006cf8:	602a      	str	r2, [r5, #0]
 8006cfa:	e7ee      	b.n	8006cda <__swhatbuf_r+0x1c>
 8006cfc:	2340      	movs	r3, #64	; 0x40
 8006cfe:	2000      	movs	r0, #0
 8006d00:	6023      	str	r3, [r4, #0]
 8006d02:	b016      	add	sp, #88	; 0x58
 8006d04:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d08 <__smakebuf_r>:
 8006d08:	898b      	ldrh	r3, [r1, #12]
 8006d0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d0c:	079d      	lsls	r5, r3, #30
 8006d0e:	4606      	mov	r6, r0
 8006d10:	460c      	mov	r4, r1
 8006d12:	d507      	bpl.n	8006d24 <__smakebuf_r+0x1c>
 8006d14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	6123      	str	r3, [r4, #16]
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	6163      	str	r3, [r4, #20]
 8006d20:	b002      	add	sp, #8
 8006d22:	bd70      	pop	{r4, r5, r6, pc}
 8006d24:	ab01      	add	r3, sp, #4
 8006d26:	466a      	mov	r2, sp
 8006d28:	f7ff ffc9 	bl	8006cbe <__swhatbuf_r>
 8006d2c:	9900      	ldr	r1, [sp, #0]
 8006d2e:	4605      	mov	r5, r0
 8006d30:	4630      	mov	r0, r6
 8006d32:	f7fe f80b 	bl	8004d4c <_malloc_r>
 8006d36:	b948      	cbnz	r0, 8006d4c <__smakebuf_r+0x44>
 8006d38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d3c:	059a      	lsls	r2, r3, #22
 8006d3e:	d4ef      	bmi.n	8006d20 <__smakebuf_r+0x18>
 8006d40:	f023 0303 	bic.w	r3, r3, #3
 8006d44:	f043 0302 	orr.w	r3, r3, #2
 8006d48:	81a3      	strh	r3, [r4, #12]
 8006d4a:	e7e3      	b.n	8006d14 <__smakebuf_r+0xc>
 8006d4c:	4b0d      	ldr	r3, [pc, #52]	; (8006d84 <__smakebuf_r+0x7c>)
 8006d4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d50:	89a3      	ldrh	r3, [r4, #12]
 8006d52:	6020      	str	r0, [r4, #0]
 8006d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d58:	81a3      	strh	r3, [r4, #12]
 8006d5a:	9b00      	ldr	r3, [sp, #0]
 8006d5c:	6163      	str	r3, [r4, #20]
 8006d5e:	9b01      	ldr	r3, [sp, #4]
 8006d60:	6120      	str	r0, [r4, #16]
 8006d62:	b15b      	cbz	r3, 8006d7c <__smakebuf_r+0x74>
 8006d64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d68:	4630      	mov	r0, r6
 8006d6a:	f000 fc63 	bl	8007634 <_isatty_r>
 8006d6e:	b128      	cbz	r0, 8006d7c <__smakebuf_r+0x74>
 8006d70:	89a3      	ldrh	r3, [r4, #12]
 8006d72:	f023 0303 	bic.w	r3, r3, #3
 8006d76:	f043 0301 	orr.w	r3, r3, #1
 8006d7a:	81a3      	strh	r3, [r4, #12]
 8006d7c:	89a0      	ldrh	r0, [r4, #12]
 8006d7e:	4305      	orrs	r5, r0
 8006d80:	81a5      	strh	r5, [r4, #12]
 8006d82:	e7cd      	b.n	8006d20 <__smakebuf_r+0x18>
 8006d84:	08006b0d 	.word	0x08006b0d

08006d88 <__malloc_lock>:
 8006d88:	4801      	ldr	r0, [pc, #4]	; (8006d90 <__malloc_lock+0x8>)
 8006d8a:	f7ff bf96 	b.w	8006cba <__retarget_lock_acquire_recursive>
 8006d8e:	bf00      	nop
 8006d90:	20000d68 	.word	0x20000d68

08006d94 <__malloc_unlock>:
 8006d94:	4801      	ldr	r0, [pc, #4]	; (8006d9c <__malloc_unlock+0x8>)
 8006d96:	f7ff bf91 	b.w	8006cbc <__retarget_lock_release_recursive>
 8006d9a:	bf00      	nop
 8006d9c:	20000d68 	.word	0x20000d68

08006da0 <_Balloc>:
 8006da0:	b570      	push	{r4, r5, r6, lr}
 8006da2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006da4:	4604      	mov	r4, r0
 8006da6:	460d      	mov	r5, r1
 8006da8:	b976      	cbnz	r6, 8006dc8 <_Balloc+0x28>
 8006daa:	2010      	movs	r0, #16
 8006dac:	f7fd ff60 	bl	8004c70 <malloc>
 8006db0:	4602      	mov	r2, r0
 8006db2:	6260      	str	r0, [r4, #36]	; 0x24
 8006db4:	b920      	cbnz	r0, 8006dc0 <_Balloc+0x20>
 8006db6:	4b18      	ldr	r3, [pc, #96]	; (8006e18 <_Balloc+0x78>)
 8006db8:	4818      	ldr	r0, [pc, #96]	; (8006e1c <_Balloc+0x7c>)
 8006dba:	2166      	movs	r1, #102	; 0x66
 8006dbc:	f7fd fefe 	bl	8004bbc <__assert_func>
 8006dc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dc4:	6006      	str	r6, [r0, #0]
 8006dc6:	60c6      	str	r6, [r0, #12]
 8006dc8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006dca:	68f3      	ldr	r3, [r6, #12]
 8006dcc:	b183      	cbz	r3, 8006df0 <_Balloc+0x50>
 8006dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006dd6:	b9b8      	cbnz	r0, 8006e08 <_Balloc+0x68>
 8006dd8:	2101      	movs	r1, #1
 8006dda:	fa01 f605 	lsl.w	r6, r1, r5
 8006dde:	1d72      	adds	r2, r6, #5
 8006de0:	0092      	lsls	r2, r2, #2
 8006de2:	4620      	mov	r0, r4
 8006de4:	f000 fb5a 	bl	800749c <_calloc_r>
 8006de8:	b160      	cbz	r0, 8006e04 <_Balloc+0x64>
 8006dea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006dee:	e00e      	b.n	8006e0e <_Balloc+0x6e>
 8006df0:	2221      	movs	r2, #33	; 0x21
 8006df2:	2104      	movs	r1, #4
 8006df4:	4620      	mov	r0, r4
 8006df6:	f000 fb51 	bl	800749c <_calloc_r>
 8006dfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dfc:	60f0      	str	r0, [r6, #12]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1e4      	bne.n	8006dce <_Balloc+0x2e>
 8006e04:	2000      	movs	r0, #0
 8006e06:	bd70      	pop	{r4, r5, r6, pc}
 8006e08:	6802      	ldr	r2, [r0, #0]
 8006e0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e0e:	2300      	movs	r3, #0
 8006e10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e14:	e7f7      	b.n	8006e06 <_Balloc+0x66>
 8006e16:	bf00      	nop
 8006e18:	08007dca 	.word	0x08007dca
 8006e1c:	08007eb4 	.word	0x08007eb4

08006e20 <_Bfree>:
 8006e20:	b570      	push	{r4, r5, r6, lr}
 8006e22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e24:	4605      	mov	r5, r0
 8006e26:	460c      	mov	r4, r1
 8006e28:	b976      	cbnz	r6, 8006e48 <_Bfree+0x28>
 8006e2a:	2010      	movs	r0, #16
 8006e2c:	f7fd ff20 	bl	8004c70 <malloc>
 8006e30:	4602      	mov	r2, r0
 8006e32:	6268      	str	r0, [r5, #36]	; 0x24
 8006e34:	b920      	cbnz	r0, 8006e40 <_Bfree+0x20>
 8006e36:	4b09      	ldr	r3, [pc, #36]	; (8006e5c <_Bfree+0x3c>)
 8006e38:	4809      	ldr	r0, [pc, #36]	; (8006e60 <_Bfree+0x40>)
 8006e3a:	218a      	movs	r1, #138	; 0x8a
 8006e3c:	f7fd febe 	bl	8004bbc <__assert_func>
 8006e40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e44:	6006      	str	r6, [r0, #0]
 8006e46:	60c6      	str	r6, [r0, #12]
 8006e48:	b13c      	cbz	r4, 8006e5a <_Bfree+0x3a>
 8006e4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e4c:	6862      	ldr	r2, [r4, #4]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e54:	6021      	str	r1, [r4, #0]
 8006e56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e5a:	bd70      	pop	{r4, r5, r6, pc}
 8006e5c:	08007dca 	.word	0x08007dca
 8006e60:	08007eb4 	.word	0x08007eb4

08006e64 <__multadd>:
 8006e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e68:	690e      	ldr	r6, [r1, #16]
 8006e6a:	4607      	mov	r7, r0
 8006e6c:	4698      	mov	r8, r3
 8006e6e:	460c      	mov	r4, r1
 8006e70:	f101 0014 	add.w	r0, r1, #20
 8006e74:	2300      	movs	r3, #0
 8006e76:	6805      	ldr	r5, [r0, #0]
 8006e78:	b2a9      	uxth	r1, r5
 8006e7a:	fb02 8101 	mla	r1, r2, r1, r8
 8006e7e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006e82:	0c2d      	lsrs	r5, r5, #16
 8006e84:	fb02 c505 	mla	r5, r2, r5, ip
 8006e88:	b289      	uxth	r1, r1
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006e90:	429e      	cmp	r6, r3
 8006e92:	f840 1b04 	str.w	r1, [r0], #4
 8006e96:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006e9a:	dcec      	bgt.n	8006e76 <__multadd+0x12>
 8006e9c:	f1b8 0f00 	cmp.w	r8, #0
 8006ea0:	d022      	beq.n	8006ee8 <__multadd+0x84>
 8006ea2:	68a3      	ldr	r3, [r4, #8]
 8006ea4:	42b3      	cmp	r3, r6
 8006ea6:	dc19      	bgt.n	8006edc <__multadd+0x78>
 8006ea8:	6861      	ldr	r1, [r4, #4]
 8006eaa:	4638      	mov	r0, r7
 8006eac:	3101      	adds	r1, #1
 8006eae:	f7ff ff77 	bl	8006da0 <_Balloc>
 8006eb2:	4605      	mov	r5, r0
 8006eb4:	b928      	cbnz	r0, 8006ec2 <__multadd+0x5e>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	4b0d      	ldr	r3, [pc, #52]	; (8006ef0 <__multadd+0x8c>)
 8006eba:	480e      	ldr	r0, [pc, #56]	; (8006ef4 <__multadd+0x90>)
 8006ebc:	21b5      	movs	r1, #181	; 0xb5
 8006ebe:	f7fd fe7d 	bl	8004bbc <__assert_func>
 8006ec2:	6922      	ldr	r2, [r4, #16]
 8006ec4:	3202      	adds	r2, #2
 8006ec6:	f104 010c 	add.w	r1, r4, #12
 8006eca:	0092      	lsls	r2, r2, #2
 8006ecc:	300c      	adds	r0, #12
 8006ece:	f7fd fed7 	bl	8004c80 <memcpy>
 8006ed2:	4621      	mov	r1, r4
 8006ed4:	4638      	mov	r0, r7
 8006ed6:	f7ff ffa3 	bl	8006e20 <_Bfree>
 8006eda:	462c      	mov	r4, r5
 8006edc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006ee0:	3601      	adds	r6, #1
 8006ee2:	f8c3 8014 	str.w	r8, [r3, #20]
 8006ee6:	6126      	str	r6, [r4, #16]
 8006ee8:	4620      	mov	r0, r4
 8006eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eee:	bf00      	nop
 8006ef0:	08007e40 	.word	0x08007e40
 8006ef4:	08007eb4 	.word	0x08007eb4

08006ef8 <__hi0bits>:
 8006ef8:	0c03      	lsrs	r3, r0, #16
 8006efa:	041b      	lsls	r3, r3, #16
 8006efc:	b9d3      	cbnz	r3, 8006f34 <__hi0bits+0x3c>
 8006efe:	0400      	lsls	r0, r0, #16
 8006f00:	2310      	movs	r3, #16
 8006f02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006f06:	bf04      	itt	eq
 8006f08:	0200      	lsleq	r0, r0, #8
 8006f0a:	3308      	addeq	r3, #8
 8006f0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006f10:	bf04      	itt	eq
 8006f12:	0100      	lsleq	r0, r0, #4
 8006f14:	3304      	addeq	r3, #4
 8006f16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006f1a:	bf04      	itt	eq
 8006f1c:	0080      	lsleq	r0, r0, #2
 8006f1e:	3302      	addeq	r3, #2
 8006f20:	2800      	cmp	r0, #0
 8006f22:	db05      	blt.n	8006f30 <__hi0bits+0x38>
 8006f24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006f28:	f103 0301 	add.w	r3, r3, #1
 8006f2c:	bf08      	it	eq
 8006f2e:	2320      	moveq	r3, #32
 8006f30:	4618      	mov	r0, r3
 8006f32:	4770      	bx	lr
 8006f34:	2300      	movs	r3, #0
 8006f36:	e7e4      	b.n	8006f02 <__hi0bits+0xa>

08006f38 <__lo0bits>:
 8006f38:	6803      	ldr	r3, [r0, #0]
 8006f3a:	f013 0207 	ands.w	r2, r3, #7
 8006f3e:	4601      	mov	r1, r0
 8006f40:	d00b      	beq.n	8006f5a <__lo0bits+0x22>
 8006f42:	07da      	lsls	r2, r3, #31
 8006f44:	d424      	bmi.n	8006f90 <__lo0bits+0x58>
 8006f46:	0798      	lsls	r0, r3, #30
 8006f48:	bf49      	itett	mi
 8006f4a:	085b      	lsrmi	r3, r3, #1
 8006f4c:	089b      	lsrpl	r3, r3, #2
 8006f4e:	2001      	movmi	r0, #1
 8006f50:	600b      	strmi	r3, [r1, #0]
 8006f52:	bf5c      	itt	pl
 8006f54:	600b      	strpl	r3, [r1, #0]
 8006f56:	2002      	movpl	r0, #2
 8006f58:	4770      	bx	lr
 8006f5a:	b298      	uxth	r0, r3
 8006f5c:	b9b0      	cbnz	r0, 8006f8c <__lo0bits+0x54>
 8006f5e:	0c1b      	lsrs	r3, r3, #16
 8006f60:	2010      	movs	r0, #16
 8006f62:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006f66:	bf04      	itt	eq
 8006f68:	0a1b      	lsreq	r3, r3, #8
 8006f6a:	3008      	addeq	r0, #8
 8006f6c:	071a      	lsls	r2, r3, #28
 8006f6e:	bf04      	itt	eq
 8006f70:	091b      	lsreq	r3, r3, #4
 8006f72:	3004      	addeq	r0, #4
 8006f74:	079a      	lsls	r2, r3, #30
 8006f76:	bf04      	itt	eq
 8006f78:	089b      	lsreq	r3, r3, #2
 8006f7a:	3002      	addeq	r0, #2
 8006f7c:	07da      	lsls	r2, r3, #31
 8006f7e:	d403      	bmi.n	8006f88 <__lo0bits+0x50>
 8006f80:	085b      	lsrs	r3, r3, #1
 8006f82:	f100 0001 	add.w	r0, r0, #1
 8006f86:	d005      	beq.n	8006f94 <__lo0bits+0x5c>
 8006f88:	600b      	str	r3, [r1, #0]
 8006f8a:	4770      	bx	lr
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	e7e8      	b.n	8006f62 <__lo0bits+0x2a>
 8006f90:	2000      	movs	r0, #0
 8006f92:	4770      	bx	lr
 8006f94:	2020      	movs	r0, #32
 8006f96:	4770      	bx	lr

08006f98 <__i2b>:
 8006f98:	b510      	push	{r4, lr}
 8006f9a:	460c      	mov	r4, r1
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	f7ff feff 	bl	8006da0 <_Balloc>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	b928      	cbnz	r0, 8006fb2 <__i2b+0x1a>
 8006fa6:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <__i2b+0x24>)
 8006fa8:	4805      	ldr	r0, [pc, #20]	; (8006fc0 <__i2b+0x28>)
 8006faa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006fae:	f7fd fe05 	bl	8004bbc <__assert_func>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	6144      	str	r4, [r0, #20]
 8006fb6:	6103      	str	r3, [r0, #16]
 8006fb8:	bd10      	pop	{r4, pc}
 8006fba:	bf00      	nop
 8006fbc:	08007e40 	.word	0x08007e40
 8006fc0:	08007eb4 	.word	0x08007eb4

08006fc4 <__multiply>:
 8006fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc8:	4614      	mov	r4, r2
 8006fca:	690a      	ldr	r2, [r1, #16]
 8006fcc:	6923      	ldr	r3, [r4, #16]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	bfb8      	it	lt
 8006fd2:	460b      	movlt	r3, r1
 8006fd4:	460d      	mov	r5, r1
 8006fd6:	bfbc      	itt	lt
 8006fd8:	4625      	movlt	r5, r4
 8006fda:	461c      	movlt	r4, r3
 8006fdc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006fe0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006fe4:	68ab      	ldr	r3, [r5, #8]
 8006fe6:	6869      	ldr	r1, [r5, #4]
 8006fe8:	eb0a 0709 	add.w	r7, sl, r9
 8006fec:	42bb      	cmp	r3, r7
 8006fee:	b085      	sub	sp, #20
 8006ff0:	bfb8      	it	lt
 8006ff2:	3101      	addlt	r1, #1
 8006ff4:	f7ff fed4 	bl	8006da0 <_Balloc>
 8006ff8:	b930      	cbnz	r0, 8007008 <__multiply+0x44>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	4b42      	ldr	r3, [pc, #264]	; (8007108 <__multiply+0x144>)
 8006ffe:	4843      	ldr	r0, [pc, #268]	; (800710c <__multiply+0x148>)
 8007000:	f240 115d 	movw	r1, #349	; 0x15d
 8007004:	f7fd fdda 	bl	8004bbc <__assert_func>
 8007008:	f100 0614 	add.w	r6, r0, #20
 800700c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007010:	4633      	mov	r3, r6
 8007012:	2200      	movs	r2, #0
 8007014:	4543      	cmp	r3, r8
 8007016:	d31e      	bcc.n	8007056 <__multiply+0x92>
 8007018:	f105 0c14 	add.w	ip, r5, #20
 800701c:	f104 0314 	add.w	r3, r4, #20
 8007020:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007024:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007028:	9202      	str	r2, [sp, #8]
 800702a:	ebac 0205 	sub.w	r2, ip, r5
 800702e:	3a15      	subs	r2, #21
 8007030:	f022 0203 	bic.w	r2, r2, #3
 8007034:	3204      	adds	r2, #4
 8007036:	f105 0115 	add.w	r1, r5, #21
 800703a:	458c      	cmp	ip, r1
 800703c:	bf38      	it	cc
 800703e:	2204      	movcc	r2, #4
 8007040:	9201      	str	r2, [sp, #4]
 8007042:	9a02      	ldr	r2, [sp, #8]
 8007044:	9303      	str	r3, [sp, #12]
 8007046:	429a      	cmp	r2, r3
 8007048:	d808      	bhi.n	800705c <__multiply+0x98>
 800704a:	2f00      	cmp	r7, #0
 800704c:	dc55      	bgt.n	80070fa <__multiply+0x136>
 800704e:	6107      	str	r7, [r0, #16]
 8007050:	b005      	add	sp, #20
 8007052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007056:	f843 2b04 	str.w	r2, [r3], #4
 800705a:	e7db      	b.n	8007014 <__multiply+0x50>
 800705c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007060:	f1ba 0f00 	cmp.w	sl, #0
 8007064:	d020      	beq.n	80070a8 <__multiply+0xe4>
 8007066:	f105 0e14 	add.w	lr, r5, #20
 800706a:	46b1      	mov	r9, r6
 800706c:	2200      	movs	r2, #0
 800706e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007072:	f8d9 b000 	ldr.w	fp, [r9]
 8007076:	b2a1      	uxth	r1, r4
 8007078:	fa1f fb8b 	uxth.w	fp, fp
 800707c:	fb0a b101 	mla	r1, sl, r1, fp
 8007080:	4411      	add	r1, r2
 8007082:	f8d9 2000 	ldr.w	r2, [r9]
 8007086:	0c24      	lsrs	r4, r4, #16
 8007088:	0c12      	lsrs	r2, r2, #16
 800708a:	fb0a 2404 	mla	r4, sl, r4, r2
 800708e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007092:	b289      	uxth	r1, r1
 8007094:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007098:	45f4      	cmp	ip, lr
 800709a:	f849 1b04 	str.w	r1, [r9], #4
 800709e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80070a2:	d8e4      	bhi.n	800706e <__multiply+0xaa>
 80070a4:	9901      	ldr	r1, [sp, #4]
 80070a6:	5072      	str	r2, [r6, r1]
 80070a8:	9a03      	ldr	r2, [sp, #12]
 80070aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80070ae:	3304      	adds	r3, #4
 80070b0:	f1b9 0f00 	cmp.w	r9, #0
 80070b4:	d01f      	beq.n	80070f6 <__multiply+0x132>
 80070b6:	6834      	ldr	r4, [r6, #0]
 80070b8:	f105 0114 	add.w	r1, r5, #20
 80070bc:	46b6      	mov	lr, r6
 80070be:	f04f 0a00 	mov.w	sl, #0
 80070c2:	880a      	ldrh	r2, [r1, #0]
 80070c4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80070c8:	fb09 b202 	mla	r2, r9, r2, fp
 80070cc:	4492      	add	sl, r2
 80070ce:	b2a4      	uxth	r4, r4
 80070d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80070d4:	f84e 4b04 	str.w	r4, [lr], #4
 80070d8:	f851 4b04 	ldr.w	r4, [r1], #4
 80070dc:	f8be 2000 	ldrh.w	r2, [lr]
 80070e0:	0c24      	lsrs	r4, r4, #16
 80070e2:	fb09 2404 	mla	r4, r9, r4, r2
 80070e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80070ea:	458c      	cmp	ip, r1
 80070ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80070f0:	d8e7      	bhi.n	80070c2 <__multiply+0xfe>
 80070f2:	9a01      	ldr	r2, [sp, #4]
 80070f4:	50b4      	str	r4, [r6, r2]
 80070f6:	3604      	adds	r6, #4
 80070f8:	e7a3      	b.n	8007042 <__multiply+0x7e>
 80070fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1a5      	bne.n	800704e <__multiply+0x8a>
 8007102:	3f01      	subs	r7, #1
 8007104:	e7a1      	b.n	800704a <__multiply+0x86>
 8007106:	bf00      	nop
 8007108:	08007e40 	.word	0x08007e40
 800710c:	08007eb4 	.word	0x08007eb4

08007110 <__pow5mult>:
 8007110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007114:	4615      	mov	r5, r2
 8007116:	f012 0203 	ands.w	r2, r2, #3
 800711a:	4606      	mov	r6, r0
 800711c:	460f      	mov	r7, r1
 800711e:	d007      	beq.n	8007130 <__pow5mult+0x20>
 8007120:	4c25      	ldr	r4, [pc, #148]	; (80071b8 <__pow5mult+0xa8>)
 8007122:	3a01      	subs	r2, #1
 8007124:	2300      	movs	r3, #0
 8007126:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800712a:	f7ff fe9b 	bl	8006e64 <__multadd>
 800712e:	4607      	mov	r7, r0
 8007130:	10ad      	asrs	r5, r5, #2
 8007132:	d03d      	beq.n	80071b0 <__pow5mult+0xa0>
 8007134:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007136:	b97c      	cbnz	r4, 8007158 <__pow5mult+0x48>
 8007138:	2010      	movs	r0, #16
 800713a:	f7fd fd99 	bl	8004c70 <malloc>
 800713e:	4602      	mov	r2, r0
 8007140:	6270      	str	r0, [r6, #36]	; 0x24
 8007142:	b928      	cbnz	r0, 8007150 <__pow5mult+0x40>
 8007144:	4b1d      	ldr	r3, [pc, #116]	; (80071bc <__pow5mult+0xac>)
 8007146:	481e      	ldr	r0, [pc, #120]	; (80071c0 <__pow5mult+0xb0>)
 8007148:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800714c:	f7fd fd36 	bl	8004bbc <__assert_func>
 8007150:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007154:	6004      	str	r4, [r0, #0]
 8007156:	60c4      	str	r4, [r0, #12]
 8007158:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800715c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007160:	b94c      	cbnz	r4, 8007176 <__pow5mult+0x66>
 8007162:	f240 2171 	movw	r1, #625	; 0x271
 8007166:	4630      	mov	r0, r6
 8007168:	f7ff ff16 	bl	8006f98 <__i2b>
 800716c:	2300      	movs	r3, #0
 800716e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007172:	4604      	mov	r4, r0
 8007174:	6003      	str	r3, [r0, #0]
 8007176:	f04f 0900 	mov.w	r9, #0
 800717a:	07eb      	lsls	r3, r5, #31
 800717c:	d50a      	bpl.n	8007194 <__pow5mult+0x84>
 800717e:	4639      	mov	r1, r7
 8007180:	4622      	mov	r2, r4
 8007182:	4630      	mov	r0, r6
 8007184:	f7ff ff1e 	bl	8006fc4 <__multiply>
 8007188:	4639      	mov	r1, r7
 800718a:	4680      	mov	r8, r0
 800718c:	4630      	mov	r0, r6
 800718e:	f7ff fe47 	bl	8006e20 <_Bfree>
 8007192:	4647      	mov	r7, r8
 8007194:	106d      	asrs	r5, r5, #1
 8007196:	d00b      	beq.n	80071b0 <__pow5mult+0xa0>
 8007198:	6820      	ldr	r0, [r4, #0]
 800719a:	b938      	cbnz	r0, 80071ac <__pow5mult+0x9c>
 800719c:	4622      	mov	r2, r4
 800719e:	4621      	mov	r1, r4
 80071a0:	4630      	mov	r0, r6
 80071a2:	f7ff ff0f 	bl	8006fc4 <__multiply>
 80071a6:	6020      	str	r0, [r4, #0]
 80071a8:	f8c0 9000 	str.w	r9, [r0]
 80071ac:	4604      	mov	r4, r0
 80071ae:	e7e4      	b.n	800717a <__pow5mult+0x6a>
 80071b0:	4638      	mov	r0, r7
 80071b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071b6:	bf00      	nop
 80071b8:	08008008 	.word	0x08008008
 80071bc:	08007dca 	.word	0x08007dca
 80071c0:	08007eb4 	.word	0x08007eb4

080071c4 <__lshift>:
 80071c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071c8:	460c      	mov	r4, r1
 80071ca:	6849      	ldr	r1, [r1, #4]
 80071cc:	6923      	ldr	r3, [r4, #16]
 80071ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071d2:	68a3      	ldr	r3, [r4, #8]
 80071d4:	4607      	mov	r7, r0
 80071d6:	4691      	mov	r9, r2
 80071d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071dc:	f108 0601 	add.w	r6, r8, #1
 80071e0:	42b3      	cmp	r3, r6
 80071e2:	db0b      	blt.n	80071fc <__lshift+0x38>
 80071e4:	4638      	mov	r0, r7
 80071e6:	f7ff fddb 	bl	8006da0 <_Balloc>
 80071ea:	4605      	mov	r5, r0
 80071ec:	b948      	cbnz	r0, 8007202 <__lshift+0x3e>
 80071ee:	4602      	mov	r2, r0
 80071f0:	4b28      	ldr	r3, [pc, #160]	; (8007294 <__lshift+0xd0>)
 80071f2:	4829      	ldr	r0, [pc, #164]	; (8007298 <__lshift+0xd4>)
 80071f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80071f8:	f7fd fce0 	bl	8004bbc <__assert_func>
 80071fc:	3101      	adds	r1, #1
 80071fe:	005b      	lsls	r3, r3, #1
 8007200:	e7ee      	b.n	80071e0 <__lshift+0x1c>
 8007202:	2300      	movs	r3, #0
 8007204:	f100 0114 	add.w	r1, r0, #20
 8007208:	f100 0210 	add.w	r2, r0, #16
 800720c:	4618      	mov	r0, r3
 800720e:	4553      	cmp	r3, sl
 8007210:	db33      	blt.n	800727a <__lshift+0xb6>
 8007212:	6920      	ldr	r0, [r4, #16]
 8007214:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007218:	f104 0314 	add.w	r3, r4, #20
 800721c:	f019 091f 	ands.w	r9, r9, #31
 8007220:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007224:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007228:	d02b      	beq.n	8007282 <__lshift+0xbe>
 800722a:	f1c9 0e20 	rsb	lr, r9, #32
 800722e:	468a      	mov	sl, r1
 8007230:	2200      	movs	r2, #0
 8007232:	6818      	ldr	r0, [r3, #0]
 8007234:	fa00 f009 	lsl.w	r0, r0, r9
 8007238:	4302      	orrs	r2, r0
 800723a:	f84a 2b04 	str.w	r2, [sl], #4
 800723e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007242:	459c      	cmp	ip, r3
 8007244:	fa22 f20e 	lsr.w	r2, r2, lr
 8007248:	d8f3      	bhi.n	8007232 <__lshift+0x6e>
 800724a:	ebac 0304 	sub.w	r3, ip, r4
 800724e:	3b15      	subs	r3, #21
 8007250:	f023 0303 	bic.w	r3, r3, #3
 8007254:	3304      	adds	r3, #4
 8007256:	f104 0015 	add.w	r0, r4, #21
 800725a:	4584      	cmp	ip, r0
 800725c:	bf38      	it	cc
 800725e:	2304      	movcc	r3, #4
 8007260:	50ca      	str	r2, [r1, r3]
 8007262:	b10a      	cbz	r2, 8007268 <__lshift+0xa4>
 8007264:	f108 0602 	add.w	r6, r8, #2
 8007268:	3e01      	subs	r6, #1
 800726a:	4638      	mov	r0, r7
 800726c:	612e      	str	r6, [r5, #16]
 800726e:	4621      	mov	r1, r4
 8007270:	f7ff fdd6 	bl	8006e20 <_Bfree>
 8007274:	4628      	mov	r0, r5
 8007276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800727a:	f842 0f04 	str.w	r0, [r2, #4]!
 800727e:	3301      	adds	r3, #1
 8007280:	e7c5      	b.n	800720e <__lshift+0x4a>
 8007282:	3904      	subs	r1, #4
 8007284:	f853 2b04 	ldr.w	r2, [r3], #4
 8007288:	f841 2f04 	str.w	r2, [r1, #4]!
 800728c:	459c      	cmp	ip, r3
 800728e:	d8f9      	bhi.n	8007284 <__lshift+0xc0>
 8007290:	e7ea      	b.n	8007268 <__lshift+0xa4>
 8007292:	bf00      	nop
 8007294:	08007e40 	.word	0x08007e40
 8007298:	08007eb4 	.word	0x08007eb4

0800729c <__mcmp>:
 800729c:	b530      	push	{r4, r5, lr}
 800729e:	6902      	ldr	r2, [r0, #16]
 80072a0:	690c      	ldr	r4, [r1, #16]
 80072a2:	1b12      	subs	r2, r2, r4
 80072a4:	d10e      	bne.n	80072c4 <__mcmp+0x28>
 80072a6:	f100 0314 	add.w	r3, r0, #20
 80072aa:	3114      	adds	r1, #20
 80072ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80072b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80072b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80072b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80072bc:	42a5      	cmp	r5, r4
 80072be:	d003      	beq.n	80072c8 <__mcmp+0x2c>
 80072c0:	d305      	bcc.n	80072ce <__mcmp+0x32>
 80072c2:	2201      	movs	r2, #1
 80072c4:	4610      	mov	r0, r2
 80072c6:	bd30      	pop	{r4, r5, pc}
 80072c8:	4283      	cmp	r3, r0
 80072ca:	d3f3      	bcc.n	80072b4 <__mcmp+0x18>
 80072cc:	e7fa      	b.n	80072c4 <__mcmp+0x28>
 80072ce:	f04f 32ff 	mov.w	r2, #4294967295
 80072d2:	e7f7      	b.n	80072c4 <__mcmp+0x28>

080072d4 <__mdiff>:
 80072d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d8:	460c      	mov	r4, r1
 80072da:	4606      	mov	r6, r0
 80072dc:	4611      	mov	r1, r2
 80072de:	4620      	mov	r0, r4
 80072e0:	4617      	mov	r7, r2
 80072e2:	f7ff ffdb 	bl	800729c <__mcmp>
 80072e6:	1e05      	subs	r5, r0, #0
 80072e8:	d110      	bne.n	800730c <__mdiff+0x38>
 80072ea:	4629      	mov	r1, r5
 80072ec:	4630      	mov	r0, r6
 80072ee:	f7ff fd57 	bl	8006da0 <_Balloc>
 80072f2:	b930      	cbnz	r0, 8007302 <__mdiff+0x2e>
 80072f4:	4b39      	ldr	r3, [pc, #228]	; (80073dc <__mdiff+0x108>)
 80072f6:	4602      	mov	r2, r0
 80072f8:	f240 2132 	movw	r1, #562	; 0x232
 80072fc:	4838      	ldr	r0, [pc, #224]	; (80073e0 <__mdiff+0x10c>)
 80072fe:	f7fd fc5d 	bl	8004bbc <__assert_func>
 8007302:	2301      	movs	r3, #1
 8007304:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007308:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800730c:	bfa4      	itt	ge
 800730e:	463b      	movge	r3, r7
 8007310:	4627      	movge	r7, r4
 8007312:	4630      	mov	r0, r6
 8007314:	6879      	ldr	r1, [r7, #4]
 8007316:	bfa6      	itte	ge
 8007318:	461c      	movge	r4, r3
 800731a:	2500      	movge	r5, #0
 800731c:	2501      	movlt	r5, #1
 800731e:	f7ff fd3f 	bl	8006da0 <_Balloc>
 8007322:	b920      	cbnz	r0, 800732e <__mdiff+0x5a>
 8007324:	4b2d      	ldr	r3, [pc, #180]	; (80073dc <__mdiff+0x108>)
 8007326:	4602      	mov	r2, r0
 8007328:	f44f 7110 	mov.w	r1, #576	; 0x240
 800732c:	e7e6      	b.n	80072fc <__mdiff+0x28>
 800732e:	693e      	ldr	r6, [r7, #16]
 8007330:	60c5      	str	r5, [r0, #12]
 8007332:	6925      	ldr	r5, [r4, #16]
 8007334:	f107 0114 	add.w	r1, r7, #20
 8007338:	f104 0914 	add.w	r9, r4, #20
 800733c:	f100 0e14 	add.w	lr, r0, #20
 8007340:	f107 0210 	add.w	r2, r7, #16
 8007344:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007348:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800734c:	46f2      	mov	sl, lr
 800734e:	2700      	movs	r7, #0
 8007350:	f859 3b04 	ldr.w	r3, [r9], #4
 8007354:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007358:	fa1f f883 	uxth.w	r8, r3
 800735c:	fa17 f78b 	uxtah	r7, r7, fp
 8007360:	0c1b      	lsrs	r3, r3, #16
 8007362:	eba7 0808 	sub.w	r8, r7, r8
 8007366:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800736a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800736e:	fa1f f888 	uxth.w	r8, r8
 8007372:	141f      	asrs	r7, r3, #16
 8007374:	454d      	cmp	r5, r9
 8007376:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800737a:	f84a 3b04 	str.w	r3, [sl], #4
 800737e:	d8e7      	bhi.n	8007350 <__mdiff+0x7c>
 8007380:	1b2b      	subs	r3, r5, r4
 8007382:	3b15      	subs	r3, #21
 8007384:	f023 0303 	bic.w	r3, r3, #3
 8007388:	3304      	adds	r3, #4
 800738a:	3415      	adds	r4, #21
 800738c:	42a5      	cmp	r5, r4
 800738e:	bf38      	it	cc
 8007390:	2304      	movcc	r3, #4
 8007392:	4419      	add	r1, r3
 8007394:	4473      	add	r3, lr
 8007396:	469e      	mov	lr, r3
 8007398:	460d      	mov	r5, r1
 800739a:	4565      	cmp	r5, ip
 800739c:	d30e      	bcc.n	80073bc <__mdiff+0xe8>
 800739e:	f10c 0203 	add.w	r2, ip, #3
 80073a2:	1a52      	subs	r2, r2, r1
 80073a4:	f022 0203 	bic.w	r2, r2, #3
 80073a8:	3903      	subs	r1, #3
 80073aa:	458c      	cmp	ip, r1
 80073ac:	bf38      	it	cc
 80073ae:	2200      	movcc	r2, #0
 80073b0:	441a      	add	r2, r3
 80073b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80073b6:	b17b      	cbz	r3, 80073d8 <__mdiff+0x104>
 80073b8:	6106      	str	r6, [r0, #16]
 80073ba:	e7a5      	b.n	8007308 <__mdiff+0x34>
 80073bc:	f855 8b04 	ldr.w	r8, [r5], #4
 80073c0:	fa17 f488 	uxtah	r4, r7, r8
 80073c4:	1422      	asrs	r2, r4, #16
 80073c6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80073ca:	b2a4      	uxth	r4, r4
 80073cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80073d0:	f84e 4b04 	str.w	r4, [lr], #4
 80073d4:	1417      	asrs	r7, r2, #16
 80073d6:	e7e0      	b.n	800739a <__mdiff+0xc6>
 80073d8:	3e01      	subs	r6, #1
 80073da:	e7ea      	b.n	80073b2 <__mdiff+0xde>
 80073dc:	08007e40 	.word	0x08007e40
 80073e0:	08007eb4 	.word	0x08007eb4

080073e4 <__d2b>:
 80073e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073e8:	4689      	mov	r9, r1
 80073ea:	2101      	movs	r1, #1
 80073ec:	ec57 6b10 	vmov	r6, r7, d0
 80073f0:	4690      	mov	r8, r2
 80073f2:	f7ff fcd5 	bl	8006da0 <_Balloc>
 80073f6:	4604      	mov	r4, r0
 80073f8:	b930      	cbnz	r0, 8007408 <__d2b+0x24>
 80073fa:	4602      	mov	r2, r0
 80073fc:	4b25      	ldr	r3, [pc, #148]	; (8007494 <__d2b+0xb0>)
 80073fe:	4826      	ldr	r0, [pc, #152]	; (8007498 <__d2b+0xb4>)
 8007400:	f240 310a 	movw	r1, #778	; 0x30a
 8007404:	f7fd fbda 	bl	8004bbc <__assert_func>
 8007408:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800740c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007410:	bb35      	cbnz	r5, 8007460 <__d2b+0x7c>
 8007412:	2e00      	cmp	r6, #0
 8007414:	9301      	str	r3, [sp, #4]
 8007416:	d028      	beq.n	800746a <__d2b+0x86>
 8007418:	4668      	mov	r0, sp
 800741a:	9600      	str	r6, [sp, #0]
 800741c:	f7ff fd8c 	bl	8006f38 <__lo0bits>
 8007420:	9900      	ldr	r1, [sp, #0]
 8007422:	b300      	cbz	r0, 8007466 <__d2b+0x82>
 8007424:	9a01      	ldr	r2, [sp, #4]
 8007426:	f1c0 0320 	rsb	r3, r0, #32
 800742a:	fa02 f303 	lsl.w	r3, r2, r3
 800742e:	430b      	orrs	r3, r1
 8007430:	40c2      	lsrs	r2, r0
 8007432:	6163      	str	r3, [r4, #20]
 8007434:	9201      	str	r2, [sp, #4]
 8007436:	9b01      	ldr	r3, [sp, #4]
 8007438:	61a3      	str	r3, [r4, #24]
 800743a:	2b00      	cmp	r3, #0
 800743c:	bf14      	ite	ne
 800743e:	2202      	movne	r2, #2
 8007440:	2201      	moveq	r2, #1
 8007442:	6122      	str	r2, [r4, #16]
 8007444:	b1d5      	cbz	r5, 800747c <__d2b+0x98>
 8007446:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800744a:	4405      	add	r5, r0
 800744c:	f8c9 5000 	str.w	r5, [r9]
 8007450:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007454:	f8c8 0000 	str.w	r0, [r8]
 8007458:	4620      	mov	r0, r4
 800745a:	b003      	add	sp, #12
 800745c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007460:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007464:	e7d5      	b.n	8007412 <__d2b+0x2e>
 8007466:	6161      	str	r1, [r4, #20]
 8007468:	e7e5      	b.n	8007436 <__d2b+0x52>
 800746a:	a801      	add	r0, sp, #4
 800746c:	f7ff fd64 	bl	8006f38 <__lo0bits>
 8007470:	9b01      	ldr	r3, [sp, #4]
 8007472:	6163      	str	r3, [r4, #20]
 8007474:	2201      	movs	r2, #1
 8007476:	6122      	str	r2, [r4, #16]
 8007478:	3020      	adds	r0, #32
 800747a:	e7e3      	b.n	8007444 <__d2b+0x60>
 800747c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007480:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007484:	f8c9 0000 	str.w	r0, [r9]
 8007488:	6918      	ldr	r0, [r3, #16]
 800748a:	f7ff fd35 	bl	8006ef8 <__hi0bits>
 800748e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007492:	e7df      	b.n	8007454 <__d2b+0x70>
 8007494:	08007e40 	.word	0x08007e40
 8007498:	08007eb4 	.word	0x08007eb4

0800749c <_calloc_r>:
 800749c:	b513      	push	{r0, r1, r4, lr}
 800749e:	434a      	muls	r2, r1
 80074a0:	4611      	mov	r1, r2
 80074a2:	9201      	str	r2, [sp, #4]
 80074a4:	f7fd fc52 	bl	8004d4c <_malloc_r>
 80074a8:	4604      	mov	r4, r0
 80074aa:	b118      	cbz	r0, 80074b4 <_calloc_r+0x18>
 80074ac:	9a01      	ldr	r2, [sp, #4]
 80074ae:	2100      	movs	r1, #0
 80074b0:	f7fd fbf4 	bl	8004c9c <memset>
 80074b4:	4620      	mov	r0, r4
 80074b6:	b002      	add	sp, #8
 80074b8:	bd10      	pop	{r4, pc}

080074ba <_raise_r>:
 80074ba:	291f      	cmp	r1, #31
 80074bc:	b538      	push	{r3, r4, r5, lr}
 80074be:	4604      	mov	r4, r0
 80074c0:	460d      	mov	r5, r1
 80074c2:	d904      	bls.n	80074ce <_raise_r+0x14>
 80074c4:	2316      	movs	r3, #22
 80074c6:	6003      	str	r3, [r0, #0]
 80074c8:	f04f 30ff 	mov.w	r0, #4294967295
 80074cc:	bd38      	pop	{r3, r4, r5, pc}
 80074ce:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80074d0:	b112      	cbz	r2, 80074d8 <_raise_r+0x1e>
 80074d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074d6:	b94b      	cbnz	r3, 80074ec <_raise_r+0x32>
 80074d8:	4620      	mov	r0, r4
 80074da:	f000 f831 	bl	8007540 <_getpid_r>
 80074de:	462a      	mov	r2, r5
 80074e0:	4601      	mov	r1, r0
 80074e2:	4620      	mov	r0, r4
 80074e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074e8:	f000 b818 	b.w	800751c <_kill_r>
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d00a      	beq.n	8007506 <_raise_r+0x4c>
 80074f0:	1c59      	adds	r1, r3, #1
 80074f2:	d103      	bne.n	80074fc <_raise_r+0x42>
 80074f4:	2316      	movs	r3, #22
 80074f6:	6003      	str	r3, [r0, #0]
 80074f8:	2001      	movs	r0, #1
 80074fa:	e7e7      	b.n	80074cc <_raise_r+0x12>
 80074fc:	2400      	movs	r4, #0
 80074fe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007502:	4628      	mov	r0, r5
 8007504:	4798      	blx	r3
 8007506:	2000      	movs	r0, #0
 8007508:	e7e0      	b.n	80074cc <_raise_r+0x12>
	...

0800750c <raise>:
 800750c:	4b02      	ldr	r3, [pc, #8]	; (8007518 <raise+0xc>)
 800750e:	4601      	mov	r1, r0
 8007510:	6818      	ldr	r0, [r3, #0]
 8007512:	f7ff bfd2 	b.w	80074ba <_raise_r>
 8007516:	bf00      	nop
 8007518:	20000024 	.word	0x20000024

0800751c <_kill_r>:
 800751c:	b538      	push	{r3, r4, r5, lr}
 800751e:	4d07      	ldr	r5, [pc, #28]	; (800753c <_kill_r+0x20>)
 8007520:	2300      	movs	r3, #0
 8007522:	4604      	mov	r4, r0
 8007524:	4608      	mov	r0, r1
 8007526:	4611      	mov	r1, r2
 8007528:	602b      	str	r3, [r5, #0]
 800752a:	f7fb fb3f 	bl	8002bac <_kill>
 800752e:	1c43      	adds	r3, r0, #1
 8007530:	d102      	bne.n	8007538 <_kill_r+0x1c>
 8007532:	682b      	ldr	r3, [r5, #0]
 8007534:	b103      	cbz	r3, 8007538 <_kill_r+0x1c>
 8007536:	6023      	str	r3, [r4, #0]
 8007538:	bd38      	pop	{r3, r4, r5, pc}
 800753a:	bf00      	nop
 800753c:	20000d70 	.word	0x20000d70

08007540 <_getpid_r>:
 8007540:	f7fb bb2c 	b.w	8002b9c <_getpid>

08007544 <__sread>:
 8007544:	b510      	push	{r4, lr}
 8007546:	460c      	mov	r4, r1
 8007548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800754c:	f000 f8a6 	bl	800769c <_read_r>
 8007550:	2800      	cmp	r0, #0
 8007552:	bfab      	itete	ge
 8007554:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007556:	89a3      	ldrhlt	r3, [r4, #12]
 8007558:	181b      	addge	r3, r3, r0
 800755a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800755e:	bfac      	ite	ge
 8007560:	6563      	strge	r3, [r4, #84]	; 0x54
 8007562:	81a3      	strhlt	r3, [r4, #12]
 8007564:	bd10      	pop	{r4, pc}

08007566 <__swrite>:
 8007566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800756a:	461f      	mov	r7, r3
 800756c:	898b      	ldrh	r3, [r1, #12]
 800756e:	05db      	lsls	r3, r3, #23
 8007570:	4605      	mov	r5, r0
 8007572:	460c      	mov	r4, r1
 8007574:	4616      	mov	r6, r2
 8007576:	d505      	bpl.n	8007584 <__swrite+0x1e>
 8007578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800757c:	2302      	movs	r3, #2
 800757e:	2200      	movs	r2, #0
 8007580:	f000 f868 	bl	8007654 <_lseek_r>
 8007584:	89a3      	ldrh	r3, [r4, #12]
 8007586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800758a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800758e:	81a3      	strh	r3, [r4, #12]
 8007590:	4632      	mov	r2, r6
 8007592:	463b      	mov	r3, r7
 8007594:	4628      	mov	r0, r5
 8007596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800759a:	f000 b817 	b.w	80075cc <_write_r>

0800759e <__sseek>:
 800759e:	b510      	push	{r4, lr}
 80075a0:	460c      	mov	r4, r1
 80075a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075a6:	f000 f855 	bl	8007654 <_lseek_r>
 80075aa:	1c43      	adds	r3, r0, #1
 80075ac:	89a3      	ldrh	r3, [r4, #12]
 80075ae:	bf15      	itete	ne
 80075b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80075b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075ba:	81a3      	strheq	r3, [r4, #12]
 80075bc:	bf18      	it	ne
 80075be:	81a3      	strhne	r3, [r4, #12]
 80075c0:	bd10      	pop	{r4, pc}

080075c2 <__sclose>:
 80075c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075c6:	f000 b813 	b.w	80075f0 <_close_r>
	...

080075cc <_write_r>:
 80075cc:	b538      	push	{r3, r4, r5, lr}
 80075ce:	4d07      	ldr	r5, [pc, #28]	; (80075ec <_write_r+0x20>)
 80075d0:	4604      	mov	r4, r0
 80075d2:	4608      	mov	r0, r1
 80075d4:	4611      	mov	r1, r2
 80075d6:	2200      	movs	r2, #0
 80075d8:	602a      	str	r2, [r5, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	f7f9 fec4 	bl	8001368 <_write>
 80075e0:	1c43      	adds	r3, r0, #1
 80075e2:	d102      	bne.n	80075ea <_write_r+0x1e>
 80075e4:	682b      	ldr	r3, [r5, #0]
 80075e6:	b103      	cbz	r3, 80075ea <_write_r+0x1e>
 80075e8:	6023      	str	r3, [r4, #0]
 80075ea:	bd38      	pop	{r3, r4, r5, pc}
 80075ec:	20000d70 	.word	0x20000d70

080075f0 <_close_r>:
 80075f0:	b538      	push	{r3, r4, r5, lr}
 80075f2:	4d06      	ldr	r5, [pc, #24]	; (800760c <_close_r+0x1c>)
 80075f4:	2300      	movs	r3, #0
 80075f6:	4604      	mov	r4, r0
 80075f8:	4608      	mov	r0, r1
 80075fa:	602b      	str	r3, [r5, #0]
 80075fc:	f7fb fb0d 	bl	8002c1a <_close>
 8007600:	1c43      	adds	r3, r0, #1
 8007602:	d102      	bne.n	800760a <_close_r+0x1a>
 8007604:	682b      	ldr	r3, [r5, #0]
 8007606:	b103      	cbz	r3, 800760a <_close_r+0x1a>
 8007608:	6023      	str	r3, [r4, #0]
 800760a:	bd38      	pop	{r3, r4, r5, pc}
 800760c:	20000d70 	.word	0x20000d70

08007610 <_fstat_r>:
 8007610:	b538      	push	{r3, r4, r5, lr}
 8007612:	4d07      	ldr	r5, [pc, #28]	; (8007630 <_fstat_r+0x20>)
 8007614:	2300      	movs	r3, #0
 8007616:	4604      	mov	r4, r0
 8007618:	4608      	mov	r0, r1
 800761a:	4611      	mov	r1, r2
 800761c:	602b      	str	r3, [r5, #0]
 800761e:	f7fb fb08 	bl	8002c32 <_fstat>
 8007622:	1c43      	adds	r3, r0, #1
 8007624:	d102      	bne.n	800762c <_fstat_r+0x1c>
 8007626:	682b      	ldr	r3, [r5, #0]
 8007628:	b103      	cbz	r3, 800762c <_fstat_r+0x1c>
 800762a:	6023      	str	r3, [r4, #0]
 800762c:	bd38      	pop	{r3, r4, r5, pc}
 800762e:	bf00      	nop
 8007630:	20000d70 	.word	0x20000d70

08007634 <_isatty_r>:
 8007634:	b538      	push	{r3, r4, r5, lr}
 8007636:	4d06      	ldr	r5, [pc, #24]	; (8007650 <_isatty_r+0x1c>)
 8007638:	2300      	movs	r3, #0
 800763a:	4604      	mov	r4, r0
 800763c:	4608      	mov	r0, r1
 800763e:	602b      	str	r3, [r5, #0]
 8007640:	f7fb fb07 	bl	8002c52 <_isatty>
 8007644:	1c43      	adds	r3, r0, #1
 8007646:	d102      	bne.n	800764e <_isatty_r+0x1a>
 8007648:	682b      	ldr	r3, [r5, #0]
 800764a:	b103      	cbz	r3, 800764e <_isatty_r+0x1a>
 800764c:	6023      	str	r3, [r4, #0]
 800764e:	bd38      	pop	{r3, r4, r5, pc}
 8007650:	20000d70 	.word	0x20000d70

08007654 <_lseek_r>:
 8007654:	b538      	push	{r3, r4, r5, lr}
 8007656:	4d07      	ldr	r5, [pc, #28]	; (8007674 <_lseek_r+0x20>)
 8007658:	4604      	mov	r4, r0
 800765a:	4608      	mov	r0, r1
 800765c:	4611      	mov	r1, r2
 800765e:	2200      	movs	r2, #0
 8007660:	602a      	str	r2, [r5, #0]
 8007662:	461a      	mov	r2, r3
 8007664:	f7fb fb00 	bl	8002c68 <_lseek>
 8007668:	1c43      	adds	r3, r0, #1
 800766a:	d102      	bne.n	8007672 <_lseek_r+0x1e>
 800766c:	682b      	ldr	r3, [r5, #0]
 800766e:	b103      	cbz	r3, 8007672 <_lseek_r+0x1e>
 8007670:	6023      	str	r3, [r4, #0]
 8007672:	bd38      	pop	{r3, r4, r5, pc}
 8007674:	20000d70 	.word	0x20000d70

08007678 <__ascii_mbtowc>:
 8007678:	b082      	sub	sp, #8
 800767a:	b901      	cbnz	r1, 800767e <__ascii_mbtowc+0x6>
 800767c:	a901      	add	r1, sp, #4
 800767e:	b142      	cbz	r2, 8007692 <__ascii_mbtowc+0x1a>
 8007680:	b14b      	cbz	r3, 8007696 <__ascii_mbtowc+0x1e>
 8007682:	7813      	ldrb	r3, [r2, #0]
 8007684:	600b      	str	r3, [r1, #0]
 8007686:	7812      	ldrb	r2, [r2, #0]
 8007688:	1e10      	subs	r0, r2, #0
 800768a:	bf18      	it	ne
 800768c:	2001      	movne	r0, #1
 800768e:	b002      	add	sp, #8
 8007690:	4770      	bx	lr
 8007692:	4610      	mov	r0, r2
 8007694:	e7fb      	b.n	800768e <__ascii_mbtowc+0x16>
 8007696:	f06f 0001 	mvn.w	r0, #1
 800769a:	e7f8      	b.n	800768e <__ascii_mbtowc+0x16>

0800769c <_read_r>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	4d07      	ldr	r5, [pc, #28]	; (80076bc <_read_r+0x20>)
 80076a0:	4604      	mov	r4, r0
 80076a2:	4608      	mov	r0, r1
 80076a4:	4611      	mov	r1, r2
 80076a6:	2200      	movs	r2, #0
 80076a8:	602a      	str	r2, [r5, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	f7fb fa98 	bl	8002be0 <_read>
 80076b0:	1c43      	adds	r3, r0, #1
 80076b2:	d102      	bne.n	80076ba <_read_r+0x1e>
 80076b4:	682b      	ldr	r3, [r5, #0]
 80076b6:	b103      	cbz	r3, 80076ba <_read_r+0x1e>
 80076b8:	6023      	str	r3, [r4, #0]
 80076ba:	bd38      	pop	{r3, r4, r5, pc}
 80076bc:	20000d70 	.word	0x20000d70

080076c0 <__ascii_wctomb>:
 80076c0:	b149      	cbz	r1, 80076d6 <__ascii_wctomb+0x16>
 80076c2:	2aff      	cmp	r2, #255	; 0xff
 80076c4:	bf85      	ittet	hi
 80076c6:	238a      	movhi	r3, #138	; 0x8a
 80076c8:	6003      	strhi	r3, [r0, #0]
 80076ca:	700a      	strbls	r2, [r1, #0]
 80076cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80076d0:	bf98      	it	ls
 80076d2:	2001      	movls	r0, #1
 80076d4:	4770      	bx	lr
 80076d6:	4608      	mov	r0, r1
 80076d8:	4770      	bx	lr
	...

080076dc <_init>:
 80076dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076de:	bf00      	nop
 80076e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076e2:	bc08      	pop	{r3}
 80076e4:	469e      	mov	lr, r3
 80076e6:	4770      	bx	lr

080076e8 <_fini>:
 80076e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ea:	bf00      	nop
 80076ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ee:	bc08      	pop	{r3}
 80076f0:	469e      	mov	lr, r3
 80076f2:	4770      	bx	lr
