
led-animation-fsm-gpio-pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008230  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a60  080083d0  080083d0  000183d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e30  08008e30  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008e30  08008e30  00018e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e38  08008e38  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e38  08008e38  00018e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e3c  08008e3c  00018e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bac  200001dc  0800901c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d88  0800901c  00020d88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a0c  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000351c  00000000  00000000  00033c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00037138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  000382b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019931  00000000  00000000  000392c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001550a  00000000  00000000  00052bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000918c0  00000000  00000000  00068103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f99c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005780  00000000  00000000  000f9a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080083b8 	.word	0x080083b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080083b8 	.word	0x080083b8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <head_ptr_advance>:
 * @brief Advance head pointer by 1 position
 * 
 * @param c_buff variable of type circular_buff_t* which contains the struct associated to the circular buffer
 */
static void head_ptr_advance(c_buff_handle_t c_buff)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
    assert(c_buff);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d105      	bne.n	8000ed6 <head_ptr_advance+0x1a>
 8000eca:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <head_ptr_advance+0x74>)
 8000ecc:	4a19      	ldr	r2, [pc, #100]	; (8000f34 <head_ptr_advance+0x78>)
 8000ece:	2126      	movs	r1, #38	; 0x26
 8000ed0:	4819      	ldr	r0, [pc, #100]	; (8000f38 <head_ptr_advance+0x7c>)
 8000ed2:	f004 fc9d 	bl	8005810 <__assert_func>

    if (c_buff->full)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	7c1b      	ldrb	r3, [r3, #16]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00b      	beq.n	8000ef6 <head_ptr_advance+0x3a>
    {
        c_buff->tail = (c_buff->tail + 1) % c_buff->length;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	68d2      	ldr	r2, [r2, #12]
 8000ee8:	fbb3 f1f2 	udiv	r1, r3, r2
 8000eec:	fb01 f202 	mul.w	r2, r1, r2
 8000ef0:	1a9a      	subs	r2, r3, r2
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
    }

    // We mark full because we will advance tail on the next time around
    c_buff->head = (c_buff->head + 1) % c_buff->length;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	3301      	adds	r3, #1
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	68d2      	ldr	r2, [r2, #12]
 8000f00:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f04:	fb01 f202 	mul.w	r2, r1, r2
 8000f08:	1a9a      	subs	r2, r3, r2
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	605a      	str	r2, [r3, #4]
    c_buff->full = (c_buff->head == c_buff->tail);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	bf0c      	ite	eq
 8000f1a:	2301      	moveq	r3, #1
 8000f1c:	2300      	movne	r3, #0
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	461a      	mov	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	741a      	strb	r2, [r3, #16]
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	080083d0 	.word	0x080083d0
 8000f34:	0800891c 	.word	0x0800891c
 8000f38:	080083d8 	.word	0x080083d8

08000f3c <tail_ptr_retreat>:
 * @brief Retreat tail pointer by 1 position
 * 
 * @param c_buff variable of type circular_buff_t* which contains the struct associated to the circular buffer
 */
static void tail_ptr_retreat(c_buff_handle_t c_buff)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
    assert(c_buff);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d105      	bne.n	8000f56 <tail_ptr_retreat+0x1a>
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <tail_ptr_retreat+0x40>)
 8000f4c:	4a0c      	ldr	r2, [pc, #48]	; (8000f80 <tail_ptr_retreat+0x44>)
 8000f4e:	2139      	movs	r1, #57	; 0x39
 8000f50:	480c      	ldr	r0, [pc, #48]	; (8000f84 <tail_ptr_retreat+0x48>)
 8000f52:	f004 fc5d 	bl	8005810 <__assert_func>

    c_buff->full = 0;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	741a      	strb	r2, [r3, #16]
    c_buff->tail = (c_buff->tail + 1) % c_buff->length;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	3301      	adds	r3, #1
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	68d2      	ldr	r2, [r2, #12]
 8000f66:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f6a:	fb01 f202 	mul.w	r2, r1, r2
 8000f6e:	1a9a      	subs	r2, r3, r2
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	609a      	str	r2, [r3, #8]
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	080083d0 	.word	0x080083d0
 8000f80:	08008930 	.word	0x08008930
 8000f84:	080083d8 	.word	0x080083d8

08000f88 <circular_buff_empty>:
 * 
 * @param c_buff variable of type circular_buff_t* which contains the struct associated to the circular buffer
 * @return uint8_t return 1 if circular buffer is empty, return 0 otherwise.
 */
uint8_t circular_buff_empty(c_buff_handle_t c_buff)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
    assert(c_buff);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d105      	bne.n	8000fa2 <circular_buff_empty+0x1a>
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <circular_buff_empty+0x40>)
 8000f98:	4a0c      	ldr	r2, [pc, #48]	; (8000fcc <circular_buff_empty+0x44>)
 8000f9a:	214e      	movs	r1, #78	; 0x4e
 8000f9c:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <circular_buff_empty+0x48>)
 8000f9e:	f004 fc37 	bl	8005810 <__assert_func>

    return (!c_buff->full && (c_buff->tail == c_buff->head));
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	7c1b      	ldrb	r3, [r3, #16]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d107      	bne.n	8000fba <circular_buff_empty+0x32>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d101      	bne.n	8000fba <circular_buff_empty+0x32>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <circular_buff_empty+0x34>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	b2db      	uxtb	r3, r3
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	080083d0 	.word	0x080083d0
 8000fcc:	08008944 	.word	0x08008944
 8000fd0:	080083d8 	.word	0x080083d8

08000fd4 <circular_buff_init>:
 * @param buffer  pointer to a buffer reserved in memory by the user that is going to be register in circular buffer
 * @param size    size of the buffer to be register.
 * @param c_buff variable of type circular_buff_t* which contains the struct associated to the initialized circular buffer.
 */
c_buff_handle_t circular_buff_init(uint8_t *buffer, size_t size)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
    assert(buffer && size);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d002      	beq.n	8000fea <circular_buff_init+0x16>
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d105      	bne.n	8000ff6 <circular_buff_init+0x22>
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <circular_buff_init+0x74>)
 8000fec:	4a17      	ldr	r2, [pc, #92]	; (800104c <circular_buff_init+0x78>)
 8000fee:	2169      	movs	r1, #105	; 0x69
 8000ff0:	4817      	ldr	r0, [pc, #92]	; (8001050 <circular_buff_init+0x7c>)
 8000ff2:	f004 fc0d 	bl	8005810 <__assert_func>

    c_buff_handle_t c_buff = malloc(sizeof(circular_buff_t));
 8000ff6:	2014      	movs	r0, #20
 8000ff8:	f004 fc64 	bl	80058c4 <malloc>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	60fb      	str	r3, [r7, #12]
    assert(c_buff);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d105      	bne.n	8001012 <circular_buff_init+0x3e>
 8001006:	4b13      	ldr	r3, [pc, #76]	; (8001054 <circular_buff_init+0x80>)
 8001008:	4a10      	ldr	r2, [pc, #64]	; (800104c <circular_buff_init+0x78>)
 800100a:	216c      	movs	r1, #108	; 0x6c
 800100c:	4810      	ldr	r0, [pc, #64]	; (8001050 <circular_buff_init+0x7c>)
 800100e:	f004 fbff 	bl	8005810 <__assert_func>

    c_buff->buffer = buffer;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	601a      	str	r2, [r3, #0]
    c_buff->length = size;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	60da      	str	r2, [r3, #12]
    circular_buff_reset(c_buff);
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f000 f81c 	bl	800105c <circular_buff_reset>

    assert(circular_buff_empty(c_buff));
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f7ff ffaf 	bl	8000f88 <circular_buff_empty>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d105      	bne.n	800103c <circular_buff_init+0x68>
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <circular_buff_init+0x84>)
 8001032:	4a06      	ldr	r2, [pc, #24]	; (800104c <circular_buff_init+0x78>)
 8001034:	2172      	movs	r1, #114	; 0x72
 8001036:	4806      	ldr	r0, [pc, #24]	; (8001050 <circular_buff_init+0x7c>)
 8001038:	f004 fbea 	bl	8005810 <__assert_func>

    return c_buff;
 800103c:	68fb      	ldr	r3, [r7, #12]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	080083fc 	.word	0x080083fc
 800104c:	08008958 	.word	0x08008958
 8001050:	080083d8 	.word	0x080083d8
 8001054:	080083d0 	.word	0x080083d0
 8001058:	0800840c 	.word	0x0800840c

0800105c <circular_buff_reset>:
 * @brief Reset Circular buffer to default configuration
 * 
 * @param c_buff variable of type circular_buff_t* which contains the struct associated to the circular buffer
 */
void circular_buff_reset(c_buff_handle_t c_buff)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
    assert(c_buff);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d105      	bne.n	8001076 <circular_buff_reset+0x1a>
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <circular_buff_reset+0x34>)
 800106c:	4a09      	ldr	r2, [pc, #36]	; (8001094 <circular_buff_reset+0x38>)
 800106e:	2189      	movs	r1, #137	; 0x89
 8001070:	4809      	ldr	r0, [pc, #36]	; (8001098 <circular_buff_reset+0x3c>)
 8001072:	f004 fbcd 	bl	8005810 <__assert_func>
    c_buff->head = 0;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	605a      	str	r2, [r3, #4]
    c_buff->tail = 0;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
    c_buff->full = 0;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	741a      	strb	r2, [r3, #16]
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	080083d0 	.word	0x080083d0
 8001094:	0800896c 	.word	0x0800896c
 8001098:	080083d8 	.word	0x080083d8

0800109c <circular_buff_get_data_len>:
 * 
 * @param c_buff variable of type circular_buff_t* which contains the struct associated to the circular buffer
 * @return size_t return number of bytes in buffer.
 */
size_t circular_buff_get_data_len(c_buff_handle_t c_buff)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
    assert(c_buff);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d105      	bne.n	80010b6 <circular_buff_get_data_len+0x1a>
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <circular_buff_get_data_len+0x60>)
 80010ac:	4a14      	ldr	r2, [pc, #80]	; (8001100 <circular_buff_get_data_len+0x64>)
 80010ae:	2197      	movs	r1, #151	; 0x97
 80010b0:	4814      	ldr	r0, [pc, #80]	; (8001104 <circular_buff_get_data_len+0x68>)
 80010b2:	f004 fbad 	bl	8005810 <__assert_func>

    size_t size = c_buff->length;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	60fb      	str	r3, [r7, #12]

    if (!c_buff->full)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	7c1b      	ldrb	r3, [r3, #16]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d115      	bne.n	80010f0 <circular_buff_get_data_len+0x54>
    {
        if (c_buff->head >= c_buff->tail)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d306      	bcc.n	80010de <circular_buff_get_data_len+0x42>
        {
            size = (c_buff->head - c_buff->tail);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	e008      	b.n	80010f0 <circular_buff_get_data_len+0x54>
        }
        else
        {
            size = (c_buff->length + c_buff->head - c_buff->tail);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68da      	ldr	r2, [r3, #12]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	441a      	add	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	60fb      	str	r3, [r7, #12]
        }
    }

    return size;
 80010f0:	68fb      	ldr	r3, [r7, #12]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	080083d0 	.word	0x080083d0
 8001100:	08008980 	.word	0x08008980
 8001104:	080083d8 	.word	0x080083d8

08001108 <circular_buff_get_free_space>:
 * 
 * @param c_buff variable of type circular_buff_t* which contains the struct associated to the circular buffer
 * @return size_t return the number of bytes available in circular buffer 
 */
size_t circular_buff_get_free_space(c_buff_handle_t c_buff)
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    assert(c_buff);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d105      	bne.n	8001122 <circular_buff_get_free_space+0x1a>
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <circular_buff_get_free_space+0x30>)
 8001118:	4a08      	ldr	r2, [pc, #32]	; (800113c <circular_buff_get_free_space+0x34>)
 800111a:	21be      	movs	r1, #190	; 0xbe
 800111c:	4808      	ldr	r0, [pc, #32]	; (8001140 <circular_buff_get_free_space+0x38>)
 800111e:	f004 fb77 	bl	8005810 <__assert_func>
    return (c_buff->length - circular_buff_get_data_len(c_buff));
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68dc      	ldr	r4, [r3, #12]
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffb8 	bl	800109c <circular_buff_get_data_len>
 800112c:	4603      	mov	r3, r0
 800112e:	1ae3      	subs	r3, r4, r3
}
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	bd90      	pop	{r4, r7, pc}
 8001138:	080083d0 	.word	0x080083d0
 800113c:	0800899c 	.word	0x0800899c
 8001140:	080083d8 	.word	0x080083d8

08001144 <circular_buff_put>:
 * 
 * @param c_buff variable of type circular_buff_t* which contains the struct associated to the circular buffer
 * @param data byte to be written in buffer.
 */
void circular_buff_put(c_buff_handle_t c_buff, uint8_t data)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	70fb      	strb	r3, [r7, #3]
    assert(c_buff && c_buff->buffer);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <circular_buff_put+0x1a>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d105      	bne.n	800116a <circular_buff_put+0x26>
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <circular_buff_put+0x44>)
 8001160:	4a0a      	ldr	r2, [pc, #40]	; (800118c <circular_buff_put+0x48>)
 8001162:	21ca      	movs	r1, #202	; 0xca
 8001164:	480a      	ldr	r0, [pc, #40]	; (8001190 <circular_buff_put+0x4c>)
 8001166:	f004 fb53 	bl	8005810 <__assert_func>

    c_buff->buffer[c_buff->head] = data;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	4413      	add	r3, r2
 8001174:	78fa      	ldrb	r2, [r7, #3]
 8001176:	701a      	strb	r2, [r3, #0]

    head_ptr_advance(c_buff);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff fe9f 	bl	8000ebc <head_ptr_advance>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	08008428 	.word	0x08008428
 800118c:	080089bc 	.word	0x080089bc
 8001190:	080083d8 	.word	0x080083d8

08001194 <circular_buff_get>:
 * @param c_buff variable of type circular_buff_t* which contains the struct associated to the circular buffer
 * @param data   pointer to a variable to be fill whit the data in buffer.
 * @return uint8_t  return 0 if there is not data available to be read, return 1 otherwise.
 */
uint8_t circular_buff_get(c_buff_handle_t c_buff, uint8_t *data)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
    assert(c_buff && data && c_buff->buffer);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d006      	beq.n	80011b2 <circular_buff_get+0x1e>
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <circular_buff_get+0x1e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d105      	bne.n	80011be <circular_buff_get+0x2a>
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <circular_buff_get+0x60>)
 80011b4:	4a10      	ldr	r2, [pc, #64]	; (80011f8 <circular_buff_get+0x64>)
 80011b6:	21da      	movs	r1, #218	; 0xda
 80011b8:	4810      	ldr	r0, [pc, #64]	; (80011fc <circular_buff_get+0x68>)
 80011ba:	f004 fb29 	bl	8005810 <__assert_func>

    int r = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]

    if (!circular_buff_empty(c_buff))
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff fee0 	bl	8000f88 <circular_buff_empty>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10c      	bne.n	80011e8 <circular_buff_get+0x54>
    {
        *data = c_buff->buffer[c_buff->tail];
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	4413      	add	r3, r2
 80011d8:	781a      	ldrb	r2, [r3, #0]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	701a      	strb	r2, [r3, #0]
        tail_ptr_retreat(c_buff);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff feac 	bl	8000f3c <tail_ptr_retreat>

        r = 1;
 80011e4:	2301      	movs	r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
    }

    return r;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	b2db      	uxtb	r3, r3
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	08008444 	.word	0x08008444
 80011f8:	080089d0 	.word	0x080089d0
 80011fc:	080083d8 	.word	0x080083d8

08001200 <circular_buff_write>:
 * @param data   pointer to a buffer that contains the data to be written in buffer
 * @param data_len number of bytes of data to be written in buffer
 * @return circular_buff_st_t  return status of buffer.
 */
circular_buff_st_t circular_buff_write(c_buff_handle_t c_buff, uint8_t *data, uint8_t data_len)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	4613      	mov	r3, r2
 800120c:	71fb      	strb	r3, [r7, #7]
    assert(c_buff && c_buff->buffer);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <circular_buff_write+0x1c>
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d105      	bne.n	8001228 <circular_buff_write+0x28>
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <circular_buff_write+0x74>)
 800121e:	4a16      	ldr	r2, [pc, #88]	; (8001278 <circular_buff_write+0x78>)
 8001220:	21f3      	movs	r1, #243	; 0xf3
 8001222:	4816      	ldr	r0, [pc, #88]	; (800127c <circular_buff_write+0x7c>)
 8001224:	f004 faf4 	bl	8005810 <__assert_func>

    if (c_buff->full)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	7c1b      	ldrb	r3, [r3, #16]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <circular_buff_write+0x34>
    {
        return CIRCULAR_BUFF_FULL;
 8001230:	2301      	movs	r3, #1
 8001232:	e01a      	b.n	800126a <circular_buff_write+0x6a>
    }

    if (circular_buff_get_free_space(c_buff) < data_len)
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f7ff ff67 	bl	8001108 <circular_buff_get_free_space>
 800123a:	4602      	mov	r2, r0
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	429a      	cmp	r2, r3
 8001240:	d201      	bcs.n	8001246 <circular_buff_write+0x46>
    {
        return CIRCUILAR_BUFF_NOT_ENOUGH_SPACE;
 8001242:	2302      	movs	r3, #2
 8001244:	e011      	b.n	800126a <circular_buff_write+0x6a>
    }
    else
    {
        size_t data_counter = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]

        while (data_counter < data_len)
 800124a:	e009      	b.n	8001260 <circular_buff_write+0x60>
        {
            circular_buff_put(c_buff, data[data_counter++]);
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	617a      	str	r2, [r7, #20]
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	4413      	add	r3, r2
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f7ff ff72 	bl	8001144 <circular_buff_put>
        while (data_counter < data_len)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	429a      	cmp	r2, r3
 8001266:	d3f1      	bcc.n	800124c <circular_buff_write+0x4c>
        }

        return CIRCULAR_BUFF_OK;
 8001268:	2300      	movs	r3, #0
    }
}
 800126a:	4618      	mov	r0, r3
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	08008428 	.word	0x08008428
 8001278:	080089e4 	.word	0x080089e4
 800127c:	080083d8 	.word	0x080083d8

08001280 <circular_buff_read>:
 * @param data pointer to a buffer to be filled.
 * @param data_len  number of bytes to be read in circular buffer.
 * @return uint8_t  return 1 if number of bytes requested to be read is correct, return 0 otherwise.
 */
uint8_t circular_buff_read(c_buff_handle_t c_buff, uint8_t *data, size_t data_len)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
    assert(c_buff && c_buff->buffer && data);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d006      	beq.n	80012a0 <circular_buff_read+0x20>
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d002      	beq.n	80012a0 <circular_buff_read+0x20>
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d106      	bne.n	80012ae <circular_buff_read+0x2e>
 80012a0:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <circular_buff_read+0x64>)
 80012a2:	4a11      	ldr	r2, [pc, #68]	; (80012e8 <circular_buff_read+0x68>)
 80012a4:	f240 1115 	movw	r1, #277	; 0x115
 80012a8:	4810      	ldr	r0, [pc, #64]	; (80012ec <circular_buff_read+0x6c>)
 80012aa:	f004 fab1 	bl	8005810 <__assert_func>

    size_t data_counter = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]

    while (data_counter < data_len)
 80012b2:	e00d      	b.n	80012d0 <circular_buff_read+0x50>
    {
        if (!circular_buff_get(c_buff, &data[data_counter++]))
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	1c5a      	adds	r2, r3, #1
 80012b8:	617a      	str	r2, [r7, #20]
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	4413      	add	r3, r2
 80012be:	4619      	mov	r1, r3
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f7ff ff67 	bl	8001194 <circular_buff_get>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d101      	bne.n	80012d0 <circular_buff_read+0x50>
        {
            return 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	e004      	b.n	80012da <circular_buff_read+0x5a>
    while (data_counter < data_len)
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d3ed      	bcc.n	80012b4 <circular_buff_read+0x34>
        }
    }

    return 1;
 80012d8:	2301      	movs	r3, #1
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	08008468 	.word	0x08008468
 80012e8:	080089f8 	.word	0x080089f8
 80012ec:	080083d8 	.word	0x080083d8

080012f0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80012f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80012fc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	2b00      	cmp	r3, #0
 8001306:	d013      	beq.n	8001330 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001308:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800130c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001310:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001314:	2b00      	cmp	r3, #0
 8001316:	d00b      	beq.n	8001330 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001318:	e000      	b.n	800131c <ITM_SendChar+0x2c>
    {
      __NOP();
 800131a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800131c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f9      	beq.n	800131a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001326:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001330:	687b      	ldr	r3, [r7, #4]
}
 8001332:	4618      	mov	r0, r3
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <ITM_enable>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )


void ITM_enable(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001344:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <ITM_enable+0x30>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a09      	ldr	r2, [pc, #36]	; (8001370 <ITM_enable+0x30>)
 800134a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800134e:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM->TER |= ( 1 << 0);
 8001350:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001354:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001358:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000edfc 	.word	0xe000edfc

08001374 <_write>:
	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
}

int _write(int file, char *ptr, int len)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0 ; DataIdx < len; DataIdx++)
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	e009      	b.n	800139a <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	1c5a      	adds	r2, r3, #1
 800138a:	60ba      	str	r2, [r7, #8]
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ffae 	bl	80012f0 <ITM_SendChar>
	for(DataIdx = 0 ; DataIdx < len; DataIdx++)
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	3301      	adds	r3, #1
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	429a      	cmp	r2, r3
 80013a0:	dbf1      	blt.n	8001386 <_write+0x12>
	}
	return len;
 80013a2:	687b      	ldr	r3, [r7, #4]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <time_event_start>:
#include <assert.h>

bool volatile update_time_events_flag = false;

void time_event_start(time_event_t *time_event, const uint32_t time_ms)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
	assert(time_event);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d105      	bne.n	80013c8 <time_event_start+0x1c>
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <time_event_start+0x38>)
 80013be:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <time_event_start+0x3c>)
 80013c0:	2111      	movs	r1, #17
 80013c2:	480a      	ldr	r0, [pc, #40]	; (80013ec <time_event_start+0x40>)
 80013c4:	f004 fa24 	bl	8005810 <__assert_func>
    time_event->millis_cnt = time_ms;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	601a      	str	r2, [r3, #0]
    time_event->active = true;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	711a      	strb	r2, [r3, #4]
    time_event->raised = false;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	715a      	strb	r2, [r3, #5]
}   
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	0800848c 	.word	0x0800848c
 80013e8:	08008a0c 	.word	0x08008a0c
 80013ec:	08008498 	.word	0x08008498

080013f0 <time_event_stop>:

void time_event_stop(time_event_t *time_event)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
    assert(time_event);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d105      	bne.n	800140a <time_event_stop+0x1a>
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <time_event_stop+0x34>)
 8001400:	4a09      	ldr	r2, [pc, #36]	; (8001428 <time_event_stop+0x38>)
 8001402:	2119      	movs	r1, #25
 8001404:	4809      	ldr	r0, [pc, #36]	; (800142c <time_event_stop+0x3c>)
 8001406:	f004 fa03 	bl	8005810 <__assert_func>
    time_event->active = false;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	711a      	strb	r2, [r3, #4]
    time_event->raised = false;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	715a      	strb	r2, [r3, #5]
    time_event->millis_cnt = 0;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]

}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	0800848c 	.word	0x0800848c
 8001428:	08008a20 	.word	0x08008a20
 800142c:	08008498 	.word	0x08008498

08001430 <time_event_update>:
    assert(time_event);
    return time_event->active;
}

bool time_event_update(time_event_t *time_event)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
    if (time_event->active == true)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	791b      	ldrb	r3, [r3, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00c      	beq.n	800145a <time_event_update+0x2a>
    {
        if (time_event->millis_cnt > 0)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <time_event_update+0x24>
            time_event->millis_cnt--;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	1e5a      	subs	r2, r3, #1
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	e002      	b.n	800145a <time_event_update+0x2a>
        else
            time_event->raised = true;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	715a      	strb	r2, [r3, #5]
    }

    return true;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <time_event_is_raised>:

bool time_event_is_raised(time_event_t *time_event)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
    return time_event->raised;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	795b      	ldrb	r3, [r3, #5]
}
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <HAL_SYSTICK_Callback>:
/**
 * @brief Systick Callback Function 
 * @note  This callback is executed every ms
 */
void HAL_SYSTICK_Callback(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
    /* update FSM time events*/
    host_comm_tx_fsm_time_event_update(&host_comm_tx_handle);
 8001484:	4805      	ldr	r0, [pc, #20]	; (800149c <HAL_SYSTICK_Callback+0x1c>)
 8001486:	f000 fe70 	bl	800216a <host_comm_tx_fsm_time_event_update>
    host_comm_rx_fsm_time_event_update(&host_comm_rx_handle);
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <HAL_SYSTICK_Callback+0x20>)
 800148c:	f000 fc02 	bl	8001c94 <host_comm_rx_fsm_time_event_update>
    led_animation_time_update(&led_animation);
 8001490:	4804      	ldr	r0, [pc, #16]	; (80014a4 <HAL_SYSTICK_Callback+0x24>)
 8001492:	f000 ffbc 	bl	800240e <led_animation_time_update>

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200007d0 	.word	0x200007d0
 80014a0:	200006ac 	.word	0x200006ac
 80014a4:	20000cf4 	.word	0x20000cf4

080014a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014ae:	4a12      	ldr	r2, [pc, #72]	; (80014f8 <MX_USART2_UART_Init+0x50>)
 80014b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014ce:	220c      	movs	r2, #12
 80014d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014e0:	f003 f9e8 	bl	80048b4 <HAL_UART_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014ea:	f001 f9f7 	bl	80028dc <Error_Handler>
  }
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200001f8 	.word	0x200001f8
 80014f8:	40004400 	.word	0x40004400

080014fc <uart_init>:
 * @param rx_buff buffer in stack reserved for data reception 
 * @param tx_buff buffer in stack reserved for data transmission
 * @return uint8_t 
 */
uint8_t uart_init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
    /*Init Uart device*/
    MX_USART2_UART_Init();
 8001500:	f7ff ffd2 	bl	80014a8 <MX_USART2_UART_Init>

    /*Init Circular Buffer*/
    uart_data.tx.cb = circular_buff_init(uart_data.tx.buffer, TX_DATA_BUFF_SIZE);
 8001504:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001508:	480b      	ldr	r0, [pc, #44]	; (8001538 <uart_init+0x3c>)
 800150a:	f7ff fd63 	bl	8000fd4 <circular_buff_init>
 800150e:	4603      	mov	r3, r0
 8001510:	4a0a      	ldr	r2, [pc, #40]	; (800153c <uart_init+0x40>)
 8001512:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
    uart_data.rx.cb = circular_buff_init(uart_data.rx.buffer, RX_DATA_BUFF_SIZE);
 8001516:	f44f 7100 	mov.w	r1, #512	; 0x200
 800151a:	4808      	ldr	r0, [pc, #32]	; (800153c <uart_init+0x40>)
 800151c:	f7ff fd5a 	bl	8000fd4 <circular_buff_init>
 8001520:	4603      	mov	r3, r0
 8001522:	4a06      	ldr	r2, [pc, #24]	; (800153c <uart_init+0x40>)
 8001524:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /*Start Reception of data*/
    HAL_UART_Receive_IT(&huart2, &uart_data.rx.byte, 1);
 8001528:	2201      	movs	r2, #1
 800152a:	4905      	ldr	r1, [pc, #20]	; (8001540 <uart_init+0x44>)
 800152c:	4805      	ldr	r0, [pc, #20]	; (8001544 <uart_init+0x48>)
 800152e:	f003 fa53 	bl	80049d8 <HAL_UART_Receive_IT>

    uart_driver_dbg("comm driver info : uart2 initialized\r\n");

    return 1;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000444 	.word	0x20000444
 800153c:	2000023c 	.word	0x2000023c
 8001540:	20000440 	.word	0x20000440
 8001544:	200001f8 	.word	0x200001f8

08001548 <uart_get_rx_data_len>:

uint8_t uart_get_rx_data_len(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
    return circular_buff_get_data_len(uart_data.rx.cb);
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <uart_get_rx_data_len+0x18>)
 800154e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fda2 	bl	800109c <circular_buff_get_data_len>
 8001558:	4603      	mov	r3, r0
 800155a:	b2db      	uxtb	r3, r3
}
 800155c:	4618      	mov	r0, r3
 800155e:	bd80      	pop	{r7, pc}
 8001560:	2000023c 	.word	0x2000023c

08001564 <uart_read_rx_data>:


uint8_t uart_read_rx_data(uint8_t *data, uint8_t len)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	70fb      	strb	r3, [r7, #3]
    return circular_buff_read(uart_data.rx.cb, data, len);
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <uart_read_rx_data+0x28>)
 8001572:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001576:	78fa      	ldrb	r2, [r7, #3]
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fe80 	bl	8001280 <circular_buff_read>
 8001580:	4603      	mov	r3, r0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2000023c 	.word	0x2000023c

08001590 <uart_clear_rx_data>:
    return circular_buff_fetch(uart_data.rx.cb, data, len);
}


uint8_t uart_clear_rx_data(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
    circular_buff_reset(uart_data.rx.cb);
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <uart_clear_rx_data+0x18>)
 8001596:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fd5e 	bl	800105c <circular_buff_reset>
    return 1;
 80015a0:	2301      	movs	r3, #1
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2000023c 	.word	0x2000023c

080015ac <uart_transmit_it>:
{
    return HAL_UART_Transmit(&huart2, data, len, HAL_MAX_DELAY);
}

uint8_t uart_transmit_it(uint8_t *data, uint8_t len)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	70fb      	strb	r3, [r7, #3]
    /* Write data to circular buffer */
    if (circular_buff_write(uart_data.tx.cb, data, len) == CIRCULAR_BUFF_OK)
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <uart_transmit_it+0x5c>)
 80015ba:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80015be:	78fa      	ldrb	r2, [r7, #3]
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fe1c 	bl	8001200 <circular_buff_write>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d117      	bne.n	80015fe <uart_transmit_it+0x52>
    {
        if (huart2.gState == HAL_UART_STATE_READY)
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <uart_transmit_it+0x60>)
 80015d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b20      	cmp	r3, #32
 80015d8:	d10f      	bne.n	80015fa <uart_transmit_it+0x4e>
        {
            uint8_t byte;
            circular_buff_get(uart_data.tx.cb, &byte);
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <uart_transmit_it+0x5c>)
 80015dc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80015e0:	f107 020f 	add.w	r2, r7, #15
 80015e4:	4611      	mov	r1, r2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fdd4 	bl	8001194 <circular_buff_get>
            HAL_UART_Transmit_IT(&huart2, &byte, 1);
 80015ec:	f107 030f 	add.w	r3, r7, #15
 80015f0:	2201      	movs	r2, #1
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <uart_transmit_it+0x60>)
 80015f6:	f003 f9aa 	bl	800494e <HAL_UART_Transmit_IT>
        else
        {
            uart_driver_dbg("comm driver warning:\t uart busy\r\n");
        }

        return 1;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <uart_transmit_it+0x54>
    }

    uart_driver_dbg("comm driver error:\t circular buffer cannot write request\r\n");
	return 0;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	2000023c 	.word	0x2000023c
 800160c:	200001f8 	.word	0x200001f8

08001610 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a12      	ldr	r2, [pc, #72]	; (8001668 <HAL_UART_TxCpltCallback+0x58>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d11d      	bne.n	800165e <HAL_UART_TxCpltCallback+0x4e>
  { 
    /*check for pendings transfers */
    static uint8_t data_chunk[MAX_DATA_CHUNK_SIZE];
    uint16_t data_len = circular_buff_get_data_len(uart_data.tx.cb);
 8001622:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_UART_TxCpltCallback+0x5c>)
 8001624:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fd37 	bl	800109c <circular_buff_get_data_len>
 800162e:	4603      	mov	r3, r0
 8001630:	81fb      	strh	r3, [r7, #14]

    if(data_len)
 8001632:	89fb      	ldrh	r3, [r7, #14]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d012      	beq.n	800165e <HAL_UART_TxCpltCallback+0x4e>
    {
        data_len = (data_len >= MAX_DATA_CHUNK_SIZE ) ? (MAX_DATA_CHUNK_SIZE - 1) : data_len;
 8001638:	89fb      	ldrh	r3, [r7, #14]
 800163a:	2b63      	cmp	r3, #99	; 0x63
 800163c:	bf28      	it	cs
 800163e:	2363      	movcs	r3, #99	; 0x63
 8001640:	81fb      	strh	r3, [r7, #14]
        circular_buff_read(uart_data.tx.cb, data_chunk, data_len);
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_UART_TxCpltCallback+0x5c>)
 8001644:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001648:	89fa      	ldrh	r2, [r7, #14]
 800164a:	4909      	ldr	r1, [pc, #36]	; (8001670 <HAL_UART_TxCpltCallback+0x60>)
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fe17 	bl	8001280 <circular_buff_read>
        HAL_UART_Transmit_IT(&huart2, data_chunk, data_len);
 8001652:	89fb      	ldrh	r3, [r7, #14]
 8001654:	461a      	mov	r2, r3
 8001656:	4906      	ldr	r1, [pc, #24]	; (8001670 <HAL_UART_TxCpltCallback+0x60>)
 8001658:	4806      	ldr	r0, [pc, #24]	; (8001674 <HAL_UART_TxCpltCallback+0x64>)
 800165a:	f003 f978 	bl	800494e <HAL_UART_Transmit_IT>
    }

    uart_driver_dbg("comm driver info:\t irq uart tx complete\r\n");
  }
}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40004400 	.word	0x40004400
 800166c:	2000023c 	.word	0x2000023c
 8001670:	20000648 	.word	0x20000648
 8001674:	200001f8 	.word	0x200001f8

08001678 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <HAL_UART_RxCpltCallback+0x48>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d115      	bne.n	80016b6 <HAL_UART_RxCpltCallback+0x3e>
    {
        /*Set Uart Data reception for next byte*/
        HAL_UART_Receive_IT(&huart2, &uart_data.rx.byte, 1);
 800168a:	2201      	movs	r2, #1
 800168c:	490d      	ldr	r1, [pc, #52]	; (80016c4 <HAL_UART_RxCpltCallback+0x4c>)
 800168e:	480e      	ldr	r0, [pc, #56]	; (80016c8 <HAL_UART_RxCpltCallback+0x50>)
 8001690:	f003 f9a2 	bl	80049d8 <HAL_UART_Receive_IT>

        if(circular_buff_write(uart_data.rx.cb, &uart_data.rx.byte, 1) !=  CIRCULAR_BUFF_OK)
 8001694:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <HAL_UART_RxCpltCallback+0x54>)
 8001696:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800169a:	2201      	movs	r2, #1
 800169c:	4909      	ldr	r1, [pc, #36]	; (80016c4 <HAL_UART_RxCpltCallback+0x4c>)
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fdae 	bl	8001200 <circular_buff_write>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d005      	beq.n	80016b6 <HAL_UART_RxCpltCallback+0x3e>
        {
            /*Reinit ring buffer*/
            circular_buff_reset(uart_data.rx.cb);
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <HAL_UART_RxCpltCallback+0x54>)
 80016ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fcd3 	bl	800105c <circular_buff_reset>
        }
    }
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40004400 	.word	0x40004400
 80016c4:	20000440 	.word	0x20000440
 80016c8:	200001f8 	.word	0x200001f8
 80016cc:	2000023c 	.word	0x2000023c

080016d0 <host_comm_rx_fsm_enter>:
static void entry_action_packet_ready(host_comm_rx_fsm_t *handle);
static bool packet_ready_on_react(host_comm_rx_fsm_t *handle, const bool try_transition);

/* Entry action for state machine */
void host_comm_rx_fsm_enter(host_comm_rx_fsm_t *handle)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	/* Default react sequence for initial entry  */
	enter_seq_preamble_proc(handle);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 f819 	bl	8001710 <enter_seq_preamble_proc>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <host_comm_rx_fsm_set_next_state>:

static void host_comm_rx_fsm_set_next_state(host_comm_rx_fsm_t *handle, host_comm_rx_states_t next_state)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	460b      	mov	r3, r1
 80016f0:	70fb      	strb	r3, [r7, #3]
	handle->state = next_state;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	78fa      	ldrb	r2, [r7, #3]
 80016f6:	701a      	strb	r2, [r3, #0]
	handle->event.internal = ev_int_comm_rx_invalid;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	711a      	strb	r2, [r3, #4]
	handle->event.external = ev_ext_comm_rx_invalid;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	715a      	strb	r2, [r3, #5]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <enter_seq_preamble_proc>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**@ 'preamble process' state related functions */

static void enter_seq_preamble_proc(host_comm_rx_fsm_t *handle)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	host_comm_rx_dbg("enter seq \t[ check_preamble_st ]\r\n");
	host_comm_rx_fsm_set_next_state(handle, st_comm_rx_preamble_proc);
 8001718:	2101      	movs	r1, #1
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff ffe3 	bl	80016e6 <host_comm_rx_fsm_set_next_state>
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <during_action_preamble_proc>:

static uint8_t during_action_preamble_proc(host_comm_rx_fsm_t *handle)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	if (uart_get_rx_data_len() >= PREAMBLE_SIZE_BYTES)
 8001730:	f7ff ff0a 	bl	8001548 <uart_get_rx_data_len>
 8001734:	4603      	mov	r3, r0
 8001736:	2b03      	cmp	r3, #3
 8001738:	d938      	bls.n	80017ac <during_action_preamble_proc+0x84>
	{
		uint8_t preamble;
		/* read byte by byte to prevent data lost */
		uart_read_rx_data((uint8_t *)&preamble, 1);
 800173a:	f107 030f 	add.w	r3, r7, #15
 800173e:	2101      	movs	r1, #1
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff0f 	bl	8001564 <uart_read_rx_data>
		if (preamble != protocol_preamble.bit[0])
 8001746:	4b1c      	ldr	r3, [pc, #112]	; (80017b8 <during_action_preamble_proc+0x90>)
 8001748:	781a      	ldrb	r2, [r3, #0]
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	429a      	cmp	r2, r3
 800174e:	d001      	beq.n	8001754 <during_action_preamble_proc+0x2c>
			return 0;
 8001750:	2300      	movs	r3, #0
 8001752:	e02c      	b.n	80017ae <during_action_preamble_proc+0x86>
		uart_read_rx_data((uint8_t *)&preamble, 1);
 8001754:	f107 030f 	add.w	r3, r7, #15
 8001758:	2101      	movs	r1, #1
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ff02 	bl	8001564 <uart_read_rx_data>
		if (preamble != protocol_preamble.bit[1])
 8001760:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <during_action_preamble_proc+0x90>)
 8001762:	785a      	ldrb	r2, [r3, #1]
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	429a      	cmp	r2, r3
 8001768:	d001      	beq.n	800176e <during_action_preamble_proc+0x46>
			return 0;
 800176a:	2300      	movs	r3, #0
 800176c:	e01f      	b.n	80017ae <during_action_preamble_proc+0x86>
		uart_read_rx_data((uint8_t *)&preamble, 1);
 800176e:	f107 030f 	add.w	r3, r7, #15
 8001772:	2101      	movs	r1, #1
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fef5 	bl	8001564 <uart_read_rx_data>
		if (preamble != protocol_preamble.bit[2])
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <during_action_preamble_proc+0x90>)
 800177c:	789a      	ldrb	r2, [r3, #2]
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <during_action_preamble_proc+0x60>
			return 0;
 8001784:	2300      	movs	r3, #0
 8001786:	e012      	b.n	80017ae <during_action_preamble_proc+0x86>
		uart_read_rx_data((uint8_t *)&preamble, 1);
 8001788:	f107 030f 	add.w	r3, r7, #15
 800178c:	2101      	movs	r1, #1
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fee8 	bl	8001564 <uart_read_rx_data>
		if (preamble != protocol_preamble.bit[3])
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <during_action_preamble_proc+0x90>)
 8001796:	78da      	ldrb	r2, [r3, #3]
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	429a      	cmp	r2, r3
 800179c:	d001      	beq.n	80017a2 <during_action_preamble_proc+0x7a>
			return 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	e005      	b.n	80017ae <during_action_preamble_proc+0x86>

		host_comm_rx_dbg("ev_internal \t[ preamble_ok ]\r\n");
		handle->event.internal = ev_int_preamble_ok;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	711a      	strb	r2, [r3, #4]
		return 1;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <during_action_preamble_proc+0x86>
	}
	return 0;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	08008a30 	.word	0x08008a30

080017bc <preamble_proc_on_react>:

static bool preamble_proc_on_react(host_comm_rx_fsm_t *handle, const bool try_transition)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	70fb      	strb	r3, [r7, #3]
	/* The reactions of state 'check preamble' */
	bool did_transition = try_transition;
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	73fb      	strb	r3, [r7, #15]

	if (try_transition == true)
 80017cc:	78fb      	ldrb	r3, [r7, #3]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d009      	beq.n	80017e6 <preamble_proc_on_react+0x2a>
	{
		if (handle->event.internal == ev_int_preamble_ok)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	791b      	ldrb	r3, [r3, #4]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d103      	bne.n	80017e2 <preamble_proc_on_react+0x26>
		{
			/*Enter sequence */
			enter_seq_header_proc(handle);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f811 	bl	8001802 <enter_seq_header_proc>
 80017e0:	e001      	b.n	80017e6 <preamble_proc_on_react+0x2a>
		}
		else
			did_transition = false;
 80017e2:	2300      	movs	r3, #0
 80017e4:	73fb      	strb	r3, [r7, #15]
	}
	if ((did_transition) == (false))
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	f083 0301 	eor.w	r3, r3, #1
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d002      	beq.n	80017f8 <preamble_proc_on_react+0x3c>
	{
		/*during action*/
		during_action_preamble_proc(handle);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ff98 	bl	8001728 <during_action_preamble_proc>
	}
	
	return did_transition;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <enter_seq_header_proc>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*'default enter sequence for state 'header process '*/
static void enter_seq_header_proc(host_comm_rx_fsm_t *handle)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
	host_comm_rx_dbg("enter seq \t[ check_header_st ]\r\n");
	host_comm_rx_fsm_set_next_state(handle, st_comm_rx_header_proc);
 800180a:	2102      	movs	r1, #2
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ff6a 	bl	80016e6 <host_comm_rx_fsm_set_next_state>
	entry_action_header_proc(handle);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f804 	bl	8001820 <entry_action_header_proc>
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <entry_action_header_proc>:

static void entry_action_header_proc(host_comm_rx_fsm_t *handle)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	time_event_start(&handle->event.time.header_timeout, (HEADER_BYTES_TIMEOUT_MS));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3308      	adds	r3, #8
 800182c:	211e      	movs	r1, #30
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fdbc 	bl	80013ac <time_event_start>
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <exit_action_header_proc>:

static void exit_action_header_proc(host_comm_rx_fsm_t *handle)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	/*Stop time out events*/
	time_event_stop(&handle->event.time.header_timeout);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3308      	adds	r3, #8
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fdd1 	bl	80013f0 <time_event_stop>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <during_action_header_proc>:

static void during_action_header_proc(host_comm_rx_fsm_t *handle)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
	if (uart_get_rx_data_len() >= HEADER_SIZE_BYTES)
 800185e:	f7ff fe73 	bl	8001548 <uart_get_rx_data_len>
 8001862:	4603      	mov	r3, r0
 8001864:	2b03      	cmp	r3, #3
 8001866:	d914      	bls.n	8001892 <during_action_header_proc+0x3c>
	{
		/* 1. Read Header from server buffer */
		uart_read_rx_data((uint8_t *)&handle->iface.packet.header, HEADER_SIZE_BYTES);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3320      	adds	r3, #32
 800186c:	2104      	movs	r1, #4
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fe78 	bl	8001564 <uart_read_rx_data>

		if (protocol_check_valid_header(&handle->iface.packet))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3320      	adds	r3, #32
 8001878:	4618      	mov	r0, r3
 800187a:	f000 fd5b 	bl	8002334 <protocol_check_valid_header>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <during_action_header_proc+0x36>
		{
			host_comm_rx_dbg("ev_internal \t[ header_ok ]\r\n");
			handle->event.internal = ev_int_header_ok;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2202      	movs	r2, #2
 8001888:	711a      	strb	r2, [r3, #4]
		{
			host_comm_rx_dbg("ev_internal \t[ header_error ]\r\n");
			handle->event.internal = ev_int_header_error;
		}
	}
}
 800188a:	e002      	b.n	8001892 <during_action_header_proc+0x3c>
			handle->event.internal = ev_int_header_error;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2203      	movs	r2, #3
 8001890:	711a      	strb	r2, [r3, #4]
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <header_proc_on_react>:

static bool header_proc_on_react(host_comm_rx_fsm_t *handle, const bool try_transition)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	70fb      	strb	r3, [r7, #3]
	/* The reactions of state 'check preamble' */
	bool did_transition = try_transition;
 80018a8:	78fb      	ldrb	r3, [r7, #3]
 80018aa:	73fb      	strb	r3, [r7, #15]

	if (try_transition == true)
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d036      	beq.n	8001920 <header_proc_on_react+0x84>
	{
		if (handle->event.internal == ev_int_header_ok)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	791b      	ldrb	r3, [r3, #4]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d10e      	bne.n	80018d8 <header_proc_on_react+0x3c>
		{
			/*Exit Action */
			exit_action_header_proc(handle);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ffbe 	bl	800183c <exit_action_header_proc>

			/*Choice Enter sequence */
			if (handle->iface.packet.header.payload_len > 0)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <header_proc_on_react+0x34>
			{
				host_comm_rx_dbg("guard \t[ payload len > 0 ]\r\n");
				enter_seq_payload_proc(handle);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 f839 	bl	8001940 <enter_seq_payload_proc>
 80018ce:	e027      	b.n	8001920 <header_proc_on_react+0x84>
			}
			else
			{
				host_comm_rx_dbg("guard \t[ payload = 0 ]\r\n");
				enter_seq_crc_and_postamble_proc(handle);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 f8c1 	bl	8001a58 <enter_seq_crc_and_postamble_proc>
 80018d6:	e023      	b.n	8001920 <header_proc_on_react+0x84>
			}
		}

		else if (time_event_is_raised(&handle->event.time.header_timeout) == true ||
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3308      	adds	r3, #8
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fdc3 	bl	8001468 <time_event_is_raised>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d103      	bne.n	80018f0 <header_proc_on_react+0x54>
				 handle->event.internal == ev_int_header_error)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	791b      	ldrb	r3, [r3, #4]
		else if (time_event_is_raised(&handle->event.time.header_timeout) == true ||
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d115      	bne.n	800191c <header_proc_on_react+0x80>
		{

			/*Transition Action*/
			if (time_event_is_raised(&handle->event.time.header_timeout) == true)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3308      	adds	r3, #8
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fdb7 	bl	8001468 <time_event_is_raised>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <header_proc_on_react+0x68>
			{
				uart_clear_rx_data();
 8001900:	f7ff fe46 	bl	8001590 <uart_clear_rx_data>
				host_comm_rx_dbg("ev_internal \t[ header timeout ]\r\n");
			}

			host_comm_tx_fsm_send_packet_no_payload(&host_comm_tx_handle, TARGET_TO_HOST_RES_NACK, false);
 8001904:	2200      	movs	r2, #0
 8001906:	21ae      	movs	r1, #174	; 0xae
 8001908:	480c      	ldr	r0, [pc, #48]	; (800193c <header_proc_on_react+0xa0>)
 800190a:	f000 fbe1 	bl	80020d0 <host_comm_tx_fsm_send_packet_no_payload>

			/*Exit Action*/
			exit_action_header_proc(handle);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ff94 	bl	800183c <exit_action_header_proc>

			/*Enter Sequence*/
			enter_seq_preamble_proc(handle);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff fefb 	bl	8001710 <enter_seq_preamble_proc>
 800191a:	e001      	b.n	8001920 <header_proc_on_react+0x84>
		}
		else
		{
			did_transition = false;
 800191c:	2300      	movs	r3, #0
 800191e:	73fb      	strb	r3, [r7, #15]
		}
	}
	if ((did_transition) == (false))
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	f083 0301 	eor.w	r3, r3, #1
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	d002      	beq.n	8001932 <header_proc_on_react+0x96>
	{
		/*during action*/
		during_action_header_proc(handle);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ff92 	bl	8001856 <during_action_header_proc>
	}
	return did_transition;
 8001932:	7bfb      	ldrb	r3, [r7, #15]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	200007d0 	.word	0x200007d0

08001940 <enter_seq_payload_proc>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**@ 'Check payload' state related functions */

/*'default enter sequence for state 'check payload'*/
static void enter_seq_payload_proc(host_comm_rx_fsm_t *handle)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	/*Entry Action*/
	host_comm_rx_dbg("enter seq \t[ check_payload_st ]\r\n");
	host_comm_rx_fsm_set_next_state(handle, st_comm_rx_payload_proc);
 8001948:	2103      	movs	r1, #3
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff fecb 	bl	80016e6 <host_comm_rx_fsm_set_next_state>
	entry_action_payload_proc(handle);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 f804 	bl	800195e <entry_action_payload_proc>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <entry_action_payload_proc>:

static void entry_action_payload_proc(host_comm_rx_fsm_t *handle)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b084      	sub	sp, #16
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
	uint16_t time_ms = handle->iface.packet.header.payload_len * 1;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800196a:	81fb      	strh	r3, [r7, #14]
	time_event_start(&handle->event.time.payload_timeout, time_ms);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3310      	adds	r3, #16
 8001970:	89fa      	ldrh	r2, [r7, #14]
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fd19 	bl	80013ac <time_event_start>
}
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <exit_action_payload_proc>:

static void exit_action_payload_proc(host_comm_rx_fsm_t *handle)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
	time_event_stop(&handle->event.time.payload_timeout);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	3310      	adds	r3, #16
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fd2e 	bl	80013f0 <time_event_stop>
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <during_action_payload_proc>:

static void during_action_payload_proc(host_comm_rx_fsm_t *handle)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	uint8_t exp_data_len = handle->iface.packet.header.payload_len;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80019a8:	73fb      	strb	r3, [r7, #15]

	if (uart_get_rx_data_len() >= exp_data_len)
 80019aa:	f7ff fdcd 	bl	8001548 <uart_get_rx_data_len>
 80019ae:	4603      	mov	r3, r0
 80019b0:	461a      	mov	r2, r3
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d80c      	bhi.n	80019d2 <during_action_payload_proc+0x36>
	{
		host_comm_rx_dbg("ev_internal \t[ payload_ok ]\r\n");
		handle->event.internal = ev_int_payload_ok;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2204      	movs	r2, #4
 80019bc:	711a      	strb	r2, [r3, #4]
		uart_read_rx_data((uint8_t *)&handle->iface.packet.payload,
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f103 0224 	add.w	r2, r3, #36	; 0x24
								   handle->iface.packet.header.payload_len);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
		uart_read_rx_data((uint8_t *)&handle->iface.packet.payload,
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	4619      	mov	r1, r3
 80019cc:	4610      	mov	r0, r2
 80019ce:	f7ff fdc9 	bl	8001564 <uart_read_rx_data>
	}
}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <payload_proc_on_react>:

static bool payload_proc_on_react(host_comm_rx_fsm_t *handle, const bool try_transition)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	70fb      	strb	r3, [r7, #3]
	/* The reactions of state 'check preamble' */
	bool did_transition = try_transition;
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	73fb      	strb	r3, [r7, #15]

	if (try_transition == true)
 80019ec:	78fb      	ldrb	r3, [r7, #3]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d022      	beq.n	8001a38 <payload_proc_on_react+0x5c>
	{
		if (handle->event.internal == ev_int_payload_ok)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	791b      	ldrb	r3, [r3, #4]
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d106      	bne.n	8001a08 <payload_proc_on_react+0x2c>
		{
			/*Exit Action */
			exit_action_payload_proc(handle);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ffc1 	bl	8001982 <exit_action_payload_proc>

			/*Enter sequence */
			enter_seq_crc_and_postamble_proc(handle);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 f829 	bl	8001a58 <enter_seq_crc_and_postamble_proc>
 8001a06:	e017      	b.n	8001a38 <payload_proc_on_react+0x5c>
		}

		else if (time_event_is_raised(&handle->event.time.payload_timeout) == true)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3310      	adds	r3, #16
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fd2b 	bl	8001468 <time_event_is_raised>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00d      	beq.n	8001a34 <payload_proc_on_react+0x58>
		{
			/*Exit Action*/
			exit_action_payload_proc(handle);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ffb2 	bl	8001982 <exit_action_payload_proc>

			/*Transition Action*/
			host_comm_rx_dbg("ev_internal \t[ timeout payload ] \r\n");
			uart_clear_rx_data();
 8001a1e:	f7ff fdb7 	bl	8001590 <uart_clear_rx_data>
			host_comm_tx_fsm_send_packet_no_payload(&host_comm_tx_handle, TARGET_TO_HOST_RES_NACK, false);
 8001a22:	2200      	movs	r2, #0
 8001a24:	21ae      	movs	r1, #174	; 0xae
 8001a26:	480b      	ldr	r0, [pc, #44]	; (8001a54 <payload_proc_on_react+0x78>)
 8001a28:	f000 fb52 	bl	80020d0 <host_comm_tx_fsm_send_packet_no_payload>

			/*Enter Sequence*/
			enter_seq_preamble_proc(handle);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff fe6f 	bl	8001710 <enter_seq_preamble_proc>
 8001a32:	e001      	b.n	8001a38 <payload_proc_on_react+0x5c>
		}
		else
		{
			did_transition = false;
 8001a34:	2300      	movs	r3, #0
 8001a36:	73fb      	strb	r3, [r7, #15]
		}
	}
	if ((did_transition) == (false))
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	f083 0301 	eor.w	r3, r3, #1
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <payload_proc_on_react+0x6e>
	{
		/*during action*/
		during_action_payload_proc(handle);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ffa9 	bl	800199c <during_action_payload_proc>
	}
	return did_transition;
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	200007d0 	.word	0x200007d0

08001a58 <enter_seq_crc_and_postamble_proc>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**@ 'Check crc and postamble' state related functions */
static void enter_seq_crc_and_postamble_proc(host_comm_rx_fsm_t *handle)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	/*Entry Action*/
	host_comm_rx_dbg("enter seq \t[ check_crc_and_postamble_st ]\r\n");
	host_comm_rx_fsm_set_next_state(handle, st_comm_rx_crc_and_postamble_proc);
 8001a60:	2104      	movs	r1, #4
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff fe3f 	bl	80016e6 <host_comm_rx_fsm_set_next_state>
	entry_action_crc_and_postamble_proc(handle);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 f804 	bl	8001a76 <entry_action_crc_and_postamble_proc>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <entry_action_crc_and_postamble_proc>:

static void entry_action_crc_and_postamble_proc(host_comm_rx_fsm_t *handle)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
	time_event_start(&handle->event.time.crc_and_postamble_timeout, POSTAMBLE_BYTES_TIMEOUT_MS);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3318      	adds	r3, #24
 8001a82:	2105      	movs	r1, #5
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fc91 	bl	80013ac <time_event_start>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <exit_action_crc_and_postamble_proc>:

static void exit_action_crc_and_postamble_proc(host_comm_rx_fsm_t *handle)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
	time_event_stop(&handle->event.time.crc_and_postamble_timeout);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3318      	adds	r3, #24
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fca6 	bl	80013f0 <time_event_stop>
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <during_action_crc_and_postamble_proc>:

static void during_action_crc_and_postamble_proc(host_comm_rx_fsm_t *handle)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	uint8_t exp_data_len = CRC_SIZE_BYTES + POSTAMBLE_SIZE_BYTES;
 8001ab4:	2308      	movs	r3, #8
 8001ab6:	77fb      	strb	r3, [r7, #31]

	if (uart_get_rx_data_len() >= exp_data_len)
 8001ab8:	f7ff fd46 	bl	8001548 <uart_get_rx_data_len>
 8001abc:	4603      	mov	r3, r0
 8001abe:	461a      	mov	r2, r3
 8001ac0:	7ffb      	ldrb	r3, [r7, #31]
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d82b      	bhi.n	8001b1e <during_action_crc_and_postamble_proc+0x72>
	{
		uint32_t recv_crc;
		uint32_t postamble;

		uart_read_rx_data((uint8_t*)&recv_crc, CRC_SIZE_BYTES);
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	2104      	movs	r1, #4
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fd49 	bl	8001564 <uart_read_rx_data>
		uart_read_rx_data((uint8_t*)&postamble, POSTAMBLE_SIZE_BYTES);
 8001ad2:	f107 0310 	add.w	r3, r7, #16
 8001ad6:	2104      	movs	r1, #4
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fd43 	bl	8001564 <uart_read_rx_data>

		size_t packet_len = HEADER_SIZE_BYTES + handle->iface.packet.header.payload_len;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	61bb      	str	r3, [r7, #24]
		uint32_t crc = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]

		crc32_accumulate((uint8_t *)&handle->iface.packet.header, packet_len, &crc);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3320      	adds	r3, #32
 8001aee:	f107 020c 	add.w	r2, r7, #12
 8001af2:	69b9      	ldr	r1, [r7, #24]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f000 fa61 	bl	8001fbc <crc32_accumulate>

		if (crc != recv_crc)
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d003      	beq.n	8001b0a <during_action_crc_and_postamble_proc+0x5e>
		{
			host_comm_rx_dbg("ev_internal \t[ crc error ]\r\n");
			host_comm_rx_dbg("expected crc \t[0x%.8X] != recv [0x%.8X]\r\n", crc, recv_crc);
			handle->event.internal = ev_int_crc_error;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2207      	movs	r2, #7
 8001b06:	711a      	strb	r2, [r3, #4]
			}
			host_comm_rx_dbg("ev_internal \t[ crc and postamble ok ]\r\n");
			handle->event.internal = ev_int_crc_and_postamble_ok;
		}
	}
}
 8001b08:	e009      	b.n	8001b1e <during_action_crc_and_postamble_proc+0x72>
			if (postamble != POSTAMBLE)
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4a06      	ldr	r2, [pc, #24]	; (8001b28 <during_action_crc_and_postamble_proc+0x7c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d002      	beq.n	8001b18 <during_action_crc_and_postamble_proc+0x6c>
				handle->event.internal = ev_int_postamble_error;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2206      	movs	r2, #6
 8001b16:	711a      	strb	r2, [r3, #4]
			handle->event.internal = ev_int_crc_and_postamble_ok;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2205      	movs	r2, #5
 8001b1c:	711a      	strb	r2, [r3, #4]
}
 8001b1e:	bf00      	nop
 8001b20:	3720      	adds	r7, #32
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	bb55bb55 	.word	0xbb55bb55

08001b2c <crc_and_postamble_proc_on_react>:

static bool crc_and_postamble_proc_on_react(host_comm_rx_fsm_t *handle, const bool try_transition)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	70fb      	strb	r3, [r7, #3]
	/* The reactions of state 'check preamble' */
	bool did_transition = try_transition;
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	73fb      	strb	r3, [r7, #15]

	if (try_transition == true)
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d037      	beq.n	8001bb2 <crc_and_postamble_proc_on_react+0x86>
	{
		if (handle->event.internal == ev_int_crc_and_postamble_ok)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	791b      	ldrb	r3, [r3, #4]
 8001b46:	2b05      	cmp	r3, #5
 8001b48:	d10b      	bne.n	8001b62 <crc_and_postamble_proc_on_react+0x36>
		{
			/*Exit Action */
			exit_action_crc_and_postamble_proc(handle);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff ffa1 	bl	8001a92 <exit_action_crc_and_postamble_proc>

			/*Transition Action*/
			host_comm_tx_fsm_send_packet_no_payload(&host_comm_tx_handle, TARGET_TO_HOST_RES_ACK, false);
 8001b50:	2200      	movs	r2, #0
 8001b52:	21ad      	movs	r1, #173	; 0xad
 8001b54:	481e      	ldr	r0, [pc, #120]	; (8001bd0 <crc_and_postamble_proc_on_react+0xa4>)
 8001b56:	f000 fabb 	bl	80020d0 <host_comm_tx_fsm_send_packet_no_payload>

			/*Enter sequence */
			enter_seq_packet_ready(handle);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f83a 	bl	8001bd4 <enter_seq_packet_ready>
 8001b60:	e027      	b.n	8001bb2 <crc_and_postamble_proc_on_react+0x86>
		}

		else if (time_event_is_raised(&handle->event.time.crc_and_postamble_timeout) == true ||
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3318      	adds	r3, #24
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fc7e 	bl	8001468 <time_event_is_raised>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d107      	bne.n	8001b82 <crc_and_postamble_proc_on_react+0x56>
				 handle->event.internal == ev_int_crc_error || handle->event.internal == ev_int_postamble_error)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	791b      	ldrb	r3, [r3, #4]
		else if (time_event_is_raised(&handle->event.time.crc_and_postamble_timeout) == true ||
 8001b76:	2b07      	cmp	r3, #7
 8001b78:	d003      	beq.n	8001b82 <crc_and_postamble_proc_on_react+0x56>
				 handle->event.internal == ev_int_crc_error || handle->event.internal == ev_int_postamble_error)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	791b      	ldrb	r3, [r3, #4]
 8001b7e:	2b06      	cmp	r3, #6
 8001b80:	d115      	bne.n	8001bae <crc_and_postamble_proc_on_react+0x82>
		{

			/*Exit Action*/
			exit_action_crc_and_postamble_proc(handle);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ff85 	bl	8001a92 <exit_action_crc_and_postamble_proc>

			/*Transition Action*/
			if (time_event_is_raised(&handle->event.time.crc_and_postamble_timeout) == true)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3318      	adds	r3, #24
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fc6b 	bl	8001468 <time_event_is_raised>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <crc_and_postamble_proc_on_react+0x70>
			{
				host_comm_rx_dbg("ev_internal \t[ timeout crc and postamble] \r\n");
				uart_clear_rx_data();
 8001b98:	f7ff fcfa 	bl	8001590 <uart_clear_rx_data>
			}

			host_comm_tx_fsm_send_packet_no_payload(&host_comm_tx_handle, TARGET_TO_HOST_RES_NACK, false);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	21ae      	movs	r1, #174	; 0xae
 8001ba0:	480b      	ldr	r0, [pc, #44]	; (8001bd0 <crc_and_postamble_proc_on_react+0xa4>)
 8001ba2:	f000 fa95 	bl	80020d0 <host_comm_tx_fsm_send_packet_no_payload>

			/*Enter Sequence*/
			enter_seq_preamble_proc(handle);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff fdb2 	bl	8001710 <enter_seq_preamble_proc>
 8001bac:	e001      	b.n	8001bb2 <crc_and_postamble_proc_on_react+0x86>
		}
		else
		{
			did_transition = false;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]
		}
	}
	if ((did_transition) == (false))
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	f083 0301 	eor.w	r3, r3, #1
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d002      	beq.n	8001bc4 <crc_and_postamble_proc_on_react+0x98>
	{
		/*during action*/
		during_action_crc_and_postamble_proc(handle);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff ff74 	bl	8001aac <during_action_crc_and_postamble_proc>
	}
	return did_transition;
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200007d0 	.word	0x200007d0

08001bd4 <enter_seq_packet_ready>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void enter_seq_packet_ready(host_comm_rx_fsm_t *handle)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	/*Entry Action*/
	host_comm_rx_dbg("enter seq \t[ packet ready ]\r\n");
	host_comm_rx_fsm_set_next_state(handle, st_comm_rx_packet_ready);
 8001bdc:	2105      	movs	r1, #5
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff fd81 	bl	80016e6 <host_comm_rx_fsm_set_next_state>
	entry_action_packet_ready(handle);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f804 	bl	8001bf2 <entry_action_packet_ready>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <entry_action_packet_ready>:

static void entry_action_packet_ready(host_comm_rx_fsm_t *handle)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
	/*Notify or enqueue data for other fsm process*/

}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <packet_ready_on_react>:

static bool packet_ready_on_react(host_comm_rx_fsm_t *handle, const bool try_transition)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b084      	sub	sp, #16
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	70fb      	strb	r3, [r7, #3]
	bool did_transition = try_transition;
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	73fb      	strb	r3, [r7, #15]

	if (try_transition == true)
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d009      	beq.n	8001c30 <packet_ready_on_react+0x2a>
	{
		if (handle->event.external == ev_ext_comm_rx_packet_proccessed)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	795b      	ldrb	r3, [r3, #5]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d103      	bne.n	8001c2c <packet_ready_on_react+0x26>
			enter_seq_preamble_proc(handle);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff fd73 	bl	8001710 <enter_seq_preamble_proc>
 8001c2a:	e001      	b.n	8001c30 <packet_ready_on_react+0x2a>

		else
			did_transition = false;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73fb      	strb	r3, [r7, #15]
	}

	return did_transition;
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <clear_time_events>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void clear_time_events(host_comm_rx_fsm_t *handle)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
	/*reset raised flags*/
	time_event_stop(&handle->event.time.crc_and_postamble_timeout);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3318      	adds	r3, #24
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fbd2 	bl	80013f0 <time_event_stop>
	time_event_stop(&handle->event.time.header_timeout);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3308      	adds	r3, #8
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fbcd 	bl	80013f0 <time_event_stop>
	time_event_stop(&handle->event.time.payload_timeout);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3310      	adds	r3, #16
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fbc8 	bl	80013f0 <time_event_stop>
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <host_comm_rx_fsm_init>:

void host_comm_rx_fsm_init(host_comm_rx_fsm_t *handle)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	/*Init Interface*/
	memset((uint8_t *)&handle->iface.packet, 0, sizeof(packet_data_t));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3320      	adds	r3, #32
 8001c74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f003 fe38 	bl	80058f0 <memset>

	/*Clear events*/
	clear_time_events(handle);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff ffda 	bl	8001c3a <clear_time_events>

	/*Default Enter Sequence*/
	host_comm_rx_fsm_enter(handle);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff fd22 	bl	80016d0 <host_comm_rx_fsm_enter>
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <host_comm_rx_fsm_time_event_update>:
	bool result = (handle->state > st_comm_rx_invalid && handle->state < st_comm_rx_last)? true : false;
	return result;
}

void host_comm_rx_fsm_time_event_update(host_comm_rx_fsm_t *handle)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
	time_event_t *time_event = (time_event_t *)&handle->event.time;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3308      	adds	r3, #8
 8001ca0:	60fb      	str	r3, [r7, #12]
	for (int tev_idx = 0; tev_idx < sizeof(handle->event.time) / sizeof(time_event_t); tev_idx++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	e008      	b.n	8001cba <host_comm_rx_fsm_time_event_update+0x26>
	{
		time_event_update(time_event);
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f7ff fbc1 	bl	8001430 <time_event_update>
		time_event++;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	3308      	adds	r3, #8
 8001cb2:	60fb      	str	r3, [r7, #12]
	for (int tev_idx = 0; tev_idx < sizeof(handle->event.time) / sizeof(time_event_t); tev_idx++)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d9f3      	bls.n	8001ca8 <host_comm_rx_fsm_time_event_update+0x14>
	}
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <host_comm_rx_fsm_run>:

void host_comm_rx_fsm_run(host_comm_rx_fsm_t *handle)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	switch (handle->state)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d825      	bhi.n	8001d2a <host_comm_rx_fsm_run+0x5e>
 8001cde:	a201      	add	r2, pc, #4	; (adr r2, 8001ce4 <host_comm_rx_fsm_run+0x18>)
 8001ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce4:	08001cf9 	.word	0x08001cf9
 8001ce8:	08001d03 	.word	0x08001d03
 8001cec:	08001d0d 	.word	0x08001d0d
 8001cf0:	08001d17 	.word	0x08001d17
 8001cf4:	08001d21 	.word	0x08001d21
	{
	case st_comm_rx_preamble_proc:          preamble_proc_on_react(handle, true);          break;
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff fd5e 	bl	80017bc <preamble_proc_on_react>
 8001d00:	e014      	b.n	8001d2c <host_comm_rx_fsm_run+0x60>
	case st_comm_rx_header_proc:            header_proc_on_react(handle, true);            break;
 8001d02:	2101      	movs	r1, #1
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff fdc9 	bl	800189c <header_proc_on_react>
 8001d0a:	e00f      	b.n	8001d2c <host_comm_rx_fsm_run+0x60>
	case st_comm_rx_payload_proc:           payload_proc_on_react(handle, true);           break;
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff fe64 	bl	80019dc <payload_proc_on_react>
 8001d14:	e00a      	b.n	8001d2c <host_comm_rx_fsm_run+0x60>
	case st_comm_rx_crc_and_postamble_proc: crc_and_postamble_proc_on_react(handle, true); break;
 8001d16:	2101      	movs	r1, #1
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff ff07 	bl	8001b2c <crc_and_postamble_proc_on_react>
 8001d1e:	e005      	b.n	8001d2c <host_comm_rx_fsm_run+0x60>
	case st_comm_rx_packet_ready:           packet_ready_on_react(handle, true);           break;
 8001d20:	2101      	movs	r1, #1
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff ff6f 	bl	8001c06 <packet_ready_on_react>
 8001d28:	e000      	b.n	8001d2c <host_comm_rx_fsm_run+0x60>

	default:
		break;
 8001d2a:	bf00      	nop
	}
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <clear_events>:

/*Static methods of the finite state machine*/
static uint8_t tx_send_packet(host_comm_tx_fsm_t *handle);

static void clear_events(host_comm_tx_fsm_t* handle)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
    handle->event.internal = ev_int_comm_tx_invalid;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	711a      	strb	r2, [r3, #4]
    handle->event.external = ev_ext_comm_tx_invalid;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	715a      	strb	r2, [r3, #5]
    time_event_stop(&handle->event.time.ack_timeout);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3308      	adds	r3, #8
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fb4f 	bl	80013f0 <time_event_stop>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <host_comm_tx_fsm_set_next_state>:


static void host_comm_tx_fsm_set_next_state(host_comm_tx_fsm_t *handle, host_comm_tx_states_t next_state)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	460b      	mov	r3, r1
 8001d64:	70fb      	strb	r3, [r7, #3]
	handle->state = next_state;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	78fa      	ldrb	r2, [r7, #3]
 8001d6a:	701a      	strb	r2, [r3, #0]
    clear_events(handle);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ffe1 	bl	8001d34 <clear_events>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <host_comm_tx_fsm_init>:

void host_comm_tx_fsm_init(host_comm_tx_fsm_t* handle)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
    /*Init interface*/
    host_comm_tx_queue_init();
 8001d82:	f000 fa27 	bl	80021d4 <host_comm_tx_queue_init>
    memset((uint8_t*)&handle->iface.request.packet, 0, sizeof(packet_data_t));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3314      	adds	r3, #20
 8001d8a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4618      	mov	r0, r3
 8001d92:	f003 fdad 	bl	80058f0 <memset>

    /*Clear events */
    clear_events(handle);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ffcc 	bl	8001d34 <clear_events>

    /*defaut enter sequence */
    enter_seq_poll_pending_transfers(handle);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f805 	bl	8001dac <enter_seq_poll_pending_transfers>
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <enter_seq_poll_pending_transfers>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void enter_seq_poll_pending_transfers(host_comm_tx_fsm_t *handle)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	host_comm_tx_dbg("enter seq \t[ poll_pending_transfers ]\n");
 8001db4:	4806      	ldr	r0, [pc, #24]	; (8001dd0 <enter_seq_poll_pending_transfers+0x24>)
 8001db6:	f004 fccd 	bl	8006754 <puts>
	host_comm_tx_fsm_set_next_state(handle, st_comm_tx_poll_pending_transfer);
 8001dba:	2101      	movs	r1, #1
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff ffcc 	bl	8001d5a <host_comm_tx_fsm_set_next_state>
    handle->iface.retry_cnt = 0;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	741a      	strb	r2, [r3, #16]
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	080084b8 	.word	0x080084b8

08001dd4 <during_action_poll_pending_transfers>:


static void during_action_poll_pending_transfers(host_comm_tx_fsm_t *handle)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
    if(host_comm_tx_queue_get_pending_transfers())
 8001ddc:	f000 fa0e 	bl	80021fc <host_comm_tx_queue_get_pending_transfers>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d005      	beq.n	8001df2 <during_action_poll_pending_transfers+0x1e>
    {
        handle->event.internal = ev_int_comm_tx_pending_packet;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	711a      	strb	r2, [r3, #4]
        host_comm_tx_dbg("int event \t[ pending_packet ]\n");
 8001dec:	4803      	ldr	r0, [pc, #12]	; (8001dfc <during_action_poll_pending_transfers+0x28>)
 8001dee:	f004 fcb1 	bl	8006754 <puts>
    }
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	080084ec 	.word	0x080084ec

08001e00 <exit_action_poll_pending_transfers>:


static void exit_action_poll_pending_transfers(host_comm_tx_fsm_t *handle)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
    /*Read packet to transfer */
    host_comm_tx_queue_read_request(&handle->iface.request);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3312      	adds	r3, #18
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f000 fa55 	bl	80022bc <host_comm_tx_queue_read_request>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <poll_pending_transfers_on_react>:


static bool poll_pending_transfers_on_react(host_comm_tx_fsm_t *handle, const bool try_transition)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	460b      	mov	r3, r1
 8001e24:	70fb      	strb	r3, [r7, #3]
	/* The reactions of state 'check preamble' */
	bool did_transition = try_transition;
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	73fb      	strb	r3, [r7, #15]

	if (try_transition == true)
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00c      	beq.n	8001e4a <poll_pending_transfers_on_react+0x30>
	{
		if (handle->event.internal == ev_int_comm_tx_pending_packet)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	791b      	ldrb	r3, [r3, #4]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d106      	bne.n	8001e46 <poll_pending_transfers_on_react+0x2c>
		{
            /*Exit action */
            exit_action_poll_pending_transfers(handle);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff ffe1 	bl	8001e00 <exit_action_poll_pending_transfers>
			/*Enter sequence */
			enter_seq_transmit_packet(handle);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f812 	bl	8001e68 <enter_seq_transmit_packet>
 8001e44:	e001      	b.n	8001e4a <poll_pending_transfers_on_react+0x30>
		}
		else
			did_transition = false;
 8001e46:	2300      	movs	r3, #0
 8001e48:	73fb      	strb	r3, [r7, #15]
	}
	if ((did_transition) == (false))
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	f083 0301 	eor.w	r3, r3, #1
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d002      	beq.n	8001e5c <poll_pending_transfers_on_react+0x42>
	{
		/*during action*/
		during_action_poll_pending_transfers(handle);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ffbc 	bl	8001dd4 <during_action_poll_pending_transfers>
	}
	return did_transition;
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <enter_seq_transmit_packet>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static void enter_seq_transmit_packet(host_comm_tx_fsm_t *handle)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	host_comm_tx_dbg("enter seq \t[ transmit_packet ]\n");
 8001e70:	4806      	ldr	r0, [pc, #24]	; (8001e8c <enter_seq_transmit_packet+0x24>)
 8001e72:	f004 fc6f 	bl	8006754 <puts>
	host_comm_tx_fsm_set_next_state(handle, st_comm_tx_transmit_packet);
 8001e76:	2102      	movs	r1, #2
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ff6e 	bl	8001d5a <host_comm_tx_fsm_set_next_state>
    entry_action_transmit_packet(handle);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f806 	bl	8001e90 <entry_action_transmit_packet>
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	08008518 	.word	0x08008518

08001e90 <entry_action_transmit_packet>:

static void entry_action_transmit_packet(host_comm_tx_fsm_t *handle)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
    if(handle->iface.request.ack_expected == true)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d009      	beq.n	8001eb6 <entry_action_transmit_packet+0x26>
    {
        time_event_start(&handle->event.time.ack_timeout, MAX_ACK_TIMEOUT_MS);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3308      	adds	r3, #8
 8001ea6:	2132      	movs	r1, #50	; 0x32
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fa7f 	bl	80013ac <time_event_start>
        host_comm_tx_dbg("time event \t[ ack resp time start ]\n");
 8001eae:	4808      	ldr	r0, [pc, #32]	; (8001ed0 <entry_action_transmit_packet+0x40>)
 8001eb0:	f004 fc50 	bl	8006754 <puts>
 8001eb4:	e005      	b.n	8001ec2 <entry_action_transmit_packet+0x32>
    }
    else
    {
        handle->event.internal = ev_int_comm_tx_no_ack_expected;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2202      	movs	r2, #2
 8001eba:	711a      	strb	r2, [r3, #4]
        host_comm_tx_dbg("int event \t[ ack no expected ]\n");
 8001ebc:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <entry_action_transmit_packet+0x44>)
 8001ebe:	f004 fc49 	bl	8006754 <puts>
    }
    tx_send_packet(handle);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f8a8 	bl	8002018 <tx_send_packet>
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	08008548 	.word	0x08008548
 8001ed4:	0800857c 	.word	0x0800857c

08001ed8 <exit_action_transmit_packet>:

static void exit_action_transmit_packet(host_comm_tx_fsm_t *handle)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
    time_event_stop(&handle->event.time.ack_timeout);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3308      	adds	r3, #8
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fa83 	bl	80013f0 <time_event_stop>
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <transmit_packet_on_react>:


static bool transmit_packet_on_react(host_comm_tx_fsm_t *handle, const bool try_transition)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	70fb      	strb	r3, [r7, #3]
    /* The reactions of state 'check preamble' */
    bool did_transition = try_transition;
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	73fb      	strb	r3, [r7, #15]

    if (try_transition == true)
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d04d      	beq.n	8001fa6 <transmit_packet_on_react+0xb2>
    {
        if ((handle->event.external == ev_ext_comm_tx_ack_received) |
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	795b      	ldrb	r3, [r3, #5]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	bf0c      	ite	eq
 8001f12:	2301      	moveq	r3, #1
 8001f14:	2300      	movne	r3, #0
 8001f16:	b2da      	uxtb	r2, r3
            (handle->event.internal == ev_int_comm_tx_no_ack_expected))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	791b      	ldrb	r3, [r3, #4]
        if ((handle->event.external == ev_ext_comm_tx_ack_received) |
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	bf0c      	ite	eq
 8001f20:	2301      	moveq	r3, #1
 8001f22:	2300      	movne	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	4313      	orrs	r3, r2
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d006      	beq.n	8001f3c <transmit_packet_on_react+0x48>
        {
            exit_action_transmit_packet(handle);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ffd2 	bl	8001ed8 <exit_action_transmit_packet>
            enter_seq_poll_pending_transfers(handle);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff ff39 	bl	8001dac <enter_seq_poll_pending_transfers>
 8001f3a:	e034      	b.n	8001fa6 <transmit_packet_on_react+0xb2>
        }

        else if(handle->event.external == ev_ext_comm_tx_nack_received)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	795b      	ldrb	r3, [r3, #5]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d106      	bne.n	8001f52 <transmit_packet_on_react+0x5e>
        {
            exit_action_transmit_packet(handle);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ffc7 	bl	8001ed8 <exit_action_transmit_packet>
            enter_seq_transmit_packet(handle);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7ff ff8c 	bl	8001e68 <enter_seq_transmit_packet>
 8001f50:	e029      	b.n	8001fa6 <transmit_packet_on_react+0xb2>
        }

        else if (time_event_is_raised(&handle->event.time.ack_timeout) == true)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3308      	adds	r3, #8
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fa86 	bl	8001468 <time_event_is_raised>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d01f      	beq.n	8001fa2 <transmit_packet_on_react+0xae>
        {
            exit_action_transmit_packet(handle);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff ffb8 	bl	8001ed8 <exit_action_transmit_packet>
            host_comm_tx_dbg("time event \t[ ack resp timeout ]\n");
 8001f68:	4811      	ldr	r0, [pc, #68]	; (8001fb0 <transmit_packet_on_react+0xbc>)
 8001f6a:	f004 fbf3 	bl	8006754 <puts>
            host_comm_tx_dbg("tx retry\t : #%d\n",handle->iface.retry_cnt);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	7c1b      	ldrb	r3, [r3, #16]
 8001f72:	4619      	mov	r1, r3
 8001f74:	480f      	ldr	r0, [pc, #60]	; (8001fb4 <transmit_packet_on_react+0xc0>)
 8001f76:	f004 fb67 	bl	8006648 <iprintf>

            /*Enter sequence */
            if (handle->iface.retry_cnt++ >= MAX_NUM_OF_TRANSFER_RETRIES)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	7c1b      	ldrb	r3, [r3, #16]
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	b2d1      	uxtb	r1, r2
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	7411      	strb	r1, [r2, #16]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d907      	bls.n	8001f9a <transmit_packet_on_react+0xa6>
            {
                host_comm_tx_dbg("guard \t[ max tx retries ->%d]\n", MAX_NUM_OF_TRANSFER_RETRIES);
 8001f8a:	2102      	movs	r1, #2
 8001f8c:	480a      	ldr	r0, [pc, #40]	; (8001fb8 <transmit_packet_on_react+0xc4>)
 8001f8e:	f004 fb5b 	bl	8006648 <iprintf>
                enter_seq_poll_pending_transfers(handle);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff ff0a 	bl	8001dac <enter_seq_poll_pending_transfers>
 8001f98:	e005      	b.n	8001fa6 <transmit_packet_on_react+0xb2>
            }
            else
                enter_seq_transmit_packet(handle);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ff64 	bl	8001e68 <enter_seq_transmit_packet>
 8001fa0:	e001      	b.n	8001fa6 <transmit_packet_on_react+0xb2>
        }

        else
            did_transition = false;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	73fb      	strb	r3, [r7, #15]
    }
    if ((did_transition) == (false))
    {
        
    }
    return did_transition;
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	080085ac 	.word	0x080085ac
 8001fb4:	080085dc 	.word	0x080085dc
 8001fb8:	080085fc 	.word	0x080085fc

08001fbc <crc32_accumulate>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void crc32_accumulate(uint32_t *buff, size_t len, uint32_t *crc_value)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
    int i = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
    uint32_t crc = *crc_value ^ buff[i];
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	68f9      	ldr	r1, [r7, #12]
 8001fd6:	440b      	add	r3, r1
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4053      	eors	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
    for (i = 0; i < len - 1; i++)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	e00b      	b.n	8001ffc <crc32_accumulate+0x40>
        crc ^= buff[i + 1];
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4413      	add	r3, r2
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4053      	eors	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
    for (i = 0; i < len - 1; i++)
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	1e5a      	subs	r2, r3, #1
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	429a      	cmp	r2, r3
 8002004:	d8ee      	bhi.n	8001fe4 <crc32_accumulate+0x28>

    *crc_value = crc;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	601a      	str	r2, [r3, #0]
}
 800200c:	bf00      	nop
 800200e:	371c      	adds	r7, #28
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <tx_send_packet>:
 * @param host_comm 
 * @param packet 
 * @return uint8_t 
 */
static uint8_t tx_send_packet(host_comm_tx_fsm_t *handle)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
   /* packet index to write bytes  */
    uint32_t crc = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	60bb      	str	r3, [r7, #8]

    packet_data_t *packet = &handle->iface.request.packet;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3314      	adds	r3, #20
 8002028:	60fb      	str	r3, [r7, #12]

    /* Transmit preamble */
    if (!uart_transmit_it((uint8_t *)&protocol_preamble.bit, PREAMBLE_SIZE_BYTES))
 800202a:	2104      	movs	r1, #4
 800202c:	4826      	ldr	r0, [pc, #152]	; (80020c8 <tx_send_packet+0xb0>)
 800202e:	f7ff fabd 	bl	80015ac <uart_transmit_it>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <tx_send_packet+0x24>
        return 0;
 8002038:	2300      	movs	r3, #0
 800203a:	e041      	b.n	80020c0 <tx_send_packet+0xa8>

    /* Start CRC calculation*/
    crc32_accumulate((uint8_t *)&packet->header, HEADER_SIZE_BYTES, &crc);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f107 0208 	add.w	r2, r7, #8
 8002042:	2104      	movs	r1, #4
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ffb9 	bl	8001fbc <crc32_accumulate>

    /* Transmit Header */
    if (!uart_transmit_it((uint8_t *)&packet->header, HEADER_SIZE_BYTES))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2104      	movs	r1, #4
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff faac 	bl	80015ac <uart_transmit_it>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <tx_send_packet+0x46>
        return 0;
 800205a:	2300      	movs	r3, #0
 800205c:	e030      	b.n	80020c0 <tx_send_packet+0xa8>

    /* If Payload  */
    if (packet->header.payload_len)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	885b      	ldrh	r3, [r3, #2]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d017      	beq.n	8002096 <tx_send_packet+0x7e>
    {
        /*update CRC*/
        crc32_accumulate((uint8_t *)&packet->payload, packet->header.payload_len, &crc);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1d18      	adds	r0, r3, #4
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	885b      	ldrh	r3, [r3, #2]
 800206e:	4619      	mov	r1, r3
 8002070:	f107 0308 	add.w	r3, r7, #8
 8002074:	461a      	mov	r2, r3
 8002076:	f7ff ffa1 	bl	8001fbc <crc32_accumulate>

        /*Transmit payload*/
        if (!uart_transmit_it((uint8_t *)&packet->payload, packet->header.payload_len))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1d1a      	adds	r2, r3, #4
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	885b      	ldrh	r3, [r3, #2]
 8002082:	b2db      	uxtb	r3, r3
 8002084:	4619      	mov	r1, r3
 8002086:	4610      	mov	r0, r2
 8002088:	f7ff fa90 	bl	80015ac <uart_transmit_it>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <tx_send_packet+0x7e>
            return 0;
 8002092:	2300      	movs	r3, #0
 8002094:	e014      	b.n	80020c0 <tx_send_packet+0xa8>
    }

    /*Transmit CRC*/
    if (!uart_transmit_it((uint8_t *)&crc, CRC_SIZE_BYTES))
 8002096:	f107 0308 	add.w	r3, r7, #8
 800209a:	2104      	movs	r1, #4
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fa85 	bl	80015ac <uart_transmit_it>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <tx_send_packet+0x94>
        return 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	e009      	b.n	80020c0 <tx_send_packet+0xa8>

    /*Transmit Postamble*/
    if (!uart_transmit_it((uint8_t *)&protocol_postamble.bit, POSTAMBLE_SIZE_BYTES))
 80020ac:	2104      	movs	r1, #4
 80020ae:	4807      	ldr	r0, [pc, #28]	; (80020cc <tx_send_packet+0xb4>)
 80020b0:	f7ff fa7c 	bl	80015ac <uart_transmit_it>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <tx_send_packet+0xa6>
        return 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	e000      	b.n	80020c0 <tx_send_packet+0xa8>

    return 1;
 80020be:	2301      	movs	r3, #1
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	08008a30 	.word	0x08008a30
 80020cc:	08008a34 	.word	0x08008a34

080020d0 <host_comm_tx_fsm_send_packet_no_payload>:

	return 0;
}

uint8_t host_comm_tx_fsm_send_packet_no_payload(host_comm_tx_fsm_t *handle, uint8_t type, bool ack_expected)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b0c4      	sub	sp, #272	; 0x110
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80020da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80020de:	6018      	str	r0, [r3, #0]
 80020e0:	4608      	mov	r0, r1
 80020e2:	4611      	mov	r1, r2
 80020e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80020e8:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 80020ec:	4602      	mov	r2, r0
 80020ee:	701a      	strb	r2, [r3, #0]
 80020f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80020f4:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 80020f8:	460a      	mov	r2, r1
 80020fa:	701a      	strb	r2, [r3, #0]
    /*form header*/
    tx_request_t request = 
 80020fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002100:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002104:	4618      	mov	r0, r3
 8002106:	f44f 7384 	mov.w	r3, #264	; 0x108
 800210a:	461a      	mov	r2, r3
 800210c:	2100      	movs	r1, #0
 800210e:	f003 fbef 	bl	80058f0 <memset>
 8002112:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800211a:	2203      	movs	r2, #3
 800211c:	701a      	strb	r2, [r3, #0]
 800211e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002126:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800212a:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 800212e:	7812      	ldrb	r2, [r2, #0]
 8002130:	709a      	strb	r2, [r3, #2]
 8002132:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800213a:	22aa      	movs	r2, #170	; 0xaa
 800213c:	70da      	strb	r2, [r3, #3]
 800213e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002146:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800214a:	f5a2 7287 	sub.w	r2, r2, #270	; 0x10e
 800214e:	7812      	ldrb	r2, [r2, #0]
 8002150:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        .packet.header.type.res = type,
        .packet.header.payload_len = 0,
    };

    /*Write Data*/
    return host_comm_tx_queue_write_request(&request);
 8002154:	f107 0308 	add.w	r3, r7, #8
 8002158:	4618      	mov	r0, r3
 800215a:	f000 f85b 	bl	8002214 <host_comm_tx_queue_write_request>
 800215e:	4603      	mov	r3, r0
}
 8002160:	4618      	mov	r0, r3
 8002162:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <host_comm_tx_fsm_time_event_update>:

void host_comm_tx_fsm_time_event_update(host_comm_tx_fsm_t *handle)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b084      	sub	sp, #16
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
	time_event_t *time_event = (time_event_t *)&handle->event.time;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3308      	adds	r3, #8
 8002176:	60fb      	str	r3, [r7, #12]
	for (int tev_idx = 0; tev_idx < sizeof(handle->event.time) / sizeof(time_event_t); tev_idx++)
 8002178:	2300      	movs	r3, #0
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	e008      	b.n	8002190 <host_comm_tx_fsm_time_event_update+0x26>
	{
		time_event_update(time_event);
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f7ff f956 	bl	8001430 <time_event_update>
		time_event++;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	3308      	adds	r3, #8
 8002188:	60fb      	str	r3, [r7, #12]
	for (int tev_idx = 0; tev_idx < sizeof(handle->event.time) / sizeof(time_event_t); tev_idx++)
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	3301      	adds	r3, #1
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f3      	beq.n	800217e <host_comm_tx_fsm_time_event_update+0x14>
	}
}
 8002196:	bf00      	nop
 8002198:	bf00      	nop
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <host_comm_tx_fsm_run>:

void host_comm_tx_fsm_run(host_comm_tx_fsm_t *handle)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
    switch (handle->state)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d002      	beq.n	80021b6 <host_comm_tx_fsm_run+0x16>
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d005      	beq.n	80021c0 <host_comm_tx_fsm_run+0x20>
    {
    case st_comm_tx_poll_pending_transfer: poll_pending_transfers_on_react(handle, true); break;
    case st_comm_tx_transmit_packet:       transmit_packet_on_react(handle, true);         break;
    default: break;
 80021b4:	e009      	b.n	80021ca <host_comm_tx_fsm_run+0x2a>
    case st_comm_tx_poll_pending_transfer: poll_pending_transfers_on_react(handle, true); break;
 80021b6:	2101      	movs	r1, #1
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff fe2e 	bl	8001e1a <poll_pending_transfers_on_react>
 80021be:	e004      	b.n	80021ca <host_comm_tx_fsm_run+0x2a>
    case st_comm_tx_transmit_packet:       transmit_packet_on_react(handle, true);         break;
 80021c0:	2101      	movs	r1, #1
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff fe96 	bl	8001ef4 <transmit_packet_on_react>
 80021c8:	bf00      	nop
    }
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <host_comm_tx_queue_init>:

static host_comm_tx_queue_t tx_queue;


void host_comm_tx_queue_init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
    tx_queue.cb = circular_buff_init(tx_queue.buffer, TX_QUEUE_BUFF_SIZE);
 80021d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021dc:	4805      	ldr	r0, [pc, #20]	; (80021f4 <host_comm_tx_queue_init+0x20>)
 80021de:	f7fe fef9 	bl	8000fd4 <circular_buff_init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <host_comm_tx_queue_init+0x24>)
 80021e6:	6053      	str	r3, [r2, #4]
    tx_queue.packet_cnt = 0;
 80021e8:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <host_comm_tx_queue_init+0x24>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	200008f4 	.word	0x200008f4
 80021f8:	200008ec 	.word	0x200008ec

080021fc <host_comm_tx_queue_get_pending_transfers>:

size_t host_comm_tx_queue_get_pending_transfers(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
    return tx_queue.packet_cnt;
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <host_comm_tx_queue_get_pending_transfers+0x14>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	200008ec 	.word	0x200008ec

08002214 <host_comm_tx_queue_write_request>:

uint8_t host_comm_tx_queue_write_request(tx_request_t *tx_request)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
    /* Temporal variable to check free space needed to write packet in tx queue */
    uint8_t packet_data_len = HEADER_SIZE_BYTES + tx_request->packet.header.payload_len;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	889b      	ldrh	r3, [r3, #4]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	3304      	adds	r3, #4
 8002224:	73fb      	strb	r3, [r7, #15]

    if (circular_buff_get_free_space(tx_queue.cb) > packet_data_len + 1) //include byte for req src 
 8002226:	4b21      	ldr	r3, [pc, #132]	; (80022ac <host_comm_tx_queue_write_request+0x98>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe ff6c 	bl	8001108 <circular_buff_get_free_space>
 8002230:	4602      	mov	r2, r0
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	3301      	adds	r3, #1
 8002236:	429a      	cmp	r2, r3
 8002238:	d92f      	bls.n	800229a <host_comm_tx_queue_write_request+0x86>
    {
        circular_buff_put(tx_queue.cb, (uint8_t)tx_request->src);
 800223a:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <host_comm_tx_queue_write_request+0x98>)
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	4619      	mov	r1, r3
 8002244:	4610      	mov	r0, r2
 8002246:	f7fe ff7d 	bl	8001144 <circular_buff_put>
        circular_buff_put(tx_queue.cb, (uint8_t)tx_request->ack_expected);
 800224a:	4b18      	ldr	r3, [pc, #96]	; (80022ac <host_comm_tx_queue_write_request+0x98>)
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8002254:	4619      	mov	r1, r3
 8002256:	4610      	mov	r0, r2
 8002258:	f7fe ff74 	bl	8001144 <circular_buff_put>
        circular_buff_write(tx_queue.cb, (uint8_t *)&tx_request->packet, packet_data_len);
 800225c:	4b13      	ldr	r3, [pc, #76]	; (80022ac <host_comm_tx_queue_write_request+0x98>)
 800225e:	6858      	ldr	r0, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3302      	adds	r3, #2
 8002264:	7bfa      	ldrb	r2, [r7, #15]
 8002266:	4619      	mov	r1, r3
 8002268:	f7fe ffca 	bl	8001200 <circular_buff_write>
        tx_queue.packet_cnt++;
 800226c:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <host_comm_tx_queue_write_request+0x98>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	3301      	adds	r3, #1
 8002272:	4a0e      	ldr	r2, [pc, #56]	; (80022ac <host_comm_tx_queue_write_request+0x98>)
 8002274:	6013      	str	r3, [r2, #0]

        hdx_comm_dbg_message("pending packet counter [%d]\r\n", tx_queue.packet_cnt);
 8002276:	4b0d      	ldr	r3, [pc, #52]	; (80022ac <host_comm_tx_queue_write_request+0x98>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4619      	mov	r1, r3
 800227c:	480c      	ldr	r0, [pc, #48]	; (80022b0 <host_comm_tx_queue_write_request+0x9c>)
 800227e:	f004 f9e3 	bl	8006648 <iprintf>
        hdx_comm_dbg_message("free space in queue [%d] bytes\r\n", circular_buff_get_free_space(tx_queue.cb));
 8002282:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <host_comm_tx_queue_write_request+0x98>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe ff3e 	bl	8001108 <circular_buff_get_free_space>
 800228c:	4603      	mov	r3, r0
 800228e:	4619      	mov	r1, r3
 8002290:	4808      	ldr	r0, [pc, #32]	; (80022b4 <host_comm_tx_queue_write_request+0xa0>)
 8002292:	f004 f9d9 	bl	8006648 <iprintf>

        return 1;
 8002296:	2301      	movs	r3, #1
 8002298:	e003      	b.n	80022a2 <host_comm_tx_queue_write_request+0x8e>
    }
    else
    {
        hdx_comm_dbg_message("not enough space in tx queue ");
 800229a:	4807      	ldr	r0, [pc, #28]	; (80022b8 <host_comm_tx_queue_write_request+0xa4>)
 800229c:	f004 f9d4 	bl	8006648 <iprintf>
        return 0;
 80022a0:	2300      	movs	r3, #0
    }
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	200008ec 	.word	0x200008ec
 80022b0:	08008684 	.word	0x08008684
 80022b4:	080086ac 	.word	0x080086ac
 80022b8:	080086d8 	.word	0x080086d8

080022bc <host_comm_tx_queue_read_request>:


uint8_t host_comm_tx_queue_read_request(tx_request_t *tx_request)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
    if (tx_queue.packet_cnt > 0)
 80022c4:	4b19      	ldr	r3, [pc, #100]	; (800232c <host_comm_tx_queue_read_request+0x70>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d027      	beq.n	800231c <host_comm_tx_queue_read_request+0x60>
    {
        circular_buff_get(tx_queue.cb, (uint8_t *)&tx_request->src);
 80022cc:	4b17      	ldr	r3, [pc, #92]	; (800232c <host_comm_tx_queue_read_request+0x70>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	4611      	mov	r1, r2
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe ff5d 	bl	8001194 <circular_buff_get>
        circular_buff_get(tx_queue.cb, (uint8_t *)&tx_request->ack_expected);
 80022da:	4b14      	ldr	r3, [pc, #80]	; (800232c <host_comm_tx_queue_read_request+0x70>)
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f503 7383 	add.w	r3, r3, #262	; 0x106
 80022e4:	4619      	mov	r1, r3
 80022e6:	4610      	mov	r0, r2
 80022e8:	f7fe ff54 	bl	8001194 <circular_buff_get>
        circular_buff_read(tx_queue.cb, (uint8_t *)&tx_request->packet.header, HEADER_SIZE_BYTES);
 80022ec:	4b0f      	ldr	r3, [pc, #60]	; (800232c <host_comm_tx_queue_read_request+0x70>)
 80022ee:	6858      	ldr	r0, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3302      	adds	r3, #2
 80022f4:	2204      	movs	r2, #4
 80022f6:	4619      	mov	r1, r3
 80022f8:	f7fe ffc2 	bl	8001280 <circular_buff_read>
        circular_buff_read(tx_queue.cb, (uint8_t *)&tx_request->packet.payload, tx_request->packet.header.payload_len);
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <host_comm_tx_queue_read_request+0x70>)
 80022fe:	6858      	ldr	r0, [r3, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	1d99      	adds	r1, r3, #6
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	889b      	ldrh	r3, [r3, #4]
 8002308:	461a      	mov	r2, r3
 800230a:	f7fe ffb9 	bl	8001280 <circular_buff_read>
        tx_queue.packet_cnt--;
 800230e:	4b07      	ldr	r3, [pc, #28]	; (800232c <host_comm_tx_queue_read_request+0x70>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	3b01      	subs	r3, #1
 8002314:	4a05      	ldr	r2, [pc, #20]	; (800232c <host_comm_tx_queue_read_request+0x70>)
 8002316:	6013      	str	r3, [r2, #0]

        return 1;
 8002318:	2301      	movs	r3, #1
 800231a:	e003      	b.n	8002324 <host_comm_tx_queue_read_request+0x68>
    }
    else
    {
        hdx_comm_dbg_message("error there are not pending transfers");
 800231c:	4804      	ldr	r0, [pc, #16]	; (8002330 <host_comm_tx_queue_read_request+0x74>)
 800231e:	f004 f993 	bl	8006648 <iprintf>
        return 0;
 8002322:	2300      	movs	r3, #0
    }
}
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	200008ec 	.word	0x200008ec
 8002330:	08008700 	.word	0x08008700

08002334 <protocol_check_valid_header>:

    packet_dir_t  dir;
    uint16_t payload_len;

uint8_t protocol_check_valid_header(packet_data_t *packet)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
    if (IS_HOST_TO_TARGET_CMD(packet->header.type.cmd) ||
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <protocol_check_valid_header+0x18>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b54      	cmp	r3, #84	; 0x54
 800234a:	d90f      	bls.n	800236c <protocol_check_valid_header+0x38>
        IS_HOST_TO_TARGET_EVT(packet->header.type.evt) ||
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	781b      	ldrb	r3, [r3, #0]
    if (IS_HOST_TO_TARGET_CMD(packet->header.type.cmd) ||
 8002350:	2b56      	cmp	r3, #86	; 0x56
 8002352:	d903      	bls.n	800235c <protocol_check_valid_header+0x28>
        IS_HOST_TO_TARGET_EVT(packet->header.type.evt) ||
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2baa      	cmp	r3, #170	; 0xaa
 800235a:	d907      	bls.n	800236c <protocol_check_valid_header+0x38>
        IS_HOST_TO_TARGET_RES(packet->header.type.res))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	781b      	ldrb	r3, [r3, #0]
        IS_HOST_TO_TARGET_EVT(packet->header.type.evt) ||
 8002360:	2bac      	cmp	r3, #172	; 0xac
 8002362:	d90d      	bls.n	8002380 <protocol_check_valid_header+0x4c>
        IS_HOST_TO_TARGET_RES(packet->header.type.res))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2bff      	cmp	r3, #255	; 0xff
 800236a:	d009      	beq.n	8002380 <protocol_check_valid_header+0x4c>
    {
        /*check payload len */
        if(packet->header.payload_len < MAX_PAYLOAD_SIZE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	885b      	ldrh	r3, [r3, #2]
 8002370:	2bff      	cmp	r3, #255	; 0xff
 8002372:	d805      	bhi.n	8002380 <protocol_check_valid_header+0x4c>
        {
            if(packet->header.dir == HOST_TO_TARGET_DIR)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	785b      	ldrb	r3, [r3, #1]
 8002378:	2bbb      	cmp	r3, #187	; 0xbb
 800237a:	d101      	bne.n	8002380 <protocol_check_valid_header+0x4c>
            {
                return 1;
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <protocol_check_valid_header+0x4e>
            }
        }
    }

    return 0;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <led_animation_set_next_state>:
static void entry_action_idle_proc(led_animation_fsm_t *handle);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void led_animation_set_next_state(led_animation_fsm_t *handle, led_animation_state_t state)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	460b      	mov	r3, r1
 8002398:	70fb      	strb	r3, [r7, #3]
    handle->state = state;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	78fa      	ldrb	r2, [r7, #3]
 800239e:	771a      	strb	r2, [r3, #28]
    handle->event.internal = ev_int_led_animation_invalid;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]
    handle->event.external = ev_ext_led_animation_invalid;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	705a      	strb	r2, [r3, #1]
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <led_animation_init>:

void led_animation_init(led_animation_fsm_t *handle, led_pwm_t *led)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
    /*init mcu gpio .. */
    handle->iface.led.ch = led->ch;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	631a      	str	r2, [r3, #48]	; 0x30
    handle->iface.led.tim = led->tim;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /*enter idle state */
    enter_seq_idle_proc(handle);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f870 	bl	80024b8 <enter_seq_idle_proc>
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <led_animation_run>:

void led_animation_run(led_animation_fsm_t *handle)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
    switch (handle->state)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	7f1b      	ldrb	r3, [r3, #28]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d002      	beq.n	80023f6 <led_animation_run+0x16>
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d004      	beq.n	80023fe <led_animation_run+0x1e>
    {
    case st_led_animation_idle: idle_proc_on_react(handle); break;
    case st_led_animation_exec: exec_proc_on_react(handle); break;
    default:
        break;
 80023f4:	e007      	b.n	8002406 <led_animation_run+0x26>
    case st_led_animation_idle: idle_proc_on_react(handle); break;
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f874 	bl	80024e4 <idle_proc_on_react>
 80023fc:	e003      	b.n	8002406 <led_animation_run+0x26>
    case st_led_animation_exec: exec_proc_on_react(handle); break;
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f928 	bl	8002654 <exec_proc_on_react>
 8002404:	bf00      	nop
    }
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <led_animation_time_update>:

void led_animation_time_update(led_animation_fsm_t *handle)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b084      	sub	sp, #16
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
    time_event_t *time_event = (time_event_t *)&handle->event.time;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3304      	adds	r3, #4
 800241a:	60fb      	str	r3, [r7, #12]
	for (int tev_idx = 0; tev_idx < sizeof(handle->event.time) / sizeof(time_event_t); tev_idx++)
 800241c:	2300      	movs	r3, #0
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	e008      	b.n	8002434 <led_animation_time_update+0x26>
	{
		time_event_update(time_event);
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f7ff f804 	bl	8001430 <time_event_update>
		time_event++;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	3308      	adds	r3, #8
 800242c:	60fb      	str	r3, [r7, #12]
	for (int tev_idx = 0; tev_idx < sizeof(handle->event.time) / sizeof(time_event_t); tev_idx++)
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	3301      	adds	r3, #1
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d9f3      	bls.n	8002422 <led_animation_time_update+0x14>
	}
}
 800243a:	bf00      	nop
 800243c:	bf00      	nop
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <led_animation_start>:

/**
 * @brief Set Animation to be executed 
 */
uint8_t led_animation_start(led_animation_fsm_t *handle, led_animation_t *animation)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
    if(led_set_brightness(handle, animation->brightness))
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	4619      	mov	r1, r3
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 f815 	bl	8002484 <led_set_brightness>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00b      	beq.n	8002478 <led_animation_start+0x34>
    {
        memcpy((uint8_t*)&handle->iface.animation, (uint8_t*)animation, sizeof(led_animation_t));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3320      	adds	r3, #32
 8002464:	220c      	movs	r2, #12
 8002466:	6839      	ldr	r1, [r7, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f003 fa33 	bl	80058d4 <memcpy>
        handle->event.external = ev_ext_led_animation_start;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	705a      	strb	r2, [r3, #1]
        return 1;
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <led_animation_start+0x36>
    }
    return 0;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <led_set_brightness>:

uint8_t led_set_brightness(led_animation_fsm_t *handle, uint8_t brightness)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	70fb      	strb	r3, [r7, #3]
    led_animation_dbg("func \t[ set brightness -> [%d] ]\n", brightness);
 8002490:	78fb      	ldrb	r3, [r7, #3]
 8002492:	4619      	mov	r1, r3
 8002494:	4807      	ldr	r0, [pc, #28]	; (80024b4 <led_set_brightness+0x30>)
 8002496:	f004 f8d7 	bl	8006648 <iprintf>
    return led_pwm_set_brightness(&handle->iface.led, brightness);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	332c      	adds	r3, #44	; 0x2c
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	4611      	mov	r1, r2
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 f96e 	bl	8002784 <led_pwm_set_brightness>
 80024a8:	4603      	mov	r3, r0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	08008730 	.word	0x08008730

080024b8 <enter_seq_idle_proc>:


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void enter_seq_idle_proc(led_animation_fsm_t *handle)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
    led_animation_dbg("enter seq \t[ idle proc ]\n");
 80024c0:	4807      	ldr	r0, [pc, #28]	; (80024e0 <enter_seq_idle_proc+0x28>)
 80024c2:	f004 f947 	bl	8006754 <puts>
    led_animation_set_next_state(handle, st_led_animation_idle);
 80024c6:	2101      	movs	r1, #1
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff ff60 	bl	800238e <led_animation_set_next_state>
    led_pwm_off(&handle->iface.led);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	332c      	adds	r3, #44	; 0x2c
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 f99a 	bl	800280c <led_pwm_off>
}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	08008790 	.word	0x08008790

080024e4 <idle_proc_on_react>:

static bool idle_proc_on_react(led_animation_fsm_t *handle)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
	/* The reactions of state 'check preamble' */
	bool did_transition = true;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]

    if (handle->event.external == ev_ext_led_animation_start)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	785b      	ldrb	r3, [r3, #1]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d103      	bne.n	8002500 <idle_proc_on_react+0x1c>
    {
        /*New Led service ready to start*/
        enter_seq_exec_proc(handle);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f809 	bl	8002510 <enter_seq_exec_proc>
 80024fe:	e001      	b.n	8002504 <idle_proc_on_react+0x20>
    }
    else
        did_transition = false;
 8002500:	2300      	movs	r3, #0
 8002502:	73fb      	strb	r3, [r7, #15]

    return did_transition;
 8002504:	7bfb      	ldrb	r3, [r7, #15]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <enter_seq_exec_proc>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


static void enter_seq_exec_proc(led_animation_fsm_t *handle)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
    led_animation_dbg("enter seq \t[ execution proc ]\n");
 8002518:	4806      	ldr	r0, [pc, #24]	; (8002534 <enter_seq_exec_proc+0x24>)
 800251a:	f004 f91b 	bl	8006754 <puts>
    led_animation_set_next_state(handle, st_led_animation_exec);
 800251e:	2102      	movs	r1, #2
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7ff ff34 	bl	800238e <led_animation_set_next_state>
    entry_action_exec_proc(handle);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f806 	bl	8002538 <entry_action_exec_proc>
}
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	080087bc 	.word	0x080087bc

08002538 <entry_action_exec_proc>:

static void entry_action_exec_proc(led_animation_fsm_t *handle)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
    led_animation_dbg("entry act \t[ execution proc -> start timers, led on ]\n");
 8002540:	4812      	ldr	r0, [pc, #72]	; (800258c <entry_action_exec_proc+0x54>)
 8002542:	f004 f907 	bl	8006754 <puts>

    time_event_start(&handle->event.time.exec_time_expired, handle->iface.animation.execution_time);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	1d1a      	adds	r2, r3, #4
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254e:	4619      	mov	r1, r3
 8002550:	4610      	mov	r0, r2
 8002552:	f7fe ff2b 	bl	80013ac <time_event_start>
    time_event_start(&handle->event.time.period_expired, handle->iface.animation.period);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f103 0214 	add.w	r2, r3, #20
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002560:	4619      	mov	r1, r3
 8002562:	4610      	mov	r0, r2
 8002564:	f7fe ff22 	bl	80013ac <time_event_start>
    time_event_start(&handle->event.time.time_on_expired, handle->iface.animation.time_on);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f103 020c 	add.w	r2, r3, #12
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002572:	4619      	mov	r1, r3
 8002574:	4610      	mov	r0, r2
 8002576:	f7fe ff19 	bl	80013ac <time_event_start>
    
    led_pwm_on(&handle->iface.led);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	332c      	adds	r3, #44	; 0x2c
 800257e:	4618      	mov	r0, r3
 8002580:	f000 f936 	bl	80027f0 <led_pwm_on>
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	080087ec 	.word	0x080087ec

08002590 <exit_action_exec_proc>:

static void exit_action_exec_proc(led_animation_fsm_t *handle)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
    led_animation_dbg("exit act \t[ execution proc -> stop timers, led off ]\n");
 8002598:	480d      	ldr	r0, [pc, #52]	; (80025d0 <exit_action_exec_proc+0x40>)
 800259a:	f004 f8db 	bl	8006754 <puts>

    /*stop timers*/
    time_event_stop(&handle->event.time.exec_time_expired);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3304      	adds	r3, #4
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe ff24 	bl	80013f0 <time_event_stop>
    time_event_stop(&handle->event.time.period_expired);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3314      	adds	r3, #20
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fe ff1f 	bl	80013f0 <time_event_stop>
    time_event_stop(&handle->event.time.time_on_expired);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	330c      	adds	r3, #12
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe ff1a 	bl	80013f0 <time_event_stop>

    /*start led off*/
    led_pwm_off(&handle->iface.led);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	332c      	adds	r3, #44	; 0x2c
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 f923 	bl	800280c <led_pwm_off>
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	08008834 	.word	0x08008834

080025d4 <during_action_exec_proc>:

static void during_action_exec_proc(led_animation_fsm_t *handle)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
    
    ____|▔▔▔▔▔|________|▔▔▔▔▔|________
        |------- T --------|
        |---Ton---|
    */
    if(time_event_is_raised(&handle->event.time.period_expired) == true)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3314      	adds	r3, #20
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe ff41 	bl	8001468 <time_event_is_raised>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d017      	beq.n	800261c <during_action_exec_proc+0x48>
    {
        led_pwm_on(&handle->iface.led);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	332c      	adds	r3, #44	; 0x2c
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 f8fd 	bl	80027f0 <led_pwm_on>
        time_event_start(&handle->event.time.time_on_expired, handle->iface.animation.time_on);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f103 020c 	add.w	r2, r3, #12
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002600:	4619      	mov	r1, r3
 8002602:	4610      	mov	r0, r2
 8002604:	f7fe fed2 	bl	80013ac <time_event_start>
        time_event_start(&handle->event.time.period_expired, handle->iface.animation.period);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f103 0214 	add.w	r2, r3, #20
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002612:	4619      	mov	r1, r3
 8002614:	4610      	mov	r0, r2
 8002616:	f7fe fec9 	bl	80013ac <time_event_start>
 800261a:	e00c      	b.n	8002636 <during_action_exec_proc+0x62>
    }

    else if(time_event_is_raised(&handle->event.time.time_on_expired) == true)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	330c      	adds	r3, #12
 8002620:	4618      	mov	r0, r3
 8002622:	f7fe ff21 	bl	8001468 <time_event_is_raised>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d004      	beq.n	8002636 <during_action_exec_proc+0x62>
    {
        led_pwm_off(&handle->iface.led);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	332c      	adds	r3, #44	; 0x2c
 8002630:	4618      	mov	r0, r3
 8002632:	f000 f8eb 	bl	800280c <led_pwm_off>
    }

    /*Check if pattern execution time expired */
    if(time_event_is_raised(&handle->event.time.exec_time_expired) == true)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3304      	adds	r3, #4
 800263a:	4618      	mov	r0, r3
 800263c:	f7fe ff14 	bl	8001468 <time_event_is_raised>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <during_action_exec_proc+0x78>
    {
        handle->event.internal = ev_int_led_animation_completed;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	701a      	strb	r2, [r3, #0]
    }
}
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <exec_proc_on_react>:

static bool exec_proc_on_react(led_animation_fsm_t *handle)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
	/* The reactions of state 'check preamble' */
	bool did_transition = true;
 800265c:	2301      	movs	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]

    if (handle->event.external == ev_ext_led_animation_start)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	785b      	ldrb	r3, [r3, #1]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d106      	bne.n	8002676 <exec_proc_on_react+0x22>
    {
        /*new animation ready to launch*/
        exit_action_exec_proc(handle);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff ff91 	bl	8002590 <exit_action_exec_proc>
        enter_seq_exec_proc(handle);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff ff4e 	bl	8002510 <enter_seq_exec_proc>
 8002674:	e01f      	b.n	80026b6 <exec_proc_on_react+0x62>
    }
    
    else if(handle->event.external == ev_ext_led_animation_stop)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	785b      	ldrb	r3, [r3, #1]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d106      	bne.n	800268c <exec_proc_on_react+0x38>
    {
        /*enter sequence to idle*/
        exit_action_exec_proc(handle);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ff86 	bl	8002590 <exit_action_exec_proc>
        enter_seq_idle_proc(handle);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff ff17 	bl	80024b8 <enter_seq_idle_proc>
 800268a:	e014      	b.n	80026b6 <exec_proc_on_react+0x62>
    }

    else if(handle->event.internal = ev_int_led_animation_completed)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	701a      	strb	r2, [r3, #0]
    {
        if(handle->iface.animation.execution_time == LED_ENDLESS_EXEC_TIME)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269a:	d106      	bne.n	80026aa <exec_proc_on_react+0x56>
        {
            /*run animation infinitely*/
            exit_action_exec_proc(handle);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff ff77 	bl	8002590 <exit_action_exec_proc>
            enter_seq_exec_proc(handle);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ff34 	bl	8002510 <enter_seq_exec_proc>
 80026a8:	e005      	b.n	80026b6 <exec_proc_on_react+0x62>
        }
        else
        {
        	exit_action_exec_proc(handle);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff ff70 	bl	8002590 <exit_action_exec_proc>
        	enter_seq_idle_proc(handle);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff ff01 	bl	80024b8 <enter_seq_idle_proc>
    }
    else
        did_transition = false;

    //---------------- during action ------------------//
   if (did_transition == false)
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	f083 0301 	eor.w	r3, r3, #1
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <exec_proc_on_react+0x74>
   {
       during_action_exec_proc(handle);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff ff86 	bl	80025d4 <during_action_exec_proc>
   }

    return did_transition;
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <led_pwm_init>:
void Error_Handler(void);
TIM_HandleTypeDef htim2;


void led_pwm_init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08a      	sub	sp, #40	; 0x28
 80026d8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026da:	f107 0320 	add.w	r3, r7, #32
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	609a      	str	r2, [r3, #8]
 80026ee:	60da      	str	r2, [r3, #12]
 80026f0:	611a      	str	r2, [r3, #16]
 80026f2:	615a      	str	r2, [r3, #20]
 80026f4:	619a      	str	r2, [r3, #24]
    F = 84MHz / (84 + 1) (99 + 1) = 10KHz
  */
  #define PRESCALER (84)
  #define PERIOD    (99)

  htim2.Instance = TIM2;
 80026f6:	4b22      	ldr	r3, [pc, #136]	; (8002780 <led_pwm_init+0xac>)
 80026f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = PRESCALER;
 80026fe:	4b20      	ldr	r3, [pc, #128]	; (8002780 <led_pwm_init+0xac>)
 8002700:	2254      	movs	r2, #84	; 0x54
 8002702:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002704:	4b1e      	ldr	r3, [pc, #120]	; (8002780 <led_pwm_init+0xac>)
 8002706:	2200      	movs	r2, #0
 8002708:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PERIOD;
 800270a:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <led_pwm_init+0xac>)
 800270c:	2263      	movs	r2, #99	; 0x63
 800270e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002710:	4b1b      	ldr	r3, [pc, #108]	; (8002780 <led_pwm_init+0xac>)
 8002712:	2200      	movs	r2, #0
 8002714:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002716:	4b1a      	ldr	r3, [pc, #104]	; (8002780 <led_pwm_init+0xac>)
 8002718:	2200      	movs	r2, #0
 800271a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800271c:	4818      	ldr	r0, [pc, #96]	; (8002780 <led_pwm_init+0xac>)
 800271e:	f001 fc03 	bl	8003f28 <HAL_TIM_PWM_Init>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <led_pwm_init+0x58>
  {
    Error_Handler();
 8002728:	f000 f8d8 	bl	80028dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800272c:	2300      	movs	r3, #0
 800272e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002730:	2300      	movs	r3, #0
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002734:	f107 0320 	add.w	r3, r7, #32
 8002738:	4619      	mov	r1, r3
 800273a:	4811      	ldr	r0, [pc, #68]	; (8002780 <led_pwm_init+0xac>)
 800273c:	f002 f84c 	bl	80047d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <led_pwm_init+0x76>
  {
    Error_Handler();
 8002746:	f000 f8c9 	bl	80028dc <Error_Handler>

  /*Led Configuration : 
    Configure PA5 -> LED 2 -> TIM2 PWM_CH1
  */ 

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800274a:	2360      	movs	r3, #96	; 0x60
 800274c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	2200      	movs	r2, #0
 800275e:	4619      	mov	r1, r3
 8002760:	4807      	ldr	r0, [pc, #28]	; (8002780 <led_pwm_init+0xac>)
 8002762:	f001 fd45 	bl	80041f0 <HAL_TIM_PWM_ConfigChannel>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <led_pwm_init+0x9c>
  {
    Error_Handler();
 800276c:	f000 f8b6 	bl	80028dc <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim2);
 8002770:	4803      	ldr	r0, [pc, #12]	; (8002780 <led_pwm_init+0xac>)
 8002772:	f000 fa39 	bl	8002be8 <HAL_TIM_MspPostInit>
}
 8002776:	bf00      	nop
 8002778:	3728      	adds	r7, #40	; 0x28
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000d28 	.word	0x20000d28

08002784 <led_pwm_set_brightness>:

uint8_t led_pwm_set_brightness(led_pwm_t *pwm, uint8_t level)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	70fb      	strb	r3, [r7, #3]
    if (level <= LED_MAX_BRIGHTNESS)
 8002790:	78fb      	ldrb	r3, [r7, #3]
 8002792:	2b64      	cmp	r3, #100	; 0x64
 8002794:	d824      	bhi.n	80027e0 <led_pwm_set_brightness+0x5c>
    {
    	__HAL_TIM_SET_COMPARE(pwm->tim, pwm->ch, level);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d105      	bne.n	80027aa <led_pwm_set_brightness+0x26>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	78fa      	ldrb	r2, [r7, #3]
 80027a6:	635a      	str	r2, [r3, #52]	; 0x34
 80027a8:	e018      	b.n	80027dc <led_pwm_set_brightness+0x58>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d105      	bne.n	80027be <led_pwm_set_brightness+0x3a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	6393      	str	r3, [r2, #56]	; 0x38
 80027bc:	e00e      	b.n	80027dc <led_pwm_set_brightness+0x58>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d105      	bne.n	80027d2 <led_pwm_set_brightness+0x4e>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	63d3      	str	r3, [r2, #60]	; 0x3c
 80027d0:	e004      	b.n	80027dc <led_pwm_set_brightness+0x58>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	78fb      	ldrb	r3, [r7, #3]
 80027da:	6413      	str	r3, [r2, #64]	; 0x40
        return 1;
 80027dc:	2301      	movs	r3, #1
 80027de:	e000      	b.n	80027e2 <led_pwm_set_brightness+0x5e>
    }
    return 0;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
	...

080027f0 <led_pwm_on>:

void led_pwm_on(led_pwm_t *pwm)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80027f8:	2100      	movs	r1, #0
 80027fa:	4803      	ldr	r0, [pc, #12]	; (8002808 <led_pwm_on+0x18>)
 80027fc:	f001 fbe4 	bl	8003fc8 <HAL_TIM_PWM_Start>
}
 8002800:	bf00      	nop
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20000d28 	.word	0x20000d28

0800280c <led_pwm_off>:

void led_pwm_off(led_pwm_t *pwm)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8002814:	2100      	movs	r1, #0
 8002816:	4803      	ldr	r0, [pc, #12]	; (8002824 <led_pwm_off+0x18>)
 8002818:	f001 fc86 	bl	8004128 <HAL_TIM_PWM_Stop>
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000d28 	.word	0x20000d28

08002828 <print_startup_message>:
#define HEARTBEAT_PERIOD_MS (200)
void heartbeat_handler(void);


void print_startup_message(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
	printf("**************************************\r\n");
 800282c:	480a      	ldr	r0, [pc, #40]	; (8002858 <print_startup_message+0x30>)
 800282e:	f003 ff91 	bl	8006754 <puts>
	printf("Brief:\t LED animation GPIO FSM\r\n");
 8002832:	480a      	ldr	r0, [pc, #40]	; (800285c <print_startup_message+0x34>)
 8002834:	f003 ff8e 	bl	8006754 <puts>
	printf("Author:\t Bayron Cabrera \r\n");
 8002838:	4809      	ldr	r0, [pc, #36]	; (8002860 <print_startup_message+0x38>)
 800283a:	f003 ff8b 	bl	8006754 <puts>
	printf("Board:\t Nucleo F411RE \r\n");
 800283e:	4809      	ldr	r0, [pc, #36]	; (8002864 <print_startup_message+0x3c>)
 8002840:	f003 ff88 	bl	8006754 <puts>
	printf("Date:\t %s\r\n", __DATE__);
 8002844:	4908      	ldr	r1, [pc, #32]	; (8002868 <print_startup_message+0x40>)
 8002846:	4809      	ldr	r0, [pc, #36]	; (800286c <print_startup_message+0x44>)
 8002848:	f003 fefe 	bl	8006648 <iprintf>
	printf("**************************************\r\n");
 800284c:	4802      	ldr	r0, [pc, #8]	; (8002858 <print_startup_message+0x30>)
 800284e:	f003 ff81 	bl	8006754 <puts>
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	0800887c 	.word	0x0800887c
 800285c:	080088a4 	.word	0x080088a4
 8002860:	080088c4 	.word	0x080088c4
 8002864:	080088e0 	.word	0x080088e0
 8002868:	080088f8 	.word	0x080088f8
 800286c:	08008904 	.word	0x08008904

08002870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
  /* MCU configuration */
  peripherals_init();
 8002876:	f000 f90f 	bl	8002a98 <peripherals_init>
  print_startup_message();
 800287a:	f7ff ffd5 	bl	8002828 <print_startup_message>

  /* init host tx fsm*/
  host_comm_tx_fsm_init(&host_comm_tx_handle);
 800287e:	4812      	ldr	r0, [pc, #72]	; (80028c8 <main+0x58>)
 8002880:	f7ff fa7b 	bl	8001d7a <host_comm_tx_fsm_init>
  host_comm_rx_fsm_init(&host_comm_rx_handle);
 8002884:	4811      	ldr	r0, [pc, #68]	; (80028cc <main+0x5c>)
 8002886:	f7ff f9ef 	bl	8001c68 <host_comm_rx_fsm_init>

  /*example */
  led_pwm_t led2 =
 800288a:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <main+0x60>)
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
      {
          .ch = TIM_CHANNEL_1,
          .tim = &htim2};

  led_animation_t blink =
 8002892:	4a10      	ldr	r2, [pc, #64]	; (80028d4 <main+0x64>)
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	ca07      	ldmia	r2, {r0, r1, r2}
 8002898:	e883 0007 	stmia.w	r3, {r0, r1, r2}
          .brightness = 50,
          .execution_time = LED_ENDLESS_EXEC_TIME,
          .period = 200,
          .time_on = 100};

  led_animation_init(&led_animation, &led2);
 800289c:	f107 0310 	add.w	r3, r7, #16
 80028a0:	4619      	mov	r1, r3
 80028a2:	480d      	ldr	r0, [pc, #52]	; (80028d8 <main+0x68>)
 80028a4:	f7ff fd88 	bl	80023b8 <led_animation_init>
  led_animation_start(&led_animation, &blink);
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	4619      	mov	r1, r3
 80028ac:	480a      	ldr	r0, [pc, #40]	; (80028d8 <main+0x68>)
 80028ae:	f7ff fdc9 	bl	8002444 <led_animation_start>

  /* Infinite loop */
  while (1)
  {
    host_comm_tx_fsm_run(&host_comm_tx_handle);
 80028b2:	4805      	ldr	r0, [pc, #20]	; (80028c8 <main+0x58>)
 80028b4:	f7ff fc74 	bl	80021a0 <host_comm_tx_fsm_run>
    host_comm_rx_fsm_run(&host_comm_rx_handle);
 80028b8:	4804      	ldr	r0, [pc, #16]	; (80028cc <main+0x5c>)
 80028ba:	f7ff fa07 	bl	8001ccc <host_comm_rx_fsm_run>
    
    led_animation_run(&led_animation);
 80028be:	4806      	ldr	r0, [pc, #24]	; (80028d8 <main+0x68>)
 80028c0:	f7ff fd8e 	bl	80023e0 <led_animation_run>
    host_comm_tx_fsm_run(&host_comm_tx_handle);
 80028c4:	e7f5      	b.n	80028b2 <main+0x42>
 80028c6:	bf00      	nop
 80028c8:	200007d0 	.word	0x200007d0
 80028cc:	200006ac 	.word	0x200006ac
 80028d0:	20000d28 	.word	0x20000d28
 80028d4:	08008910 	.word	0x08008910
 80028d8:	20000cf4 	.word	0x20000cf4

080028dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028e0:	b672      	cpsid	i
}
 80028e2:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028e4:	e7fe      	b.n	80028e4 <Error_Handler+0x8>
	...

080028e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b094      	sub	sp, #80	; 0x50
 80028ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028ee:	f107 0320 	add.w	r3, r7, #32
 80028f2:	2230      	movs	r2, #48	; 0x30
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f002 fffa 	bl	80058f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028fc:	f107 030c 	add.w	r3, r7, #12
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800290c:	2300      	movs	r3, #0
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	4b28      	ldr	r3, [pc, #160]	; (80029b4 <SystemClock_Config+0xcc>)
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	4a27      	ldr	r2, [pc, #156]	; (80029b4 <SystemClock_Config+0xcc>)
 8002916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800291a:	6413      	str	r3, [r2, #64]	; 0x40
 800291c:	4b25      	ldr	r3, [pc, #148]	; (80029b4 <SystemClock_Config+0xcc>)
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002928:	2300      	movs	r3, #0
 800292a:	607b      	str	r3, [r7, #4]
 800292c:	4b22      	ldr	r3, [pc, #136]	; (80029b8 <SystemClock_Config+0xd0>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a21      	ldr	r2, [pc, #132]	; (80029b8 <SystemClock_Config+0xd0>)
 8002932:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	4b1f      	ldr	r3, [pc, #124]	; (80029b8 <SystemClock_Config+0xd0>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002940:	607b      	str	r3, [r7, #4]
 8002942:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002944:	2302      	movs	r3, #2
 8002946:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002948:	2301      	movs	r3, #1
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800294c:	2310      	movs	r3, #16
 800294e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002950:	2302      	movs	r3, #2
 8002952:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002954:	2300      	movs	r3, #0
 8002956:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002958:	2310      	movs	r3, #16
 800295a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800295c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002960:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002962:	2304      	movs	r3, #4
 8002964:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002966:	2304      	movs	r3, #4
 8002968:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800296a:	f107 0320 	add.w	r3, r7, #32
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fe42 	bl	80035f8 <HAL_RCC_OscConfig>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800297a:	f7ff ffaf 	bl	80028dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800297e:	230f      	movs	r3, #15
 8002980:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002982:	2302      	movs	r3, #2
 8002984:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800298a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800298e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002990:	2300      	movs	r3, #0
 8002992:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002994:	f107 030c 	add.w	r3, r7, #12
 8002998:	2102      	movs	r1, #2
 800299a:	4618      	mov	r0, r3
 800299c:	f001 f8a4 	bl	8003ae8 <HAL_RCC_ClockConfig>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80029a6:	f7ff ff99 	bl	80028dc <Error_Handler>
  }
}
 80029aa:	bf00      	nop
 80029ac:	3750      	adds	r7, #80	; 0x50
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40007000 	.word	0x40007000

080029bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08a      	sub	sp, #40	; 0x28
 80029c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c2:	f107 0314 	add.w	r3, r7, #20
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	609a      	str	r2, [r3, #8]
 80029ce:	60da      	str	r2, [r3, #12]
 80029d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	4b2d      	ldr	r3, [pc, #180]	; (8002a8c <MX_GPIO_Init+0xd0>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	4a2c      	ldr	r2, [pc, #176]	; (8002a8c <MX_GPIO_Init+0xd0>)
 80029dc:	f043 0304 	orr.w	r3, r3, #4
 80029e0:	6313      	str	r3, [r2, #48]	; 0x30
 80029e2:	4b2a      	ldr	r3, [pc, #168]	; (8002a8c <MX_GPIO_Init+0xd0>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	4b26      	ldr	r3, [pc, #152]	; (8002a8c <MX_GPIO_Init+0xd0>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	4a25      	ldr	r2, [pc, #148]	; (8002a8c <MX_GPIO_Init+0xd0>)
 80029f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029fc:	6313      	str	r3, [r2, #48]	; 0x30
 80029fe:	4b23      	ldr	r3, [pc, #140]	; (8002a8c <MX_GPIO_Init+0xd0>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	4b1f      	ldr	r3, [pc, #124]	; (8002a8c <MX_GPIO_Init+0xd0>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	4a1e      	ldr	r2, [pc, #120]	; (8002a8c <MX_GPIO_Init+0xd0>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1a:	4b1c      	ldr	r3, [pc, #112]	; (8002a8c <MX_GPIO_Init+0xd0>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	60bb      	str	r3, [r7, #8]
 8002a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	4b18      	ldr	r3, [pc, #96]	; (8002a8c <MX_GPIO_Init+0xd0>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	4a17      	ldr	r2, [pc, #92]	; (8002a8c <MX_GPIO_Init+0xd0>)
 8002a30:	f043 0302 	orr.w	r3, r3, #2
 8002a34:	6313      	str	r3, [r2, #48]	; 0x30
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <MX_GPIO_Init+0xd0>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	607b      	str	r3, [r7, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002a42:	2200      	movs	r2, #0
 8002a44:	2120      	movs	r1, #32
 8002a46:	4812      	ldr	r0, [pc, #72]	; (8002a90 <MX_GPIO_Init+0xd4>)
 8002a48:	f000 fdbc 	bl	80035c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a52:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	4619      	mov	r1, r3
 8002a62:	480c      	ldr	r0, [pc, #48]	; (8002a94 <MX_GPIO_Init+0xd8>)
 8002a64:	f000 fc2a 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002a68:	2320      	movs	r3, #32
 8002a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a74:	2300      	movs	r3, #0
 8002a76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002a78:	f107 0314 	add.w	r3, r7, #20
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4804      	ldr	r0, [pc, #16]	; (8002a90 <MX_GPIO_Init+0xd4>)
 8002a80:	f000 fc1c 	bl	80032bc <HAL_GPIO_Init>

}
 8002a84:	bf00      	nop
 8002a86:	3728      	adds	r7, #40	; 0x28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40020000 	.word	0x40020000
 8002a94:	40020800 	.word	0x40020800

08002a98 <peripherals_init>:
/**
 * @brief MCU peripherals initialization
 * 
 */
void peripherals_init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a9c:	f000 f9f8 	bl	8002e90 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8002aa0:	f7ff ff22 	bl	80028e8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002aa4:	f7ff ff8a 	bl	80029bc <MX_GPIO_Init>

  /* Init PWM led*/
  led_pwm_init();
 8002aa8:	f7ff fe14 	bl	80026d4 <led_pwm_init>
  
  /* Init Uart */
  uart_init();
 8002aac:	f7fe fd26 	bl	80014fc <uart_init>

  /*Init ITM for debugging */
  ITM_enable();
 8002ab0:	f7fe fc46 	bl	8001340 <ITM_enable>
}
 8002ab4:	bf00      	nop
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	607b      	str	r3, [r7, #4]
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <HAL_MspInit+0x4c>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac6:	4a0f      	ldr	r2, [pc, #60]	; (8002b04 <HAL_MspInit+0x4c>)
 8002ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002acc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ace:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <HAL_MspInit+0x4c>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad6:	607b      	str	r3, [r7, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	603b      	str	r3, [r7, #0]
 8002ade:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <HAL_MspInit+0x4c>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	4a08      	ldr	r2, [pc, #32]	; (8002b04 <HAL_MspInit+0x4c>)
 8002ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_MspInit+0x4c>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af2:	603b      	str	r3, [r7, #0]
 8002af4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002af6:	2007      	movs	r0, #7
 8002af8:	f000 fb0c 	bl	8003114 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
}
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40023800 	.word	0x40023800

08002b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08a      	sub	sp, #40	; 0x28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b10:	f107 0314 	add.w	r3, r7, #20
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	60da      	str	r2, [r3, #12]
 8002b1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a1d      	ldr	r2, [pc, #116]	; (8002b9c <HAL_UART_MspInit+0x94>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d133      	bne.n	8002b92 <HAL_UART_MspInit+0x8a>
  {

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ba0 <HAL_UART_MspInit+0x98>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	4a1b      	ldr	r2, [pc, #108]	; (8002ba0 <HAL_UART_MspInit+0x98>)
 8002b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b38:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3a:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <HAL_UART_MspInit+0x98>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <HAL_UART_MspInit+0x98>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	4a14      	ldr	r2, [pc, #80]	; (8002ba0 <HAL_UART_MspInit+0x98>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	6313      	str	r3, [r2, #48]	; 0x30
 8002b56:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <HAL_UART_MspInit+0x98>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b62:	230c      	movs	r3, #12
 8002b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b66:	2302      	movs	r3, #2
 8002b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b72:	2307      	movs	r3, #7
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b76:	f107 0314 	add.w	r3, r7, #20
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4809      	ldr	r0, [pc, #36]	; (8002ba4 <HAL_UART_MspInit+0x9c>)
 8002b7e:	f000 fb9d 	bl	80032bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b82:	2200      	movs	r2, #0
 8002b84:	2100      	movs	r1, #0
 8002b86:	2026      	movs	r0, #38	; 0x26
 8002b88:	f000 facf 	bl	800312a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b8c:	2026      	movs	r0, #38	; 0x26
 8002b8e:	f000 fae8 	bl	8003162 <HAL_NVIC_EnableIRQ>
  }
}
 8002b92:	bf00      	nop
 8002b94:	3728      	adds	r7, #40	; 0x28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40004400 	.word	0x40004400
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	40020000 	.word	0x40020000

08002ba8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb8:	d10d      	bne.n	8002bd6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	4a08      	ldr	r2, [pc, #32]	; (8002be4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bca:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002bd6:	bf00      	nop
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40023800 	.word	0x40023800

08002be8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf0:	f107 030c 	add.w	r3, r7, #12
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c08:	d11d      	bne.n	8002c46 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <HAL_TIM_MspPostInit+0x68>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	4a0f      	ldr	r2, [pc, #60]	; (8002c50 <HAL_TIM_MspPostInit+0x68>)
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <HAL_TIM_MspPostInit+0x68>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c26:	2320      	movs	r3, #32
 8002c28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c36:	2301      	movs	r3, #1
 8002c38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3a:	f107 030c 	add.w	r3, r7, #12
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4804      	ldr	r0, [pc, #16]	; (8002c54 <HAL_TIM_MspPostInit+0x6c>)
 8002c42:	f000 fb3b 	bl	80032bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002c46:	bf00      	nop
 8002c48:	3720      	adds	r7, #32
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40020000 	.word	0x40020000

08002c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  while (1)
 8002c5c:	e7fe      	b.n	8002c5c <NMI_Handler+0x4>

08002c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	af00      	add	r7, sp, #0
  while (1)
 8002c62:	e7fe      	b.n	8002c62 <HardFault_Handler+0x4>

08002c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  while (1)
 8002c68:	e7fe      	b.n	8002c68 <MemManage_Handler+0x4>

08002c6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	af00      	add	r7, sp, #0
  while (1)
 8002c6e:	e7fe      	b.n	8002c6e <BusFault_Handler+0x4>

08002c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  while (1)
 8002c74:	e7fe      	b.n	8002c74 <UsageFault_Handler+0x4>

08002c76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c76:	b480      	push	{r7}
 8002c78:	af00      	add	r7, sp, #0

}
 8002c7a:	bf00      	nop
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0

}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0

}
 8002c96:	bf00      	nop
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002ca4:	f7fe fbec 	bl	8001480 <HAL_SYSTICK_Callback>
  HAL_IncTick();
 8002ca8:	f000 f944 	bl	8002f34 <HAL_IncTick>
}
 8002cac:	bf00      	nop
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8002cb4:	4802      	ldr	r0, [pc, #8]	; (8002cc0 <USART2_IRQHandler+0x10>)
 8002cb6:	f001 febf 	bl	8004a38 <HAL_UART_IRQHandler>
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	200001f8 	.word	0x200001f8

08002cc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
	return 1;
 8002cc8:	2301      	movs	r3, #1
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <_kill>:

int _kill(int pid, int sig)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002cde:	f002 fdb5 	bl	800584c <__errno>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2216      	movs	r2, #22
 8002ce6:	601a      	str	r2, [r3, #0]
	return -1;
 8002ce8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <_exit>:

void _exit (int status)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff ffe7 	bl	8002cd4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d06:	e7fe      	b.n	8002d06 <_exit+0x12>

08002d08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	e00a      	b.n	8002d30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d1a:	f3af 8000 	nop.w
 8002d1e:	4601      	mov	r1, r0
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	60ba      	str	r2, [r7, #8]
 8002d26:	b2ca      	uxtb	r2, r1
 8002d28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	dbf0      	blt.n	8002d1a <_read+0x12>
	}

return len;
 8002d38:	687b      	ldr	r3, [r7, #4]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
	return -1;
 8002d4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d6a:	605a      	str	r2, [r3, #4]
	return 0;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <_isatty>:

int _isatty(int file)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
	return 1;
 8002d82:	2301      	movs	r3, #1
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
	return 0;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002db4:	4a14      	ldr	r2, [pc, #80]	; (8002e08 <_sbrk+0x5c>)
 8002db6:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <_sbrk+0x60>)
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dc0:	4b13      	ldr	r3, [pc, #76]	; (8002e10 <_sbrk+0x64>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d102      	bne.n	8002dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dc8:	4b11      	ldr	r3, [pc, #68]	; (8002e10 <_sbrk+0x64>)
 8002dca:	4a12      	ldr	r2, [pc, #72]	; (8002e14 <_sbrk+0x68>)
 8002dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dce:	4b10      	ldr	r3, [pc, #64]	; (8002e10 <_sbrk+0x64>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d207      	bcs.n	8002dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ddc:	f002 fd36 	bl	800584c <__errno>
 8002de0:	4603      	mov	r3, r0
 8002de2:	220c      	movs	r2, #12
 8002de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002de6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dea:	e009      	b.n	8002e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dec:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <_sbrk+0x64>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002df2:	4b07      	ldr	r3, [pc, #28]	; (8002e10 <_sbrk+0x64>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	4a05      	ldr	r2, [pc, #20]	; (8002e10 <_sbrk+0x64>)
 8002dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	20020000 	.word	0x20020000
 8002e0c:	00000400 	.word	0x00000400
 8002e10:	20000d70 	.word	0x20000d70
 8002e14:	20000d88 	.word	0x20000d88

08002e18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e1c:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <SystemInit+0x20>)
 8002e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e22:	4a05      	ldr	r2, [pc, #20]	; (8002e38 <SystemInit+0x20>)
 8002e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8002e3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e40:	480d      	ldr	r0, [pc, #52]	; (8002e78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e42:	490e      	ldr	r1, [pc, #56]	; (8002e7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e44:	4a0e      	ldr	r2, [pc, #56]	; (8002e80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e48:	e002      	b.n	8002e50 <LoopCopyDataInit>

08002e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e4e:	3304      	adds	r3, #4

08002e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e54:	d3f9      	bcc.n	8002e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e56:	4a0b      	ldr	r2, [pc, #44]	; (8002e84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e58:	4c0b      	ldr	r4, [pc, #44]	; (8002e88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e5c:	e001      	b.n	8002e62 <LoopFillZerobss>

08002e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e60:	3204      	adds	r2, #4

08002e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e64:	d3fb      	bcc.n	8002e5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e66:	f7ff ffd7 	bl	8002e18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e6a:	f002 fd07 	bl	800587c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e6e:	f7ff fcff 	bl	8002870 <main>
  bx  lr    
 8002e72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e7c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002e80:	08008e40 	.word	0x08008e40
  ldr r2, =_sbss
 8002e84:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002e88:	20000d88 	.word	0x20000d88

08002e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e8c:	e7fe      	b.n	8002e8c <ADC_IRQHandler>
	...

08002e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e94:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <HAL_Init+0x40>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a0d      	ldr	r2, [pc, #52]	; (8002ed0 <HAL_Init+0x40>)
 8002e9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <HAL_Init+0x40>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a0a      	ldr	r2, [pc, #40]	; (8002ed0 <HAL_Init+0x40>)
 8002ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eac:	4b08      	ldr	r3, [pc, #32]	; (8002ed0 <HAL_Init+0x40>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a07      	ldr	r2, [pc, #28]	; (8002ed0 <HAL_Init+0x40>)
 8002eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eb8:	2003      	movs	r0, #3
 8002eba:	f000 f92b 	bl	8003114 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	f000 f808 	bl	8002ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ec4:	f7ff fdf8 	bl	8002ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40023c00 	.word	0x40023c00

08002ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002edc:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <HAL_InitTick+0x54>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <HAL_InitTick+0x58>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 f943 	bl	800317e <HAL_SYSTICK_Config>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e00e      	b.n	8002f20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b0f      	cmp	r3, #15
 8002f06:	d80a      	bhi.n	8002f1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f10:	f000 f90b 	bl	800312a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f14:	4a06      	ldr	r2, [pc, #24]	; (8002f30 <HAL_InitTick+0x5c>)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e000      	b.n	8002f20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	20000000 	.word	0x20000000
 8002f2c:	20000008 	.word	0x20000008
 8002f30:	20000004 	.word	0x20000004

08002f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <HAL_IncTick+0x20>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <HAL_IncTick+0x24>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4413      	add	r3, r2
 8002f44:	4a04      	ldr	r2, [pc, #16]	; (8002f58 <HAL_IncTick+0x24>)
 8002f46:	6013      	str	r3, [r2, #0]
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	20000008 	.word	0x20000008
 8002f58:	20000d74 	.word	0x20000d74

08002f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f60:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <HAL_GetTick+0x14>)
 8002f62:	681b      	ldr	r3, [r3, #0]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	20000d74 	.word	0x20000d74

08002f74 <__NVIC_SetPriorityGrouping>:
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f84:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f90:	4013      	ands	r3, r2
 8002f92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fa6:	4a04      	ldr	r2, [pc, #16]	; (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	60d3      	str	r3, [r2, #12]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <__NVIC_GetPriorityGrouping>:
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc0:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	0a1b      	lsrs	r3, r3, #8
 8002fc6:	f003 0307 	and.w	r3, r3, #7
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <__NVIC_EnableIRQ>:
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	db0b      	blt.n	8003002 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	f003 021f 	and.w	r2, r3, #31
 8002ff0:	4907      	ldr	r1, [pc, #28]	; (8003010 <__NVIC_EnableIRQ+0x38>)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8002ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	e000e100 	.word	0xe000e100

08003014 <__NVIC_SetPriority>:
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	6039      	str	r1, [r7, #0]
 800301e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003024:	2b00      	cmp	r3, #0
 8003026:	db0a      	blt.n	800303e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	b2da      	uxtb	r2, r3
 800302c:	490c      	ldr	r1, [pc, #48]	; (8003060 <__NVIC_SetPriority+0x4c>)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	0112      	lsls	r2, r2, #4
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	440b      	add	r3, r1
 8003038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800303c:	e00a      	b.n	8003054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	b2da      	uxtb	r2, r3
 8003042:	4908      	ldr	r1, [pc, #32]	; (8003064 <__NVIC_SetPriority+0x50>)
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	3b04      	subs	r3, #4
 800304c:	0112      	lsls	r2, r2, #4
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	440b      	add	r3, r1
 8003052:	761a      	strb	r2, [r3, #24]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	e000e100 	.word	0xe000e100
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <NVIC_EncodePriority>:
{
 8003068:	b480      	push	{r7}
 800306a:	b089      	sub	sp, #36	; 0x24
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f1c3 0307 	rsb	r3, r3, #7
 8003082:	2b04      	cmp	r3, #4
 8003084:	bf28      	it	cs
 8003086:	2304      	movcs	r3, #4
 8003088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3304      	adds	r3, #4
 800308e:	2b06      	cmp	r3, #6
 8003090:	d902      	bls.n	8003098 <NVIC_EncodePriority+0x30>
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3b03      	subs	r3, #3
 8003096:	e000      	b.n	800309a <NVIC_EncodePriority+0x32>
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800309c:	f04f 32ff 	mov.w	r2, #4294967295
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43da      	mvns	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	401a      	ands	r2, r3
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b0:	f04f 31ff 	mov.w	r1, #4294967295
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ba:	43d9      	mvns	r1, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c0:	4313      	orrs	r3, r2
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3724      	adds	r7, #36	; 0x24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <SysTick_Config>:
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3b01      	subs	r3, #1
 80030dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030e0:	d301      	bcc.n	80030e6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80030e2:	2301      	movs	r3, #1
 80030e4:	e00f      	b.n	8003106 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030e6:	4a0a      	ldr	r2, [pc, #40]	; (8003110 <SysTick_Config+0x40>)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ee:	210f      	movs	r1, #15
 80030f0:	f04f 30ff 	mov.w	r0, #4294967295
 80030f4:	f7ff ff8e 	bl	8003014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030f8:	4b05      	ldr	r3, [pc, #20]	; (8003110 <SysTick_Config+0x40>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030fe:	4b04      	ldr	r3, [pc, #16]	; (8003110 <SysTick_Config+0x40>)
 8003100:	2207      	movs	r2, #7
 8003102:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	e000e010 	.word	0xe000e010

08003114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff ff29 	bl	8002f74 <__NVIC_SetPriorityGrouping>
}
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800312a:	b580      	push	{r7, lr}
 800312c:	b086      	sub	sp, #24
 800312e:	af00      	add	r7, sp, #0
 8003130:	4603      	mov	r3, r0
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	607a      	str	r2, [r7, #4]
 8003136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800313c:	f7ff ff3e 	bl	8002fbc <__NVIC_GetPriorityGrouping>
 8003140:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	6978      	ldr	r0, [r7, #20]
 8003148:	f7ff ff8e 	bl	8003068 <NVIC_EncodePriority>
 800314c:	4602      	mov	r2, r0
 800314e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003152:	4611      	mov	r1, r2
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff ff5d 	bl	8003014 <__NVIC_SetPriority>
}
 800315a:	bf00      	nop
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	4603      	mov	r3, r0
 800316a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800316c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff ff31 	bl	8002fd8 <__NVIC_EnableIRQ>
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff ffa2 	bl	80030d0 <SysTick_Config>
 800318c:	4603      	mov	r3, r0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b084      	sub	sp, #16
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031a4:	f7ff feda 	bl	8002f5c <HAL_GetTick>
 80031a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d008      	beq.n	80031c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2280      	movs	r2, #128	; 0x80
 80031ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e052      	b.n	800326e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0216 	bic.w	r2, r2, #22
 80031d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d103      	bne.n	80031f8 <HAL_DMA_Abort+0x62>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d007      	beq.n	8003208 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0208 	bic.w	r2, r2, #8
 8003206:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0201 	bic.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003218:	e013      	b.n	8003242 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800321a:	f7ff fe9f 	bl	8002f5c <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b05      	cmp	r3, #5
 8003226:	d90c      	bls.n	8003242 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2220      	movs	r2, #32
 800322c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2203      	movs	r2, #3
 8003232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e015      	b.n	800326e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1e4      	bne.n	800321a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003254:	223f      	movs	r2, #63	; 0x3f
 8003256:	409a      	lsls	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d004      	beq.n	8003294 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2280      	movs	r2, #128	; 0x80
 800328e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e00c      	b.n	80032ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2205      	movs	r2, #5
 8003298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032bc:	b480      	push	{r7}
 80032be:	b089      	sub	sp, #36	; 0x24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
 80032d6:	e159      	b.n	800358c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032d8:	2201      	movs	r2, #1
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4013      	ands	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	f040 8148 	bne.w	8003586 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d005      	beq.n	800330e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800330a:	2b02      	cmp	r3, #2
 800330c:	d130      	bne.n	8003370 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	2203      	movs	r2, #3
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4313      	orrs	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003344:	2201      	movs	r2, #1
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	091b      	lsrs	r3, r3, #4
 800335a:	f003 0201 	and.w	r2, r3, #1
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	2b03      	cmp	r3, #3
 800337a:	d017      	beq.n	80033ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	2203      	movs	r2, #3
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4013      	ands	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d123      	bne.n	8003400 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	08da      	lsrs	r2, r3, #3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3208      	adds	r2, #8
 80033c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	220f      	movs	r2, #15
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4013      	ands	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	08da      	lsrs	r2, r3, #3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3208      	adds	r2, #8
 80033fa:	69b9      	ldr	r1, [r7, #24]
 80033fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	2203      	movs	r2, #3
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4013      	ands	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f003 0203 	and.w	r2, r3, #3
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 80a2 	beq.w	8003586 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	4b57      	ldr	r3, [pc, #348]	; (80035a4 <HAL_GPIO_Init+0x2e8>)
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	4a56      	ldr	r2, [pc, #344]	; (80035a4 <HAL_GPIO_Init+0x2e8>)
 800344c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003450:	6453      	str	r3, [r2, #68]	; 0x44
 8003452:	4b54      	ldr	r3, [pc, #336]	; (80035a4 <HAL_GPIO_Init+0x2e8>)
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800345e:	4a52      	ldr	r2, [pc, #328]	; (80035a8 <HAL_GPIO_Init+0x2ec>)
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	089b      	lsrs	r3, r3, #2
 8003464:	3302      	adds	r3, #2
 8003466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800346a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	220f      	movs	r2, #15
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43db      	mvns	r3, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4013      	ands	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a49      	ldr	r2, [pc, #292]	; (80035ac <HAL_GPIO_Init+0x2f0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d019      	beq.n	80034be <HAL_GPIO_Init+0x202>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a48      	ldr	r2, [pc, #288]	; (80035b0 <HAL_GPIO_Init+0x2f4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d013      	beq.n	80034ba <HAL_GPIO_Init+0x1fe>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a47      	ldr	r2, [pc, #284]	; (80035b4 <HAL_GPIO_Init+0x2f8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00d      	beq.n	80034b6 <HAL_GPIO_Init+0x1fa>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a46      	ldr	r2, [pc, #280]	; (80035b8 <HAL_GPIO_Init+0x2fc>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d007      	beq.n	80034b2 <HAL_GPIO_Init+0x1f6>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a45      	ldr	r2, [pc, #276]	; (80035bc <HAL_GPIO_Init+0x300>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d101      	bne.n	80034ae <HAL_GPIO_Init+0x1f2>
 80034aa:	2304      	movs	r3, #4
 80034ac:	e008      	b.n	80034c0 <HAL_GPIO_Init+0x204>
 80034ae:	2307      	movs	r3, #7
 80034b0:	e006      	b.n	80034c0 <HAL_GPIO_Init+0x204>
 80034b2:	2303      	movs	r3, #3
 80034b4:	e004      	b.n	80034c0 <HAL_GPIO_Init+0x204>
 80034b6:	2302      	movs	r3, #2
 80034b8:	e002      	b.n	80034c0 <HAL_GPIO_Init+0x204>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <HAL_GPIO_Init+0x204>
 80034be:	2300      	movs	r3, #0
 80034c0:	69fa      	ldr	r2, [r7, #28]
 80034c2:	f002 0203 	and.w	r2, r2, #3
 80034c6:	0092      	lsls	r2, r2, #2
 80034c8:	4093      	lsls	r3, r2
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034d0:	4935      	ldr	r1, [pc, #212]	; (80035a8 <HAL_GPIO_Init+0x2ec>)
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	089b      	lsrs	r3, r3, #2
 80034d6:	3302      	adds	r3, #2
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034de:	4b38      	ldr	r3, [pc, #224]	; (80035c0 <HAL_GPIO_Init+0x304>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	43db      	mvns	r3, r3
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4013      	ands	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003502:	4a2f      	ldr	r2, [pc, #188]	; (80035c0 <HAL_GPIO_Init+0x304>)
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003508:	4b2d      	ldr	r3, [pc, #180]	; (80035c0 <HAL_GPIO_Init+0x304>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	43db      	mvns	r3, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4013      	ands	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	4313      	orrs	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800352c:	4a24      	ldr	r2, [pc, #144]	; (80035c0 <HAL_GPIO_Init+0x304>)
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003532:	4b23      	ldr	r3, [pc, #140]	; (80035c0 <HAL_GPIO_Init+0x304>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	43db      	mvns	r3, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4013      	ands	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003556:	4a1a      	ldr	r2, [pc, #104]	; (80035c0 <HAL_GPIO_Init+0x304>)
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800355c:	4b18      	ldr	r3, [pc, #96]	; (80035c0 <HAL_GPIO_Init+0x304>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	43db      	mvns	r3, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003580:	4a0f      	ldr	r2, [pc, #60]	; (80035c0 <HAL_GPIO_Init+0x304>)
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	3301      	adds	r3, #1
 800358a:	61fb      	str	r3, [r7, #28]
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	2b0f      	cmp	r3, #15
 8003590:	f67f aea2 	bls.w	80032d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003594:	bf00      	nop
 8003596:	bf00      	nop
 8003598:	3724      	adds	r7, #36	; 0x24
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40023800 	.word	0x40023800
 80035a8:	40013800 	.word	0x40013800
 80035ac:	40020000 	.word	0x40020000
 80035b0:	40020400 	.word	0x40020400
 80035b4:	40020800 	.word	0x40020800
 80035b8:	40020c00 	.word	0x40020c00
 80035bc:	40021000 	.word	0x40021000
 80035c0:	40013c00 	.word	0x40013c00

080035c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	807b      	strh	r3, [r7, #2]
 80035d0:	4613      	mov	r3, r2
 80035d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035d4:	787b      	ldrb	r3, [r7, #1]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035da:	887a      	ldrh	r2, [r7, #2]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035e0:	e003      	b.n	80035ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035e2:	887b      	ldrh	r3, [r7, #2]
 80035e4:	041a      	lsls	r2, r3, #16
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	619a      	str	r2, [r3, #24]
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
	...

080035f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e267      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d075      	beq.n	8003702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003616:	4b88      	ldr	r3, [pc, #544]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 030c 	and.w	r3, r3, #12
 800361e:	2b04      	cmp	r3, #4
 8003620:	d00c      	beq.n	800363c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003622:	4b85      	ldr	r3, [pc, #532]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800362a:	2b08      	cmp	r3, #8
 800362c:	d112      	bne.n	8003654 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800362e:	4b82      	ldr	r3, [pc, #520]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800363a:	d10b      	bne.n	8003654 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800363c:	4b7e      	ldr	r3, [pc, #504]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d05b      	beq.n	8003700 <HAL_RCC_OscConfig+0x108>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d157      	bne.n	8003700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e242      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365c:	d106      	bne.n	800366c <HAL_RCC_OscConfig+0x74>
 800365e:	4b76      	ldr	r3, [pc, #472]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a75      	ldr	r2, [pc, #468]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	e01d      	b.n	80036a8 <HAL_RCC_OscConfig+0xb0>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003674:	d10c      	bne.n	8003690 <HAL_RCC_OscConfig+0x98>
 8003676:	4b70      	ldr	r3, [pc, #448]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a6f      	ldr	r2, [pc, #444]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800367c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	4b6d      	ldr	r3, [pc, #436]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a6c      	ldr	r2, [pc, #432]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	e00b      	b.n	80036a8 <HAL_RCC_OscConfig+0xb0>
 8003690:	4b69      	ldr	r3, [pc, #420]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a68      	ldr	r2, [pc, #416]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800369a:	6013      	str	r3, [r2, #0]
 800369c:	4b66      	ldr	r3, [pc, #408]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a65      	ldr	r2, [pc, #404]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 80036a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d013      	beq.n	80036d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7ff fc54 	bl	8002f5c <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036b8:	f7ff fc50 	bl	8002f5c <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b64      	cmp	r3, #100	; 0x64
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e207      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ca:	4b5b      	ldr	r3, [pc, #364]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f0      	beq.n	80036b8 <HAL_RCC_OscConfig+0xc0>
 80036d6:	e014      	b.n	8003702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d8:	f7ff fc40 	bl	8002f5c <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036e0:	f7ff fc3c 	bl	8002f5c <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b64      	cmp	r3, #100	; 0x64
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e1f3      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036f2:	4b51      	ldr	r3, [pc, #324]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0xe8>
 80036fe:	e000      	b.n	8003702 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d063      	beq.n	80037d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800370e:	4b4a      	ldr	r3, [pc, #296]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00b      	beq.n	8003732 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800371a:	4b47      	ldr	r3, [pc, #284]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003722:	2b08      	cmp	r3, #8
 8003724:	d11c      	bne.n	8003760 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003726:	4b44      	ldr	r3, [pc, #272]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d116      	bne.n	8003760 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003732:	4b41      	ldr	r3, [pc, #260]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d005      	beq.n	800374a <HAL_RCC_OscConfig+0x152>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d001      	beq.n	800374a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e1c7      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800374a:	4b3b      	ldr	r3, [pc, #236]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4937      	ldr	r1, [pc, #220]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800375a:	4313      	orrs	r3, r2
 800375c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375e:	e03a      	b.n	80037d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d020      	beq.n	80037aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003768:	4b34      	ldr	r3, [pc, #208]	; (800383c <HAL_RCC_OscConfig+0x244>)
 800376a:	2201      	movs	r2, #1
 800376c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376e:	f7ff fbf5 	bl	8002f5c <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003776:	f7ff fbf1 	bl	8002f5c <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e1a8      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003788:	4b2b      	ldr	r3, [pc, #172]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003794:	4b28      	ldr	r3, [pc, #160]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	4925      	ldr	r1, [pc, #148]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	600b      	str	r3, [r1, #0]
 80037a8:	e015      	b.n	80037d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037aa:	4b24      	ldr	r3, [pc, #144]	; (800383c <HAL_RCC_OscConfig+0x244>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b0:	f7ff fbd4 	bl	8002f5c <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037b8:	f7ff fbd0 	bl	8002f5c <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e187      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ca:	4b1b      	ldr	r3, [pc, #108]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d036      	beq.n	8003850 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d016      	beq.n	8003818 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ea:	4b15      	ldr	r3, [pc, #84]	; (8003840 <HAL_RCC_OscConfig+0x248>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f0:	f7ff fbb4 	bl	8002f5c <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037f8:	f7ff fbb0 	bl	8002f5c <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e167      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800380a:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800380c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCC_OscConfig+0x200>
 8003816:	e01b      	b.n	8003850 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003818:	4b09      	ldr	r3, [pc, #36]	; (8003840 <HAL_RCC_OscConfig+0x248>)
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381e:	f7ff fb9d 	bl	8002f5c <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003824:	e00e      	b.n	8003844 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003826:	f7ff fb99 	bl	8002f5c <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d907      	bls.n	8003844 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e150      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
 8003838:	40023800 	.word	0x40023800
 800383c:	42470000 	.word	0x42470000
 8003840:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003844:	4b88      	ldr	r3, [pc, #544]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1ea      	bne.n	8003826 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 8097 	beq.w	800398c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800385e:	2300      	movs	r3, #0
 8003860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003862:	4b81      	ldr	r3, [pc, #516]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10f      	bne.n	800388e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800386e:	2300      	movs	r3, #0
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	4b7d      	ldr	r3, [pc, #500]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	4a7c      	ldr	r2, [pc, #496]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800387c:	6413      	str	r3, [r2, #64]	; 0x40
 800387e:	4b7a      	ldr	r3, [pc, #488]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003886:	60bb      	str	r3, [r7, #8]
 8003888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800388a:	2301      	movs	r3, #1
 800388c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388e:	4b77      	ldr	r3, [pc, #476]	; (8003a6c <HAL_RCC_OscConfig+0x474>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003896:	2b00      	cmp	r3, #0
 8003898:	d118      	bne.n	80038cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800389a:	4b74      	ldr	r3, [pc, #464]	; (8003a6c <HAL_RCC_OscConfig+0x474>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a73      	ldr	r2, [pc, #460]	; (8003a6c <HAL_RCC_OscConfig+0x474>)
 80038a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038a6:	f7ff fb59 	bl	8002f5c <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ae:	f7ff fb55 	bl	8002f5c <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e10c      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c0:	4b6a      	ldr	r3, [pc, #424]	; (8003a6c <HAL_RCC_OscConfig+0x474>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0f0      	beq.n	80038ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d106      	bne.n	80038e2 <HAL_RCC_OscConfig+0x2ea>
 80038d4:	4b64      	ldr	r3, [pc, #400]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80038d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d8:	4a63      	ldr	r2, [pc, #396]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80038da:	f043 0301 	orr.w	r3, r3, #1
 80038de:	6713      	str	r3, [r2, #112]	; 0x70
 80038e0:	e01c      	b.n	800391c <HAL_RCC_OscConfig+0x324>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	2b05      	cmp	r3, #5
 80038e8:	d10c      	bne.n	8003904 <HAL_RCC_OscConfig+0x30c>
 80038ea:	4b5f      	ldr	r3, [pc, #380]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80038ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ee:	4a5e      	ldr	r2, [pc, #376]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80038f0:	f043 0304 	orr.w	r3, r3, #4
 80038f4:	6713      	str	r3, [r2, #112]	; 0x70
 80038f6:	4b5c      	ldr	r3, [pc, #368]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fa:	4a5b      	ldr	r2, [pc, #364]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80038fc:	f043 0301 	orr.w	r3, r3, #1
 8003900:	6713      	str	r3, [r2, #112]	; 0x70
 8003902:	e00b      	b.n	800391c <HAL_RCC_OscConfig+0x324>
 8003904:	4b58      	ldr	r3, [pc, #352]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	4a57      	ldr	r2, [pc, #348]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 800390a:	f023 0301 	bic.w	r3, r3, #1
 800390e:	6713      	str	r3, [r2, #112]	; 0x70
 8003910:	4b55      	ldr	r3, [pc, #340]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003914:	4a54      	ldr	r2, [pc, #336]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003916:	f023 0304 	bic.w	r3, r3, #4
 800391a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d015      	beq.n	8003950 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003924:	f7ff fb1a 	bl	8002f5c <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800392a:	e00a      	b.n	8003942 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800392c:	f7ff fb16 	bl	8002f5c <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	f241 3288 	movw	r2, #5000	; 0x1388
 800393a:	4293      	cmp	r3, r2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e0cb      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003942:	4b49      	ldr	r3, [pc, #292]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0ee      	beq.n	800392c <HAL_RCC_OscConfig+0x334>
 800394e:	e014      	b.n	800397a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003950:	f7ff fb04 	bl	8002f5c <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003956:	e00a      	b.n	800396e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003958:	f7ff fb00 	bl	8002f5c <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	; 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e0b5      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800396e:	4b3e      	ldr	r3, [pc, #248]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1ee      	bne.n	8003958 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800397a:	7dfb      	ldrb	r3, [r7, #23]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d105      	bne.n	800398c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003980:	4b39      	ldr	r3, [pc, #228]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	4a38      	ldr	r2, [pc, #224]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800398a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 80a1 	beq.w	8003ad8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003996:	4b34      	ldr	r3, [pc, #208]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d05c      	beq.n	8003a5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d141      	bne.n	8003a2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039aa:	4b31      	ldr	r3, [pc, #196]	; (8003a70 <HAL_RCC_OscConfig+0x478>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b0:	f7ff fad4 	bl	8002f5c <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b8:	f7ff fad0 	bl	8002f5c <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e087      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ca:	4b27      	ldr	r3, [pc, #156]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69da      	ldr	r2, [r3, #28]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	019b      	lsls	r3, r3, #6
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	085b      	lsrs	r3, r3, #1
 80039ee:	3b01      	subs	r3, #1
 80039f0:	041b      	lsls	r3, r3, #16
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	061b      	lsls	r3, r3, #24
 80039fa:	491b      	ldr	r1, [pc, #108]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a00:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <HAL_RCC_OscConfig+0x478>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a06:	f7ff faa9 	bl	8002f5c <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a0e:	f7ff faa5 	bl	8002f5c <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e05c      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a20:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0f0      	beq.n	8003a0e <HAL_RCC_OscConfig+0x416>
 8003a2c:	e054      	b.n	8003ad8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2e:	4b10      	ldr	r3, [pc, #64]	; (8003a70 <HAL_RCC_OscConfig+0x478>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7ff fa92 	bl	8002f5c <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7ff fa8e 	bl	8002f5c <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e045      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x444>
 8003a5a:	e03d      	b.n	8003ad8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d107      	bne.n	8003a74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e038      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	40007000 	.word	0x40007000
 8003a70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a74:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <HAL_RCC_OscConfig+0x4ec>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d028      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d121      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d11a      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003aaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d111      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aba:	085b      	lsrs	r3, r3, #1
 8003abc:	3b01      	subs	r3, #1
 8003abe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d107      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d001      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e000      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40023800 	.word	0x40023800

08003ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0cc      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003afc:	4b68      	ldr	r3, [pc, #416]	; (8003ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d90c      	bls.n	8003b24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0a:	4b65      	ldr	r3, [pc, #404]	; (8003ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b12:	4b63      	ldr	r3, [pc, #396]	; (8003ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d001      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0b8      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d020      	beq.n	8003b72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b3c:	4b59      	ldr	r3, [pc, #356]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	4a58      	ldr	r2, [pc, #352]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b54:	4b53      	ldr	r3, [pc, #332]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	4a52      	ldr	r2, [pc, #328]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b60:	4b50      	ldr	r3, [pc, #320]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	494d      	ldr	r1, [pc, #308]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d044      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d107      	bne.n	8003b96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b86:	4b47      	ldr	r3, [pc, #284]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d119      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e07f      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d003      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d107      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba6:	4b3f      	ldr	r3, [pc, #252]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d109      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e06f      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb6:	4b3b      	ldr	r3, [pc, #236]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e067      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bc6:	4b37      	ldr	r3, [pc, #220]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f023 0203 	bic.w	r2, r3, #3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	4934      	ldr	r1, [pc, #208]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bd8:	f7ff f9c0 	bl	8002f5c <HAL_GetTick>
 8003bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bde:	e00a      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be0:	f7ff f9bc 	bl	8002f5c <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e04f      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf6:	4b2b      	ldr	r3, [pc, #172]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 020c 	and.w	r2, r3, #12
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d1eb      	bne.n	8003be0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c08:	4b25      	ldr	r3, [pc, #148]	; (8003ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d20c      	bcs.n	8003c30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c16:	4b22      	ldr	r3, [pc, #136]	; (8003ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1e:	4b20      	ldr	r3, [pc, #128]	; (8003ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d001      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e032      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d008      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c3c:	4b19      	ldr	r3, [pc, #100]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	4916      	ldr	r1, [pc, #88]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d009      	beq.n	8003c6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c5a:	4b12      	ldr	r3, [pc, #72]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	490e      	ldr	r1, [pc, #56]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c6e:	f000 f821 	bl	8003cb4 <HAL_RCC_GetSysClockFreq>
 8003c72:	4602      	mov	r2, r0
 8003c74:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	091b      	lsrs	r3, r3, #4
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	490a      	ldr	r1, [pc, #40]	; (8003ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c80:	5ccb      	ldrb	r3, [r1, r3]
 8003c82:	fa22 f303 	lsr.w	r3, r2, r3
 8003c86:	4a09      	ldr	r2, [pc, #36]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c8a:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff f920 	bl	8002ed4 <HAL_InitTick>

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40023c00 	.word	0x40023c00
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	08008a38 	.word	0x08008a38
 8003cac:	20000000 	.word	0x20000000
 8003cb0:	20000004 	.word	0x20000004

08003cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cb8:	b094      	sub	sp, #80	; 0x50
 8003cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ccc:	4b79      	ldr	r3, [pc, #484]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 030c 	and.w	r3, r3, #12
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d00d      	beq.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	f200 80e1 	bhi.w	8003ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d003      	beq.n	8003cee <HAL_RCC_GetSysClockFreq+0x3a>
 8003ce6:	e0db      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ce8:	4b73      	ldr	r3, [pc, #460]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003cec:	e0db      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cee:	4b73      	ldr	r3, [pc, #460]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x208>)
 8003cf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cf2:	e0d8      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cf4:	4b6f      	ldr	r3, [pc, #444]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cfc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cfe:	4b6d      	ldr	r3, [pc, #436]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d063      	beq.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d0a:	4b6a      	ldr	r3, [pc, #424]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	099b      	lsrs	r3, r3, #6
 8003d10:	2200      	movs	r2, #0
 8003d12:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d1c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d1e:	2300      	movs	r3, #0
 8003d20:	637b      	str	r3, [r7, #52]	; 0x34
 8003d22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d26:	4622      	mov	r2, r4
 8003d28:	462b      	mov	r3, r5
 8003d2a:	f04f 0000 	mov.w	r0, #0
 8003d2e:	f04f 0100 	mov.w	r1, #0
 8003d32:	0159      	lsls	r1, r3, #5
 8003d34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d38:	0150      	lsls	r0, r2, #5
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4621      	mov	r1, r4
 8003d40:	1a51      	subs	r1, r2, r1
 8003d42:	6139      	str	r1, [r7, #16]
 8003d44:	4629      	mov	r1, r5
 8003d46:	eb63 0301 	sbc.w	r3, r3, r1
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d58:	4659      	mov	r1, fp
 8003d5a:	018b      	lsls	r3, r1, #6
 8003d5c:	4651      	mov	r1, sl
 8003d5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d62:	4651      	mov	r1, sl
 8003d64:	018a      	lsls	r2, r1, #6
 8003d66:	4651      	mov	r1, sl
 8003d68:	ebb2 0801 	subs.w	r8, r2, r1
 8003d6c:	4659      	mov	r1, fp
 8003d6e:	eb63 0901 	sbc.w	r9, r3, r1
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d86:	4690      	mov	r8, r2
 8003d88:	4699      	mov	r9, r3
 8003d8a:	4623      	mov	r3, r4
 8003d8c:	eb18 0303 	adds.w	r3, r8, r3
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	462b      	mov	r3, r5
 8003d94:	eb49 0303 	adc.w	r3, r9, r3
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003da6:	4629      	mov	r1, r5
 8003da8:	024b      	lsls	r3, r1, #9
 8003daa:	4621      	mov	r1, r4
 8003dac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003db0:	4621      	mov	r1, r4
 8003db2:	024a      	lsls	r2, r1, #9
 8003db4:	4610      	mov	r0, r2
 8003db6:	4619      	mov	r1, r3
 8003db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dba:	2200      	movs	r2, #0
 8003dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dc4:	f7fc fef8 	bl	8000bb8 <__aeabi_uldivmod>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4613      	mov	r3, r2
 8003dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dd0:	e058      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd2:	4b38      	ldr	r3, [pc, #224]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	099b      	lsrs	r3, r3, #6
 8003dd8:	2200      	movs	r2, #0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	4611      	mov	r1, r2
 8003dde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003de2:	623b      	str	r3, [r7, #32]
 8003de4:	2300      	movs	r3, #0
 8003de6:	627b      	str	r3, [r7, #36]	; 0x24
 8003de8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003dec:	4642      	mov	r2, r8
 8003dee:	464b      	mov	r3, r9
 8003df0:	f04f 0000 	mov.w	r0, #0
 8003df4:	f04f 0100 	mov.w	r1, #0
 8003df8:	0159      	lsls	r1, r3, #5
 8003dfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dfe:	0150      	lsls	r0, r2, #5
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4641      	mov	r1, r8
 8003e06:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e0a:	4649      	mov	r1, r9
 8003e0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e24:	ebb2 040a 	subs.w	r4, r2, sl
 8003e28:	eb63 050b 	sbc.w	r5, r3, fp
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	00eb      	lsls	r3, r5, #3
 8003e36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e3a:	00e2      	lsls	r2, r4, #3
 8003e3c:	4614      	mov	r4, r2
 8003e3e:	461d      	mov	r5, r3
 8003e40:	4643      	mov	r3, r8
 8003e42:	18e3      	adds	r3, r4, r3
 8003e44:	603b      	str	r3, [r7, #0]
 8003e46:	464b      	mov	r3, r9
 8003e48:	eb45 0303 	adc.w	r3, r5, r3
 8003e4c:	607b      	str	r3, [r7, #4]
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	f04f 0300 	mov.w	r3, #0
 8003e56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	028b      	lsls	r3, r1, #10
 8003e5e:	4621      	mov	r1, r4
 8003e60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e64:	4621      	mov	r1, r4
 8003e66:	028a      	lsls	r2, r1, #10
 8003e68:	4610      	mov	r0, r2
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e6e:	2200      	movs	r2, #0
 8003e70:	61bb      	str	r3, [r7, #24]
 8003e72:	61fa      	str	r2, [r7, #28]
 8003e74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e78:	f7fc fe9e 	bl	8000bb8 <__aeabi_uldivmod>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4613      	mov	r3, r2
 8003e82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e84:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	0c1b      	lsrs	r3, r3, #16
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	3301      	adds	r3, #1
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e9e:	e002      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ea0:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ea2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3750      	adds	r7, #80	; 0x50
 8003eac:	46bd      	mov	sp, r7
 8003eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	00f42400 	.word	0x00f42400
 8003ebc:	007a1200 	.word	0x007a1200

08003ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ec4:	4b03      	ldr	r3, [pc, #12]	; (8003ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	20000000 	.word	0x20000000

08003ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003edc:	f7ff fff0 	bl	8003ec0 <HAL_RCC_GetHCLKFreq>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	0a9b      	lsrs	r3, r3, #10
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	4903      	ldr	r1, [pc, #12]	; (8003efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eee:	5ccb      	ldrb	r3, [r1, r3]
 8003ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	08008a48 	.word	0x08008a48

08003f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f04:	f7ff ffdc 	bl	8003ec0 <HAL_RCC_GetHCLKFreq>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	0b5b      	lsrs	r3, r3, #13
 8003f10:	f003 0307 	and.w	r3, r3, #7
 8003f14:	4903      	ldr	r1, [pc, #12]	; (8003f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f16:	5ccb      	ldrb	r3, [r1, r3]
 8003f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40023800 	.word	0x40023800
 8003f24:	08008a48 	.word	0x08008a48

08003f28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e041      	b.n	8003fbe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fe fe2a 	bl	8002ba8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3304      	adds	r3, #4
 8003f64:	4619      	mov	r1, r3
 8003f66:	4610      	mov	r0, r2
 8003f68:	f000 fa04 	bl	8004374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d109      	bne.n	8003fec <HAL_TIM_PWM_Start+0x24>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	bf14      	ite	ne
 8003fe4:	2301      	movne	r3, #1
 8003fe6:	2300      	moveq	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	e022      	b.n	8004032 <HAL_TIM_PWM_Start+0x6a>
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d109      	bne.n	8004006 <HAL_TIM_PWM_Start+0x3e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	bf14      	ite	ne
 8003ffe:	2301      	movne	r3, #1
 8004000:	2300      	moveq	r3, #0
 8004002:	b2db      	uxtb	r3, r3
 8004004:	e015      	b.n	8004032 <HAL_TIM_PWM_Start+0x6a>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b08      	cmp	r3, #8
 800400a:	d109      	bne.n	8004020 <HAL_TIM_PWM_Start+0x58>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	bf14      	ite	ne
 8004018:	2301      	movne	r3, #1
 800401a:	2300      	moveq	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	e008      	b.n	8004032 <HAL_TIM_PWM_Start+0x6a>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b01      	cmp	r3, #1
 800402a:	bf14      	ite	ne
 800402c:	2301      	movne	r3, #1
 800402e:	2300      	moveq	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e068      	b.n	800410c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d104      	bne.n	800404a <HAL_TIM_PWM_Start+0x82>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004048:	e013      	b.n	8004072 <HAL_TIM_PWM_Start+0xaa>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b04      	cmp	r3, #4
 800404e:	d104      	bne.n	800405a <HAL_TIM_PWM_Start+0x92>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004058:	e00b      	b.n	8004072 <HAL_TIM_PWM_Start+0xaa>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b08      	cmp	r3, #8
 800405e:	d104      	bne.n	800406a <HAL_TIM_PWM_Start+0xa2>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004068:	e003      	b.n	8004072 <HAL_TIM_PWM_Start+0xaa>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2202      	movs	r2, #2
 800406e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2201      	movs	r2, #1
 8004078:	6839      	ldr	r1, [r7, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fb86 	bl	800478c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a23      	ldr	r2, [pc, #140]	; (8004114 <HAL_TIM_PWM_Start+0x14c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d107      	bne.n	800409a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004098:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a1d      	ldr	r2, [pc, #116]	; (8004114 <HAL_TIM_PWM_Start+0x14c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d018      	beq.n	80040d6 <HAL_TIM_PWM_Start+0x10e>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ac:	d013      	beq.n	80040d6 <HAL_TIM_PWM_Start+0x10e>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a19      	ldr	r2, [pc, #100]	; (8004118 <HAL_TIM_PWM_Start+0x150>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00e      	beq.n	80040d6 <HAL_TIM_PWM_Start+0x10e>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a17      	ldr	r2, [pc, #92]	; (800411c <HAL_TIM_PWM_Start+0x154>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d009      	beq.n	80040d6 <HAL_TIM_PWM_Start+0x10e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a16      	ldr	r2, [pc, #88]	; (8004120 <HAL_TIM_PWM_Start+0x158>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d004      	beq.n	80040d6 <HAL_TIM_PWM_Start+0x10e>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a14      	ldr	r2, [pc, #80]	; (8004124 <HAL_TIM_PWM_Start+0x15c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d111      	bne.n	80040fa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2b06      	cmp	r3, #6
 80040e6:	d010      	beq.n	800410a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f8:	e007      	b.n	800410a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f042 0201 	orr.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40010000 	.word	0x40010000
 8004118:	40000400 	.word	0x40000400
 800411c:	40000800 	.word	0x40000800
 8004120:	40000c00 	.word	0x40000c00
 8004124:	40014000 	.word	0x40014000

08004128 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2200      	movs	r2, #0
 8004138:	6839      	ldr	r1, [r7, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f000 fb26 	bl	800478c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a29      	ldr	r2, [pc, #164]	; (80041ec <HAL_TIM_PWM_Stop+0xc4>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d117      	bne.n	800417a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6a1a      	ldr	r2, [r3, #32]
 8004150:	f241 1311 	movw	r3, #4369	; 0x1111
 8004154:	4013      	ands	r3, r2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10f      	bne.n	800417a <HAL_TIM_PWM_Stop+0x52>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6a1a      	ldr	r2, [r3, #32]
 8004160:	f240 4344 	movw	r3, #1092	; 0x444
 8004164:	4013      	ands	r3, r2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d107      	bne.n	800417a <HAL_TIM_PWM_Stop+0x52>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004178:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6a1a      	ldr	r2, [r3, #32]
 8004180:	f241 1311 	movw	r3, #4369	; 0x1111
 8004184:	4013      	ands	r3, r2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10f      	bne.n	80041aa <HAL_TIM_PWM_Stop+0x82>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6a1a      	ldr	r2, [r3, #32]
 8004190:	f240 4344 	movw	r3, #1092	; 0x444
 8004194:	4013      	ands	r3, r2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d107      	bne.n	80041aa <HAL_TIM_PWM_Stop+0x82>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0201 	bic.w	r2, r2, #1
 80041a8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d104      	bne.n	80041ba <HAL_TIM_PWM_Stop+0x92>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041b8:	e013      	b.n	80041e2 <HAL_TIM_PWM_Stop+0xba>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d104      	bne.n	80041ca <HAL_TIM_PWM_Stop+0xa2>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041c8:	e00b      	b.n	80041e2 <HAL_TIM_PWM_Stop+0xba>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d104      	bne.n	80041da <HAL_TIM_PWM_Stop+0xb2>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041d8:	e003      	b.n	80041e2 <HAL_TIM_PWM_Stop+0xba>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40010000 	.word	0x40010000

080041f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800420a:	2302      	movs	r3, #2
 800420c:	e0ae      	b.n	800436c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b0c      	cmp	r3, #12
 800421a:	f200 809f 	bhi.w	800435c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800421e:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004224:	08004259 	.word	0x08004259
 8004228:	0800435d 	.word	0x0800435d
 800422c:	0800435d 	.word	0x0800435d
 8004230:	0800435d 	.word	0x0800435d
 8004234:	08004299 	.word	0x08004299
 8004238:	0800435d 	.word	0x0800435d
 800423c:	0800435d 	.word	0x0800435d
 8004240:	0800435d 	.word	0x0800435d
 8004244:	080042db 	.word	0x080042db
 8004248:	0800435d 	.word	0x0800435d
 800424c:	0800435d 	.word	0x0800435d
 8004250:	0800435d 	.word	0x0800435d
 8004254:	0800431b 	.word	0x0800431b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68b9      	ldr	r1, [r7, #8]
 800425e:	4618      	mov	r0, r3
 8004260:	f000 f908 	bl	8004474 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0208 	orr.w	r2, r2, #8
 8004272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0204 	bic.w	r2, r2, #4
 8004282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6999      	ldr	r1, [r3, #24]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	691a      	ldr	r2, [r3, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	619a      	str	r2, [r3, #24]
      break;
 8004296:	e064      	b.n	8004362 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68b9      	ldr	r1, [r7, #8]
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 f94e 	bl	8004540 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699a      	ldr	r2, [r3, #24]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	699a      	ldr	r2, [r3, #24]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6999      	ldr	r1, [r3, #24]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	021a      	lsls	r2, r3, #8
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	619a      	str	r2, [r3, #24]
      break;
 80042d8:	e043      	b.n	8004362 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68b9      	ldr	r1, [r7, #8]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 f999 	bl	8004618 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	69da      	ldr	r2, [r3, #28]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f042 0208 	orr.w	r2, r2, #8
 80042f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69da      	ldr	r2, [r3, #28]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0204 	bic.w	r2, r2, #4
 8004304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	69d9      	ldr	r1, [r3, #28]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	61da      	str	r2, [r3, #28]
      break;
 8004318:	e023      	b.n	8004362 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68b9      	ldr	r1, [r7, #8]
 8004320:	4618      	mov	r0, r3
 8004322:	f000 f9e3 	bl	80046ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69da      	ldr	r2, [r3, #28]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69da      	ldr	r2, [r3, #28]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	69d9      	ldr	r1, [r3, #28]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	021a      	lsls	r2, r3, #8
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	61da      	str	r2, [r3, #28]
      break;
 800435a:	e002      	b.n	8004362 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	75fb      	strb	r3, [r7, #23]
      break;
 8004360:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800436a:	7dfb      	ldrb	r3, [r7, #23]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a34      	ldr	r2, [pc, #208]	; (8004458 <TIM_Base_SetConfig+0xe4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d00f      	beq.n	80043ac <TIM_Base_SetConfig+0x38>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004392:	d00b      	beq.n	80043ac <TIM_Base_SetConfig+0x38>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a31      	ldr	r2, [pc, #196]	; (800445c <TIM_Base_SetConfig+0xe8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d007      	beq.n	80043ac <TIM_Base_SetConfig+0x38>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a30      	ldr	r2, [pc, #192]	; (8004460 <TIM_Base_SetConfig+0xec>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d003      	beq.n	80043ac <TIM_Base_SetConfig+0x38>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a2f      	ldr	r2, [pc, #188]	; (8004464 <TIM_Base_SetConfig+0xf0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d108      	bne.n	80043be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a25      	ldr	r2, [pc, #148]	; (8004458 <TIM_Base_SetConfig+0xe4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d01b      	beq.n	80043fe <TIM_Base_SetConfig+0x8a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043cc:	d017      	beq.n	80043fe <TIM_Base_SetConfig+0x8a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a22      	ldr	r2, [pc, #136]	; (800445c <TIM_Base_SetConfig+0xe8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d013      	beq.n	80043fe <TIM_Base_SetConfig+0x8a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a21      	ldr	r2, [pc, #132]	; (8004460 <TIM_Base_SetConfig+0xec>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00f      	beq.n	80043fe <TIM_Base_SetConfig+0x8a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a20      	ldr	r2, [pc, #128]	; (8004464 <TIM_Base_SetConfig+0xf0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00b      	beq.n	80043fe <TIM_Base_SetConfig+0x8a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a1f      	ldr	r2, [pc, #124]	; (8004468 <TIM_Base_SetConfig+0xf4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d007      	beq.n	80043fe <TIM_Base_SetConfig+0x8a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a1e      	ldr	r2, [pc, #120]	; (800446c <TIM_Base_SetConfig+0xf8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d003      	beq.n	80043fe <TIM_Base_SetConfig+0x8a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a1d      	ldr	r2, [pc, #116]	; (8004470 <TIM_Base_SetConfig+0xfc>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d108      	bne.n	8004410 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	4313      	orrs	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	4313      	orrs	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a08      	ldr	r2, [pc, #32]	; (8004458 <TIM_Base_SetConfig+0xe4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d103      	bne.n	8004444 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	615a      	str	r2, [r3, #20]
}
 800444a:	bf00      	nop
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40010000 	.word	0x40010000
 800445c:	40000400 	.word	0x40000400
 8004460:	40000800 	.word	0x40000800
 8004464:	40000c00 	.word	0x40000c00
 8004468:	40014000 	.word	0x40014000
 800446c:	40014400 	.word	0x40014400
 8004470:	40014800 	.word	0x40014800

08004474 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	f023 0201 	bic.w	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 0303 	bic.w	r3, r3, #3
 80044aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f023 0302 	bic.w	r3, r3, #2
 80044bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a1c      	ldr	r2, [pc, #112]	; (800453c <TIM_OC1_SetConfig+0xc8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d10c      	bne.n	80044ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f023 0308 	bic.w	r3, r3, #8
 80044d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	4313      	orrs	r3, r2
 80044e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f023 0304 	bic.w	r3, r3, #4
 80044e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a13      	ldr	r2, [pc, #76]	; (800453c <TIM_OC1_SetConfig+0xc8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d111      	bne.n	8004516 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	621a      	str	r2, [r3, #32]
}
 8004530:	bf00      	nop
 8004532:	371c      	adds	r7, #28
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	40010000 	.word	0x40010000

08004540 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	f023 0210 	bic.w	r2, r3, #16
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800456e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	021b      	lsls	r3, r3, #8
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	4313      	orrs	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f023 0320 	bic.w	r3, r3, #32
 800458a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	4313      	orrs	r3, r2
 8004596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a1e      	ldr	r2, [pc, #120]	; (8004614 <TIM_OC2_SetConfig+0xd4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d10d      	bne.n	80045bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a15      	ldr	r2, [pc, #84]	; (8004614 <TIM_OC2_SetConfig+0xd4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d113      	bne.n	80045ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	621a      	str	r2, [r3, #32]
}
 8004606:	bf00      	nop
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40010000 	.word	0x40010000

08004618 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 0303 	bic.w	r3, r3, #3
 800464e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004660:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	021b      	lsls	r3, r3, #8
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	4313      	orrs	r3, r2
 800466c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a1d      	ldr	r2, [pc, #116]	; (80046e8 <TIM_OC3_SetConfig+0xd0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d10d      	bne.n	8004692 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800467c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	021b      	lsls	r3, r3, #8
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	4313      	orrs	r3, r2
 8004688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a14      	ldr	r2, [pc, #80]	; (80046e8 <TIM_OC3_SetConfig+0xd0>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d113      	bne.n	80046c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	621a      	str	r2, [r3, #32]
}
 80046dc:	bf00      	nop
 80046de:	371c      	adds	r7, #28
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	40010000 	.word	0x40010000

080046ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800471a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	021b      	lsls	r3, r3, #8
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	4313      	orrs	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004736:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	031b      	lsls	r3, r3, #12
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a10      	ldr	r2, [pc, #64]	; (8004788 <TIM_OC4_SetConfig+0x9c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d109      	bne.n	8004760 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004752:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	019b      	lsls	r3, r3, #6
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	4313      	orrs	r3, r2
 800475e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	621a      	str	r2, [r3, #32]
}
 800477a:	bf00      	nop
 800477c:	371c      	adds	r7, #28
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40010000 	.word	0x40010000

0800478c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f003 031f 	and.w	r3, r3, #31
 800479e:	2201      	movs	r2, #1
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a1a      	ldr	r2, [r3, #32]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	43db      	mvns	r3, r3
 80047ae:	401a      	ands	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a1a      	ldr	r2, [r3, #32]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f003 031f 	and.w	r3, r3, #31
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	fa01 f303 	lsl.w	r3, r1, r3
 80047c4:	431a      	orrs	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	621a      	str	r2, [r3, #32]
}
 80047ca:	bf00      	nop
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
	...

080047d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e050      	b.n	8004892 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a1c      	ldr	r2, [pc, #112]	; (80048a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d018      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800483c:	d013      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a18      	ldr	r2, [pc, #96]	; (80048a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00e      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a16      	ldr	r2, [pc, #88]	; (80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d009      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a15      	ldr	r2, [pc, #84]	; (80048ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d004      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a13      	ldr	r2, [pc, #76]	; (80048b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d10c      	bne.n	8004880 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800486c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	4313      	orrs	r3, r2
 8004876:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40010000 	.word	0x40010000
 80048a4:	40000400 	.word	0x40000400
 80048a8:	40000800 	.word	0x40000800
 80048ac:	40000c00 	.word	0x40000c00
 80048b0:	40014000 	.word	0x40014000

080048b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e03f      	b.n	8004946 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d106      	bne.n	80048e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7fe f914 	bl	8002b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2224      	movs	r2, #36	; 0x24
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 fd15 	bl	8005328 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	691a      	ldr	r2, [r3, #16]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800490c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695a      	ldr	r2, [r3, #20]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800491c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68da      	ldr	r2, [r3, #12]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800492c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2220      	movs	r2, #32
 8004940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800494e:	b480      	push	{r7}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	60f8      	str	r0, [r7, #12]
 8004956:	60b9      	str	r1, [r7, #8]
 8004958:	4613      	mov	r3, r2
 800495a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b20      	cmp	r3, #32
 8004966:	d130      	bne.n	80049ca <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d002      	beq.n	8004974 <HAL_UART_Transmit_IT+0x26>
 800496e:	88fb      	ldrh	r3, [r7, #6]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e029      	b.n	80049cc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800497e:	2b01      	cmp	r3, #1
 8004980:	d101      	bne.n	8004986 <HAL_UART_Transmit_IT+0x38>
 8004982:	2302      	movs	r3, #2
 8004984:	e022      	b.n	80049cc <HAL_UART_Transmit_IT+0x7e>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	88fa      	ldrh	r2, [r7, #6]
 8004998:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	88fa      	ldrh	r2, [r7, #6]
 800499e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2221      	movs	r2, #33	; 0x21
 80049aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68da      	ldr	r2, [r3, #12]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049c4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	e000      	b.n	80049cc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80049ca:	2302      	movs	r3, #2
  }
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	4613      	mov	r3, r2
 80049e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b20      	cmp	r3, #32
 80049f0:	d11d      	bne.n	8004a2e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <HAL_UART_Receive_IT+0x26>
 80049f8:	88fb      	ldrh	r3, [r7, #6]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e016      	b.n	8004a30 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d101      	bne.n	8004a10 <HAL_UART_Receive_IT+0x38>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	e00f      	b.n	8004a30 <HAL_UART_Receive_IT+0x58>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a1e:	88fb      	ldrh	r3, [r7, #6]
 8004a20:	461a      	mov	r2, r3
 8004a22:	68b9      	ldr	r1, [r7, #8]
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 faab 	bl	8004f80 <UART_Start_Receive_IT>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	e000      	b.n	8004a30 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004a2e:	2302      	movs	r3, #2
  }
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b0ba      	sub	sp, #232	; 0xe8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10f      	bne.n	8004a9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a82:	f003 0320 	and.w	r3, r3, #32
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d009      	beq.n	8004a9e <HAL_UART_IRQHandler+0x66>
 8004a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 fb8b 	bl	80051b2 <UART_Receive_IT>
      return;
 8004a9c:	e256      	b.n	8004f4c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 80de 	beq.w	8004c64 <HAL_UART_IRQHandler+0x22c>
 8004aa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d106      	bne.n	8004ac2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ab8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 80d1 	beq.w	8004c64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00b      	beq.n	8004ae6 <HAL_UART_IRQHandler+0xae>
 8004ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f043 0201 	orr.w	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aea:	f003 0304 	and.w	r3, r3, #4
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00b      	beq.n	8004b0a <HAL_UART_IRQHandler+0xd2>
 8004af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d005      	beq.n	8004b0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	f043 0202 	orr.w	r2, r3, #2
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00b      	beq.n	8004b2e <HAL_UART_IRQHandler+0xf6>
 8004b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d005      	beq.n	8004b2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	f043 0204 	orr.w	r2, r3, #4
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d011      	beq.n	8004b5e <HAL_UART_IRQHandler+0x126>
 8004b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b3e:	f003 0320 	and.w	r3, r3, #32
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d105      	bne.n	8004b52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d005      	beq.n	8004b5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	f043 0208 	orr.w	r2, r3, #8
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 81ed 	beq.w	8004f42 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b6c:	f003 0320 	and.w	r3, r3, #32
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d008      	beq.n	8004b86 <HAL_UART_IRQHandler+0x14e>
 8004b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 fb16 	bl	80051b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b90:	2b40      	cmp	r3, #64	; 0x40
 8004b92:	bf0c      	ite	eq
 8004b94:	2301      	moveq	r3, #1
 8004b96:	2300      	movne	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	f003 0308 	and.w	r3, r3, #8
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d103      	bne.n	8004bb2 <HAL_UART_IRQHandler+0x17a>
 8004baa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d04f      	beq.n	8004c52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 fa1e 	bl	8004ff4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc2:	2b40      	cmp	r3, #64	; 0x40
 8004bc4:	d141      	bne.n	8004c4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3314      	adds	r3, #20
 8004bcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bd4:	e853 3f00 	ldrex	r3, [r3]
 8004bd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004be4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3314      	adds	r3, #20
 8004bee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bf2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c02:	e841 2300 	strex	r3, r2, [r1]
 8004c06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1d9      	bne.n	8004bc6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d013      	beq.n	8004c42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1e:	4a7d      	ldr	r2, [pc, #500]	; (8004e14 <HAL_UART_IRQHandler+0x3dc>)
 8004c20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fe fb25 	bl	8003276 <HAL_DMA_Abort_IT>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d016      	beq.n	8004c60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c40:	e00e      	b.n	8004c60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f986 	bl	8004f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c48:	e00a      	b.n	8004c60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f982 	bl	8004f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c50:	e006      	b.n	8004c60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f97e 	bl	8004f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004c5e:	e170      	b.n	8004f42 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c60:	bf00      	nop
    return;
 8004c62:	e16e      	b.n	8004f42 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	f040 814a 	bne.w	8004f02 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f000 8143 	beq.w	8004f02 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c80:	f003 0310 	and.w	r3, r3, #16
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 813c 	beq.w	8004f02 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	60bb      	str	r3, [r7, #8]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	60bb      	str	r3, [r7, #8]
 8004c9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004caa:	2b40      	cmp	r3, #64	; 0x40
 8004cac:	f040 80b4 	bne.w	8004e18 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 8140 	beq.w	8004f46 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	f080 8139 	bcs.w	8004f46 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cda:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ce6:	f000 8088 	beq.w	8004dfa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	330c      	adds	r3, #12
 8004cf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cf8:	e853 3f00 	ldrex	r3, [r3]
 8004cfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	330c      	adds	r3, #12
 8004d12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d26:	e841 2300 	strex	r3, r2, [r1]
 8004d2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1d9      	bne.n	8004cea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	3314      	adds	r3, #20
 8004d3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d40:	e853 3f00 	ldrex	r3, [r3]
 8004d44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d48:	f023 0301 	bic.w	r3, r3, #1
 8004d4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3314      	adds	r3, #20
 8004d56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d66:	e841 2300 	strex	r3, r2, [r1]
 8004d6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1e1      	bne.n	8004d36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3314      	adds	r3, #20
 8004d78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d7c:	e853 3f00 	ldrex	r3, [r3]
 8004d80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3314      	adds	r3, #20
 8004d92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d9e:	e841 2300 	strex	r3, r2, [r1]
 8004da2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1e3      	bne.n	8004d72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2220      	movs	r2, #32
 8004dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	330c      	adds	r3, #12
 8004dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dc2:	e853 3f00 	ldrex	r3, [r3]
 8004dc6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dca:	f023 0310 	bic.w	r3, r3, #16
 8004dce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	330c      	adds	r3, #12
 8004dd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004ddc:	65ba      	str	r2, [r7, #88]	; 0x58
 8004dde:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004de2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004de4:	e841 2300 	strex	r3, r2, [r1]
 8004de8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1e3      	bne.n	8004db8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7fe f9ce 	bl	8003196 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	4619      	mov	r1, r3
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f8ac 	bl	8004f68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e10:	e099      	b.n	8004f46 <HAL_UART_IRQHandler+0x50e>
 8004e12:	bf00      	nop
 8004e14:	080050bb 	.word	0x080050bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 808b 	beq.w	8004f4a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004e34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 8086 	beq.w	8004f4a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	330c      	adds	r3, #12
 8004e44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e48:	e853 3f00 	ldrex	r3, [r3]
 8004e4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	330c      	adds	r3, #12
 8004e5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e62:	647a      	str	r2, [r7, #68]	; 0x44
 8004e64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e6a:	e841 2300 	strex	r3, r2, [r1]
 8004e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1e3      	bne.n	8004e3e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3314      	adds	r3, #20
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	e853 3f00 	ldrex	r3, [r3]
 8004e84:	623b      	str	r3, [r7, #32]
   return(result);
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	f023 0301 	bic.w	r3, r3, #1
 8004e8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	3314      	adds	r3, #20
 8004e96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e9a:	633a      	str	r2, [r7, #48]	; 0x30
 8004e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ea2:	e841 2300 	strex	r3, r2, [r1]
 8004ea6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1e3      	bne.n	8004e76 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	330c      	adds	r3, #12
 8004ec2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	e853 3f00 	ldrex	r3, [r3]
 8004eca:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0310 	bic.w	r3, r3, #16
 8004ed2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	330c      	adds	r3, #12
 8004edc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ee0:	61fa      	str	r2, [r7, #28]
 8004ee2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee4:	69b9      	ldr	r1, [r7, #24]
 8004ee6:	69fa      	ldr	r2, [r7, #28]
 8004ee8:	e841 2300 	strex	r3, r2, [r1]
 8004eec:	617b      	str	r3, [r7, #20]
   return(result);
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1e3      	bne.n	8004ebc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ef4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ef8:	4619      	mov	r1, r3
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f834 	bl	8004f68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f00:	e023      	b.n	8004f4a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d009      	beq.n	8004f22 <HAL_UART_IRQHandler+0x4ea>
 8004f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f8e1 	bl	80050e2 <UART_Transmit_IT>
    return;
 8004f20:	e014      	b.n	8004f4c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00e      	beq.n	8004f4c <HAL_UART_IRQHandler+0x514>
 8004f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d008      	beq.n	8004f4c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f921 	bl	8005182 <UART_EndTransmit_IT>
    return;
 8004f40:	e004      	b.n	8004f4c <HAL_UART_IRQHandler+0x514>
    return;
 8004f42:	bf00      	nop
 8004f44:	e002      	b.n	8004f4c <HAL_UART_IRQHandler+0x514>
      return;
 8004f46:	bf00      	nop
 8004f48:	e000      	b.n	8004f4c <HAL_UART_IRQHandler+0x514>
      return;
 8004f4a:	bf00      	nop
  }
}
 8004f4c:	37e8      	adds	r7, #232	; 0xe8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop

08004f54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	88fa      	ldrh	r2, [r7, #6]
 8004f98:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	88fa      	ldrh	r2, [r7, #6]
 8004f9e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2222      	movs	r2, #34	; 0x22
 8004faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fc4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695a      	ldr	r2, [r3, #20]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f042 0201 	orr.w	r2, r2, #1
 8004fd4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68da      	ldr	r2, [r3, #12]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f042 0220 	orr.w	r2, r2, #32
 8004fe4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b095      	sub	sp, #84	; 0x54
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	330c      	adds	r3, #12
 8005002:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005006:	e853 3f00 	ldrex	r3, [r3]
 800500a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800500c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005012:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	330c      	adds	r3, #12
 800501a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800501c:	643a      	str	r2, [r7, #64]	; 0x40
 800501e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005020:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005022:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005024:	e841 2300 	strex	r3, r2, [r1]
 8005028:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800502a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1e5      	bne.n	8004ffc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3314      	adds	r3, #20
 8005036:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	e853 3f00 	ldrex	r3, [r3]
 800503e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f023 0301 	bic.w	r3, r3, #1
 8005046:	64bb      	str	r3, [r7, #72]	; 0x48
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3314      	adds	r3, #20
 800504e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005050:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005052:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005054:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005058:	e841 2300 	strex	r3, r2, [r1]
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1e5      	bne.n	8005030 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005068:	2b01      	cmp	r3, #1
 800506a:	d119      	bne.n	80050a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	330c      	adds	r3, #12
 8005072:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	e853 3f00 	ldrex	r3, [r3]
 800507a:	60bb      	str	r3, [r7, #8]
   return(result);
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f023 0310 	bic.w	r3, r3, #16
 8005082:	647b      	str	r3, [r7, #68]	; 0x44
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	330c      	adds	r3, #12
 800508a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800508c:	61ba      	str	r2, [r7, #24]
 800508e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005090:	6979      	ldr	r1, [r7, #20]
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	e841 2300 	strex	r3, r2, [r1]
 8005098:	613b      	str	r3, [r7, #16]
   return(result);
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1e5      	bne.n	800506c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80050ae:	bf00      	nop
 80050b0:	3754      	adds	r7, #84	; 0x54
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b084      	sub	sp, #16
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f7ff ff3d 	bl	8004f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050da:	bf00      	nop
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b085      	sub	sp, #20
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b21      	cmp	r3, #33	; 0x21
 80050f4:	d13e      	bne.n	8005174 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050fe:	d114      	bne.n	800512a <UART_Transmit_IT+0x48>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d110      	bne.n	800512a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800511c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	1c9a      	adds	r2, r3, #2
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	621a      	str	r2, [r3, #32]
 8005128:	e008      	b.n	800513c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	1c59      	adds	r1, r3, #1
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6211      	str	r1, [r2, #32]
 8005134:	781a      	ldrb	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005140:	b29b      	uxth	r3, r3
 8005142:	3b01      	subs	r3, #1
 8005144:	b29b      	uxth	r3, r3
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	4619      	mov	r1, r3
 800514a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10f      	bne.n	8005170 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800515e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800516e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005170:	2300      	movs	r3, #0
 8005172:	e000      	b.n	8005176 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005174:	2302      	movs	r3, #2
  }
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b082      	sub	sp, #8
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68da      	ldr	r2, [r3, #12]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005198:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2220      	movs	r2, #32
 800519e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7fc fa34 	bl	8001610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b08c      	sub	sp, #48	; 0x30
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b22      	cmp	r3, #34	; 0x22
 80051c4:	f040 80ab 	bne.w	800531e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d0:	d117      	bne.n	8005202 <UART_Receive_IT+0x50>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d113      	bne.n	8005202 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051da:	2300      	movs	r3, #0
 80051dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fa:	1c9a      	adds	r2, r3, #2
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	629a      	str	r2, [r3, #40]	; 0x28
 8005200:	e026      	b.n	8005250 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005206:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005208:	2300      	movs	r3, #0
 800520a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005214:	d007      	beq.n	8005226 <UART_Receive_IT+0x74>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10a      	bne.n	8005234 <UART_Receive_IT+0x82>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d106      	bne.n	8005234 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	b2da      	uxtb	r2, r3
 800522e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005230:	701a      	strb	r2, [r3, #0]
 8005232:	e008      	b.n	8005246 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	b2db      	uxtb	r3, r3
 800523c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005240:	b2da      	uxtb	r2, r3
 8005242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005244:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005254:	b29b      	uxth	r3, r3
 8005256:	3b01      	subs	r3, #1
 8005258:	b29b      	uxth	r3, r3
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	4619      	mov	r1, r3
 800525e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005260:	2b00      	cmp	r3, #0
 8005262:	d15a      	bne.n	800531a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0220 	bic.w	r2, r2, #32
 8005272:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005282:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	695a      	ldr	r2, [r3, #20]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0201 	bic.w	r2, r2, #1
 8005292:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d135      	bne.n	8005310 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	330c      	adds	r3, #12
 80052b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	e853 3f00 	ldrex	r3, [r3]
 80052b8:	613b      	str	r3, [r7, #16]
   return(result);
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f023 0310 	bic.w	r3, r3, #16
 80052c0:	627b      	str	r3, [r7, #36]	; 0x24
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	330c      	adds	r3, #12
 80052c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ca:	623a      	str	r2, [r7, #32]
 80052cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ce:	69f9      	ldr	r1, [r7, #28]
 80052d0:	6a3a      	ldr	r2, [r7, #32]
 80052d2:	e841 2300 	strex	r3, r2, [r1]
 80052d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1e5      	bne.n	80052aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	2b10      	cmp	r3, #16
 80052ea:	d10a      	bne.n	8005302 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052ec:	2300      	movs	r3, #0
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005306:	4619      	mov	r1, r3
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7ff fe2d 	bl	8004f68 <HAL_UARTEx_RxEventCallback>
 800530e:	e002      	b.n	8005316 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7fc f9b1 	bl	8001678 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005316:	2300      	movs	r3, #0
 8005318:	e002      	b.n	8005320 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800531a:	2300      	movs	r3, #0
 800531c:	e000      	b.n	8005320 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800531e:	2302      	movs	r3, #2
  }
}
 8005320:	4618      	mov	r0, r3
 8005322:	3730      	adds	r7, #48	; 0x30
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800532c:	b0c0      	sub	sp, #256	; 0x100
 800532e:	af00      	add	r7, sp, #0
 8005330:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005344:	68d9      	ldr	r1, [r3, #12]
 8005346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	ea40 0301 	orr.w	r3, r0, r1
 8005350:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	431a      	orrs	r2, r3
 8005360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	431a      	orrs	r2, r3
 8005368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005380:	f021 010c 	bic.w	r1, r1, #12
 8005384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800538e:	430b      	orrs	r3, r1
 8005390:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800539e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a2:	6999      	ldr	r1, [r3, #24]
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	ea40 0301 	orr.w	r3, r0, r1
 80053ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	4b8f      	ldr	r3, [pc, #572]	; (80055f4 <UART_SetConfig+0x2cc>)
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d005      	beq.n	80053c8 <UART_SetConfig+0xa0>
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	4b8d      	ldr	r3, [pc, #564]	; (80055f8 <UART_SetConfig+0x2d0>)
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d104      	bne.n	80053d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053c8:	f7fe fd9a 	bl	8003f00 <HAL_RCC_GetPCLK2Freq>
 80053cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80053d0:	e003      	b.n	80053da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053d2:	f7fe fd81 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 80053d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053e4:	f040 810c 	bne.w	8005600 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ec:	2200      	movs	r2, #0
 80053ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80053f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80053f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80053fa:	4622      	mov	r2, r4
 80053fc:	462b      	mov	r3, r5
 80053fe:	1891      	adds	r1, r2, r2
 8005400:	65b9      	str	r1, [r7, #88]	; 0x58
 8005402:	415b      	adcs	r3, r3
 8005404:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005406:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800540a:	4621      	mov	r1, r4
 800540c:	eb12 0801 	adds.w	r8, r2, r1
 8005410:	4629      	mov	r1, r5
 8005412:	eb43 0901 	adc.w	r9, r3, r1
 8005416:	f04f 0200 	mov.w	r2, #0
 800541a:	f04f 0300 	mov.w	r3, #0
 800541e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005422:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005426:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800542a:	4690      	mov	r8, r2
 800542c:	4699      	mov	r9, r3
 800542e:	4623      	mov	r3, r4
 8005430:	eb18 0303 	adds.w	r3, r8, r3
 8005434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005438:	462b      	mov	r3, r5
 800543a:	eb49 0303 	adc.w	r3, r9, r3
 800543e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800544e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005452:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005456:	460b      	mov	r3, r1
 8005458:	18db      	adds	r3, r3, r3
 800545a:	653b      	str	r3, [r7, #80]	; 0x50
 800545c:	4613      	mov	r3, r2
 800545e:	eb42 0303 	adc.w	r3, r2, r3
 8005462:	657b      	str	r3, [r7, #84]	; 0x54
 8005464:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005468:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800546c:	f7fb fba4 	bl	8000bb8 <__aeabi_uldivmod>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	4b61      	ldr	r3, [pc, #388]	; (80055fc <UART_SetConfig+0x2d4>)
 8005476:	fba3 2302 	umull	r2, r3, r3, r2
 800547a:	095b      	lsrs	r3, r3, #5
 800547c:	011c      	lsls	r4, r3, #4
 800547e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005482:	2200      	movs	r2, #0
 8005484:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005488:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800548c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005490:	4642      	mov	r2, r8
 8005492:	464b      	mov	r3, r9
 8005494:	1891      	adds	r1, r2, r2
 8005496:	64b9      	str	r1, [r7, #72]	; 0x48
 8005498:	415b      	adcs	r3, r3
 800549a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800549c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80054a0:	4641      	mov	r1, r8
 80054a2:	eb12 0a01 	adds.w	sl, r2, r1
 80054a6:	4649      	mov	r1, r9
 80054a8:	eb43 0b01 	adc.w	fp, r3, r1
 80054ac:	f04f 0200 	mov.w	r2, #0
 80054b0:	f04f 0300 	mov.w	r3, #0
 80054b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054c0:	4692      	mov	sl, r2
 80054c2:	469b      	mov	fp, r3
 80054c4:	4643      	mov	r3, r8
 80054c6:	eb1a 0303 	adds.w	r3, sl, r3
 80054ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054ce:	464b      	mov	r3, r9
 80054d0:	eb4b 0303 	adc.w	r3, fp, r3
 80054d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80054e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80054ec:	460b      	mov	r3, r1
 80054ee:	18db      	adds	r3, r3, r3
 80054f0:	643b      	str	r3, [r7, #64]	; 0x40
 80054f2:	4613      	mov	r3, r2
 80054f4:	eb42 0303 	adc.w	r3, r2, r3
 80054f8:	647b      	str	r3, [r7, #68]	; 0x44
 80054fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005502:	f7fb fb59 	bl	8000bb8 <__aeabi_uldivmod>
 8005506:	4602      	mov	r2, r0
 8005508:	460b      	mov	r3, r1
 800550a:	4611      	mov	r1, r2
 800550c:	4b3b      	ldr	r3, [pc, #236]	; (80055fc <UART_SetConfig+0x2d4>)
 800550e:	fba3 2301 	umull	r2, r3, r3, r1
 8005512:	095b      	lsrs	r3, r3, #5
 8005514:	2264      	movs	r2, #100	; 0x64
 8005516:	fb02 f303 	mul.w	r3, r2, r3
 800551a:	1acb      	subs	r3, r1, r3
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005522:	4b36      	ldr	r3, [pc, #216]	; (80055fc <UART_SetConfig+0x2d4>)
 8005524:	fba3 2302 	umull	r2, r3, r3, r2
 8005528:	095b      	lsrs	r3, r3, #5
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005530:	441c      	add	r4, r3
 8005532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005536:	2200      	movs	r2, #0
 8005538:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800553c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005540:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005544:	4642      	mov	r2, r8
 8005546:	464b      	mov	r3, r9
 8005548:	1891      	adds	r1, r2, r2
 800554a:	63b9      	str	r1, [r7, #56]	; 0x38
 800554c:	415b      	adcs	r3, r3
 800554e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005550:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005554:	4641      	mov	r1, r8
 8005556:	1851      	adds	r1, r2, r1
 8005558:	6339      	str	r1, [r7, #48]	; 0x30
 800555a:	4649      	mov	r1, r9
 800555c:	414b      	adcs	r3, r1
 800555e:	637b      	str	r3, [r7, #52]	; 0x34
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	f04f 0300 	mov.w	r3, #0
 8005568:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800556c:	4659      	mov	r1, fp
 800556e:	00cb      	lsls	r3, r1, #3
 8005570:	4651      	mov	r1, sl
 8005572:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005576:	4651      	mov	r1, sl
 8005578:	00ca      	lsls	r2, r1, #3
 800557a:	4610      	mov	r0, r2
 800557c:	4619      	mov	r1, r3
 800557e:	4603      	mov	r3, r0
 8005580:	4642      	mov	r2, r8
 8005582:	189b      	adds	r3, r3, r2
 8005584:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005588:	464b      	mov	r3, r9
 800558a:	460a      	mov	r2, r1
 800558c:	eb42 0303 	adc.w	r3, r2, r3
 8005590:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80055a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80055a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80055a8:	460b      	mov	r3, r1
 80055aa:	18db      	adds	r3, r3, r3
 80055ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80055ae:	4613      	mov	r3, r2
 80055b0:	eb42 0303 	adc.w	r3, r2, r3
 80055b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80055be:	f7fb fafb 	bl	8000bb8 <__aeabi_uldivmod>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4b0d      	ldr	r3, [pc, #52]	; (80055fc <UART_SetConfig+0x2d4>)
 80055c8:	fba3 1302 	umull	r1, r3, r3, r2
 80055cc:	095b      	lsrs	r3, r3, #5
 80055ce:	2164      	movs	r1, #100	; 0x64
 80055d0:	fb01 f303 	mul.w	r3, r1, r3
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	3332      	adds	r3, #50	; 0x32
 80055da:	4a08      	ldr	r2, [pc, #32]	; (80055fc <UART_SetConfig+0x2d4>)
 80055dc:	fba2 2303 	umull	r2, r3, r2, r3
 80055e0:	095b      	lsrs	r3, r3, #5
 80055e2:	f003 0207 	and.w	r2, r3, #7
 80055e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4422      	add	r2, r4
 80055ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055f0:	e105      	b.n	80057fe <UART_SetConfig+0x4d6>
 80055f2:	bf00      	nop
 80055f4:	40011000 	.word	0x40011000
 80055f8:	40011400 	.word	0x40011400
 80055fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005600:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005604:	2200      	movs	r2, #0
 8005606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800560a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800560e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005612:	4642      	mov	r2, r8
 8005614:	464b      	mov	r3, r9
 8005616:	1891      	adds	r1, r2, r2
 8005618:	6239      	str	r1, [r7, #32]
 800561a:	415b      	adcs	r3, r3
 800561c:	627b      	str	r3, [r7, #36]	; 0x24
 800561e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005622:	4641      	mov	r1, r8
 8005624:	1854      	adds	r4, r2, r1
 8005626:	4649      	mov	r1, r9
 8005628:	eb43 0501 	adc.w	r5, r3, r1
 800562c:	f04f 0200 	mov.w	r2, #0
 8005630:	f04f 0300 	mov.w	r3, #0
 8005634:	00eb      	lsls	r3, r5, #3
 8005636:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800563a:	00e2      	lsls	r2, r4, #3
 800563c:	4614      	mov	r4, r2
 800563e:	461d      	mov	r5, r3
 8005640:	4643      	mov	r3, r8
 8005642:	18e3      	adds	r3, r4, r3
 8005644:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005648:	464b      	mov	r3, r9
 800564a:	eb45 0303 	adc.w	r3, r5, r3
 800564e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800565e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005662:	f04f 0200 	mov.w	r2, #0
 8005666:	f04f 0300 	mov.w	r3, #0
 800566a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800566e:	4629      	mov	r1, r5
 8005670:	008b      	lsls	r3, r1, #2
 8005672:	4621      	mov	r1, r4
 8005674:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005678:	4621      	mov	r1, r4
 800567a:	008a      	lsls	r2, r1, #2
 800567c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005680:	f7fb fa9a 	bl	8000bb8 <__aeabi_uldivmod>
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4b60      	ldr	r3, [pc, #384]	; (800580c <UART_SetConfig+0x4e4>)
 800568a:	fba3 2302 	umull	r2, r3, r3, r2
 800568e:	095b      	lsrs	r3, r3, #5
 8005690:	011c      	lsls	r4, r3, #4
 8005692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005696:	2200      	movs	r2, #0
 8005698:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800569c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80056a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80056a4:	4642      	mov	r2, r8
 80056a6:	464b      	mov	r3, r9
 80056a8:	1891      	adds	r1, r2, r2
 80056aa:	61b9      	str	r1, [r7, #24]
 80056ac:	415b      	adcs	r3, r3
 80056ae:	61fb      	str	r3, [r7, #28]
 80056b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056b4:	4641      	mov	r1, r8
 80056b6:	1851      	adds	r1, r2, r1
 80056b8:	6139      	str	r1, [r7, #16]
 80056ba:	4649      	mov	r1, r9
 80056bc:	414b      	adcs	r3, r1
 80056be:	617b      	str	r3, [r7, #20]
 80056c0:	f04f 0200 	mov.w	r2, #0
 80056c4:	f04f 0300 	mov.w	r3, #0
 80056c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056cc:	4659      	mov	r1, fp
 80056ce:	00cb      	lsls	r3, r1, #3
 80056d0:	4651      	mov	r1, sl
 80056d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056d6:	4651      	mov	r1, sl
 80056d8:	00ca      	lsls	r2, r1, #3
 80056da:	4610      	mov	r0, r2
 80056dc:	4619      	mov	r1, r3
 80056de:	4603      	mov	r3, r0
 80056e0:	4642      	mov	r2, r8
 80056e2:	189b      	adds	r3, r3, r2
 80056e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056e8:	464b      	mov	r3, r9
 80056ea:	460a      	mov	r2, r1
 80056ec:	eb42 0303 	adc.w	r3, r2, r3
 80056f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80056fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	f04f 0300 	mov.w	r3, #0
 8005708:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800570c:	4649      	mov	r1, r9
 800570e:	008b      	lsls	r3, r1, #2
 8005710:	4641      	mov	r1, r8
 8005712:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005716:	4641      	mov	r1, r8
 8005718:	008a      	lsls	r2, r1, #2
 800571a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800571e:	f7fb fa4b 	bl	8000bb8 <__aeabi_uldivmod>
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	4b39      	ldr	r3, [pc, #228]	; (800580c <UART_SetConfig+0x4e4>)
 8005728:	fba3 1302 	umull	r1, r3, r3, r2
 800572c:	095b      	lsrs	r3, r3, #5
 800572e:	2164      	movs	r1, #100	; 0x64
 8005730:	fb01 f303 	mul.w	r3, r1, r3
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	011b      	lsls	r3, r3, #4
 8005738:	3332      	adds	r3, #50	; 0x32
 800573a:	4a34      	ldr	r2, [pc, #208]	; (800580c <UART_SetConfig+0x4e4>)
 800573c:	fba2 2303 	umull	r2, r3, r2, r3
 8005740:	095b      	lsrs	r3, r3, #5
 8005742:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005746:	441c      	add	r4, r3
 8005748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800574c:	2200      	movs	r2, #0
 800574e:	673b      	str	r3, [r7, #112]	; 0x70
 8005750:	677a      	str	r2, [r7, #116]	; 0x74
 8005752:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005756:	4642      	mov	r2, r8
 8005758:	464b      	mov	r3, r9
 800575a:	1891      	adds	r1, r2, r2
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	415b      	adcs	r3, r3
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005766:	4641      	mov	r1, r8
 8005768:	1851      	adds	r1, r2, r1
 800576a:	6039      	str	r1, [r7, #0]
 800576c:	4649      	mov	r1, r9
 800576e:	414b      	adcs	r3, r1
 8005770:	607b      	str	r3, [r7, #4]
 8005772:	f04f 0200 	mov.w	r2, #0
 8005776:	f04f 0300 	mov.w	r3, #0
 800577a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800577e:	4659      	mov	r1, fp
 8005780:	00cb      	lsls	r3, r1, #3
 8005782:	4651      	mov	r1, sl
 8005784:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005788:	4651      	mov	r1, sl
 800578a:	00ca      	lsls	r2, r1, #3
 800578c:	4610      	mov	r0, r2
 800578e:	4619      	mov	r1, r3
 8005790:	4603      	mov	r3, r0
 8005792:	4642      	mov	r2, r8
 8005794:	189b      	adds	r3, r3, r2
 8005796:	66bb      	str	r3, [r7, #104]	; 0x68
 8005798:	464b      	mov	r3, r9
 800579a:	460a      	mov	r2, r1
 800579c:	eb42 0303 	adc.w	r3, r2, r3
 80057a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	663b      	str	r3, [r7, #96]	; 0x60
 80057ac:	667a      	str	r2, [r7, #100]	; 0x64
 80057ae:	f04f 0200 	mov.w	r2, #0
 80057b2:	f04f 0300 	mov.w	r3, #0
 80057b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80057ba:	4649      	mov	r1, r9
 80057bc:	008b      	lsls	r3, r1, #2
 80057be:	4641      	mov	r1, r8
 80057c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057c4:	4641      	mov	r1, r8
 80057c6:	008a      	lsls	r2, r1, #2
 80057c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80057cc:	f7fb f9f4 	bl	8000bb8 <__aeabi_uldivmod>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4b0d      	ldr	r3, [pc, #52]	; (800580c <UART_SetConfig+0x4e4>)
 80057d6:	fba3 1302 	umull	r1, r3, r3, r2
 80057da:	095b      	lsrs	r3, r3, #5
 80057dc:	2164      	movs	r1, #100	; 0x64
 80057de:	fb01 f303 	mul.w	r3, r1, r3
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	3332      	adds	r3, #50	; 0x32
 80057e8:	4a08      	ldr	r2, [pc, #32]	; (800580c <UART_SetConfig+0x4e4>)
 80057ea:	fba2 2303 	umull	r2, r3, r2, r3
 80057ee:	095b      	lsrs	r3, r3, #5
 80057f0:	f003 020f 	and.w	r2, r3, #15
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4422      	add	r2, r4
 80057fc:	609a      	str	r2, [r3, #8]
}
 80057fe:	bf00      	nop
 8005800:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005804:	46bd      	mov	sp, r7
 8005806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800580a:	bf00      	nop
 800580c:	51eb851f 	.word	0x51eb851f

08005810 <__assert_func>:
 8005810:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005812:	4614      	mov	r4, r2
 8005814:	461a      	mov	r2, r3
 8005816:	4b09      	ldr	r3, [pc, #36]	; (800583c <__assert_func+0x2c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4605      	mov	r5, r0
 800581c:	68d8      	ldr	r0, [r3, #12]
 800581e:	b14c      	cbz	r4, 8005834 <__assert_func+0x24>
 8005820:	4b07      	ldr	r3, [pc, #28]	; (8005840 <__assert_func+0x30>)
 8005822:	9100      	str	r1, [sp, #0]
 8005824:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005828:	4906      	ldr	r1, [pc, #24]	; (8005844 <__assert_func+0x34>)
 800582a:	462b      	mov	r3, r5
 800582c:	f000 f814 	bl	8005858 <fiprintf>
 8005830:	f001 f868 	bl	8006904 <abort>
 8005834:	4b04      	ldr	r3, [pc, #16]	; (8005848 <__assert_func+0x38>)
 8005836:	461c      	mov	r4, r3
 8005838:	e7f3      	b.n	8005822 <__assert_func+0x12>
 800583a:	bf00      	nop
 800583c:	2000000c 	.word	0x2000000c
 8005840:	08008a50 	.word	0x08008a50
 8005844:	08008a5d 	.word	0x08008a5d
 8005848:	08008a8b 	.word	0x08008a8b

0800584c <__errno>:
 800584c:	4b01      	ldr	r3, [pc, #4]	; (8005854 <__errno+0x8>)
 800584e:	6818      	ldr	r0, [r3, #0]
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	2000000c 	.word	0x2000000c

08005858 <fiprintf>:
 8005858:	b40e      	push	{r1, r2, r3}
 800585a:	b503      	push	{r0, r1, lr}
 800585c:	4601      	mov	r1, r0
 800585e:	ab03      	add	r3, sp, #12
 8005860:	4805      	ldr	r0, [pc, #20]	; (8005878 <fiprintf+0x20>)
 8005862:	f853 2b04 	ldr.w	r2, [r3], #4
 8005866:	6800      	ldr	r0, [r0, #0]
 8005868:	9301      	str	r3, [sp, #4]
 800586a:	f000 f953 	bl	8005b14 <_vfiprintf_r>
 800586e:	b002      	add	sp, #8
 8005870:	f85d eb04 	ldr.w	lr, [sp], #4
 8005874:	b003      	add	sp, #12
 8005876:	4770      	bx	lr
 8005878:	2000000c 	.word	0x2000000c

0800587c <__libc_init_array>:
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	4d0d      	ldr	r5, [pc, #52]	; (80058b4 <__libc_init_array+0x38>)
 8005880:	4c0d      	ldr	r4, [pc, #52]	; (80058b8 <__libc_init_array+0x3c>)
 8005882:	1b64      	subs	r4, r4, r5
 8005884:	10a4      	asrs	r4, r4, #2
 8005886:	2600      	movs	r6, #0
 8005888:	42a6      	cmp	r6, r4
 800588a:	d109      	bne.n	80058a0 <__libc_init_array+0x24>
 800588c:	4d0b      	ldr	r5, [pc, #44]	; (80058bc <__libc_init_array+0x40>)
 800588e:	4c0c      	ldr	r4, [pc, #48]	; (80058c0 <__libc_init_array+0x44>)
 8005890:	f002 fd92 	bl	80083b8 <_init>
 8005894:	1b64      	subs	r4, r4, r5
 8005896:	10a4      	asrs	r4, r4, #2
 8005898:	2600      	movs	r6, #0
 800589a:	42a6      	cmp	r6, r4
 800589c:	d105      	bne.n	80058aa <__libc_init_array+0x2e>
 800589e:	bd70      	pop	{r4, r5, r6, pc}
 80058a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a4:	4798      	blx	r3
 80058a6:	3601      	adds	r6, #1
 80058a8:	e7ee      	b.n	8005888 <__libc_init_array+0xc>
 80058aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ae:	4798      	blx	r3
 80058b0:	3601      	adds	r6, #1
 80058b2:	e7f2      	b.n	800589a <__libc_init_array+0x1e>
 80058b4:	08008e38 	.word	0x08008e38
 80058b8:	08008e38 	.word	0x08008e38
 80058bc:	08008e38 	.word	0x08008e38
 80058c0:	08008e3c 	.word	0x08008e3c

080058c4 <malloc>:
 80058c4:	4b02      	ldr	r3, [pc, #8]	; (80058d0 <malloc+0xc>)
 80058c6:	4601      	mov	r1, r0
 80058c8:	6818      	ldr	r0, [r3, #0]
 80058ca:	f000 b885 	b.w	80059d8 <_malloc_r>
 80058ce:	bf00      	nop
 80058d0:	2000000c 	.word	0x2000000c

080058d4 <memcpy>:
 80058d4:	440a      	add	r2, r1
 80058d6:	4291      	cmp	r1, r2
 80058d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80058dc:	d100      	bne.n	80058e0 <memcpy+0xc>
 80058de:	4770      	bx	lr
 80058e0:	b510      	push	{r4, lr}
 80058e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058ea:	4291      	cmp	r1, r2
 80058ec:	d1f9      	bne.n	80058e2 <memcpy+0xe>
 80058ee:	bd10      	pop	{r4, pc}

080058f0 <memset>:
 80058f0:	4402      	add	r2, r0
 80058f2:	4603      	mov	r3, r0
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d100      	bne.n	80058fa <memset+0xa>
 80058f8:	4770      	bx	lr
 80058fa:	f803 1b01 	strb.w	r1, [r3], #1
 80058fe:	e7f9      	b.n	80058f4 <memset+0x4>

08005900 <_free_r>:
 8005900:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005902:	2900      	cmp	r1, #0
 8005904:	d044      	beq.n	8005990 <_free_r+0x90>
 8005906:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800590a:	9001      	str	r0, [sp, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	f1a1 0404 	sub.w	r4, r1, #4
 8005912:	bfb8      	it	lt
 8005914:	18e4      	addlt	r4, r4, r3
 8005916:	f002 f899 	bl	8007a4c <__malloc_lock>
 800591a:	4a1e      	ldr	r2, [pc, #120]	; (8005994 <_free_r+0x94>)
 800591c:	9801      	ldr	r0, [sp, #4]
 800591e:	6813      	ldr	r3, [r2, #0]
 8005920:	b933      	cbnz	r3, 8005930 <_free_r+0x30>
 8005922:	6063      	str	r3, [r4, #4]
 8005924:	6014      	str	r4, [r2, #0]
 8005926:	b003      	add	sp, #12
 8005928:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800592c:	f002 b894 	b.w	8007a58 <__malloc_unlock>
 8005930:	42a3      	cmp	r3, r4
 8005932:	d908      	bls.n	8005946 <_free_r+0x46>
 8005934:	6825      	ldr	r5, [r4, #0]
 8005936:	1961      	adds	r1, r4, r5
 8005938:	428b      	cmp	r3, r1
 800593a:	bf01      	itttt	eq
 800593c:	6819      	ldreq	r1, [r3, #0]
 800593e:	685b      	ldreq	r3, [r3, #4]
 8005940:	1949      	addeq	r1, r1, r5
 8005942:	6021      	streq	r1, [r4, #0]
 8005944:	e7ed      	b.n	8005922 <_free_r+0x22>
 8005946:	461a      	mov	r2, r3
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	b10b      	cbz	r3, 8005950 <_free_r+0x50>
 800594c:	42a3      	cmp	r3, r4
 800594e:	d9fa      	bls.n	8005946 <_free_r+0x46>
 8005950:	6811      	ldr	r1, [r2, #0]
 8005952:	1855      	adds	r5, r2, r1
 8005954:	42a5      	cmp	r5, r4
 8005956:	d10b      	bne.n	8005970 <_free_r+0x70>
 8005958:	6824      	ldr	r4, [r4, #0]
 800595a:	4421      	add	r1, r4
 800595c:	1854      	adds	r4, r2, r1
 800595e:	42a3      	cmp	r3, r4
 8005960:	6011      	str	r1, [r2, #0]
 8005962:	d1e0      	bne.n	8005926 <_free_r+0x26>
 8005964:	681c      	ldr	r4, [r3, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	6053      	str	r3, [r2, #4]
 800596a:	4421      	add	r1, r4
 800596c:	6011      	str	r1, [r2, #0]
 800596e:	e7da      	b.n	8005926 <_free_r+0x26>
 8005970:	d902      	bls.n	8005978 <_free_r+0x78>
 8005972:	230c      	movs	r3, #12
 8005974:	6003      	str	r3, [r0, #0]
 8005976:	e7d6      	b.n	8005926 <_free_r+0x26>
 8005978:	6825      	ldr	r5, [r4, #0]
 800597a:	1961      	adds	r1, r4, r5
 800597c:	428b      	cmp	r3, r1
 800597e:	bf04      	itt	eq
 8005980:	6819      	ldreq	r1, [r3, #0]
 8005982:	685b      	ldreq	r3, [r3, #4]
 8005984:	6063      	str	r3, [r4, #4]
 8005986:	bf04      	itt	eq
 8005988:	1949      	addeq	r1, r1, r5
 800598a:	6021      	streq	r1, [r4, #0]
 800598c:	6054      	str	r4, [r2, #4]
 800598e:	e7ca      	b.n	8005926 <_free_r+0x26>
 8005990:	b003      	add	sp, #12
 8005992:	bd30      	pop	{r4, r5, pc}
 8005994:	20000d78 	.word	0x20000d78

08005998 <sbrk_aligned>:
 8005998:	b570      	push	{r4, r5, r6, lr}
 800599a:	4e0e      	ldr	r6, [pc, #56]	; (80059d4 <sbrk_aligned+0x3c>)
 800599c:	460c      	mov	r4, r1
 800599e:	6831      	ldr	r1, [r6, #0]
 80059a0:	4605      	mov	r5, r0
 80059a2:	b911      	cbnz	r1, 80059aa <sbrk_aligned+0x12>
 80059a4:	f000 fede 	bl	8006764 <_sbrk_r>
 80059a8:	6030      	str	r0, [r6, #0]
 80059aa:	4621      	mov	r1, r4
 80059ac:	4628      	mov	r0, r5
 80059ae:	f000 fed9 	bl	8006764 <_sbrk_r>
 80059b2:	1c43      	adds	r3, r0, #1
 80059b4:	d00a      	beq.n	80059cc <sbrk_aligned+0x34>
 80059b6:	1cc4      	adds	r4, r0, #3
 80059b8:	f024 0403 	bic.w	r4, r4, #3
 80059bc:	42a0      	cmp	r0, r4
 80059be:	d007      	beq.n	80059d0 <sbrk_aligned+0x38>
 80059c0:	1a21      	subs	r1, r4, r0
 80059c2:	4628      	mov	r0, r5
 80059c4:	f000 fece 	bl	8006764 <_sbrk_r>
 80059c8:	3001      	adds	r0, #1
 80059ca:	d101      	bne.n	80059d0 <sbrk_aligned+0x38>
 80059cc:	f04f 34ff 	mov.w	r4, #4294967295
 80059d0:	4620      	mov	r0, r4
 80059d2:	bd70      	pop	{r4, r5, r6, pc}
 80059d4:	20000d7c 	.word	0x20000d7c

080059d8 <_malloc_r>:
 80059d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059dc:	1ccd      	adds	r5, r1, #3
 80059de:	f025 0503 	bic.w	r5, r5, #3
 80059e2:	3508      	adds	r5, #8
 80059e4:	2d0c      	cmp	r5, #12
 80059e6:	bf38      	it	cc
 80059e8:	250c      	movcc	r5, #12
 80059ea:	2d00      	cmp	r5, #0
 80059ec:	4607      	mov	r7, r0
 80059ee:	db01      	blt.n	80059f4 <_malloc_r+0x1c>
 80059f0:	42a9      	cmp	r1, r5
 80059f2:	d905      	bls.n	8005a00 <_malloc_r+0x28>
 80059f4:	230c      	movs	r3, #12
 80059f6:	603b      	str	r3, [r7, #0]
 80059f8:	2600      	movs	r6, #0
 80059fa:	4630      	mov	r0, r6
 80059fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a00:	4e2e      	ldr	r6, [pc, #184]	; (8005abc <_malloc_r+0xe4>)
 8005a02:	f002 f823 	bl	8007a4c <__malloc_lock>
 8005a06:	6833      	ldr	r3, [r6, #0]
 8005a08:	461c      	mov	r4, r3
 8005a0a:	bb34      	cbnz	r4, 8005a5a <_malloc_r+0x82>
 8005a0c:	4629      	mov	r1, r5
 8005a0e:	4638      	mov	r0, r7
 8005a10:	f7ff ffc2 	bl	8005998 <sbrk_aligned>
 8005a14:	1c43      	adds	r3, r0, #1
 8005a16:	4604      	mov	r4, r0
 8005a18:	d14d      	bne.n	8005ab6 <_malloc_r+0xde>
 8005a1a:	6834      	ldr	r4, [r6, #0]
 8005a1c:	4626      	mov	r6, r4
 8005a1e:	2e00      	cmp	r6, #0
 8005a20:	d140      	bne.n	8005aa4 <_malloc_r+0xcc>
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	4631      	mov	r1, r6
 8005a26:	4638      	mov	r0, r7
 8005a28:	eb04 0803 	add.w	r8, r4, r3
 8005a2c:	f000 fe9a 	bl	8006764 <_sbrk_r>
 8005a30:	4580      	cmp	r8, r0
 8005a32:	d13a      	bne.n	8005aaa <_malloc_r+0xd2>
 8005a34:	6821      	ldr	r1, [r4, #0]
 8005a36:	3503      	adds	r5, #3
 8005a38:	1a6d      	subs	r5, r5, r1
 8005a3a:	f025 0503 	bic.w	r5, r5, #3
 8005a3e:	3508      	adds	r5, #8
 8005a40:	2d0c      	cmp	r5, #12
 8005a42:	bf38      	it	cc
 8005a44:	250c      	movcc	r5, #12
 8005a46:	4629      	mov	r1, r5
 8005a48:	4638      	mov	r0, r7
 8005a4a:	f7ff ffa5 	bl	8005998 <sbrk_aligned>
 8005a4e:	3001      	adds	r0, #1
 8005a50:	d02b      	beq.n	8005aaa <_malloc_r+0xd2>
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	442b      	add	r3, r5
 8005a56:	6023      	str	r3, [r4, #0]
 8005a58:	e00e      	b.n	8005a78 <_malloc_r+0xa0>
 8005a5a:	6822      	ldr	r2, [r4, #0]
 8005a5c:	1b52      	subs	r2, r2, r5
 8005a5e:	d41e      	bmi.n	8005a9e <_malloc_r+0xc6>
 8005a60:	2a0b      	cmp	r2, #11
 8005a62:	d916      	bls.n	8005a92 <_malloc_r+0xba>
 8005a64:	1961      	adds	r1, r4, r5
 8005a66:	42a3      	cmp	r3, r4
 8005a68:	6025      	str	r5, [r4, #0]
 8005a6a:	bf18      	it	ne
 8005a6c:	6059      	strne	r1, [r3, #4]
 8005a6e:	6863      	ldr	r3, [r4, #4]
 8005a70:	bf08      	it	eq
 8005a72:	6031      	streq	r1, [r6, #0]
 8005a74:	5162      	str	r2, [r4, r5]
 8005a76:	604b      	str	r3, [r1, #4]
 8005a78:	4638      	mov	r0, r7
 8005a7a:	f104 060b 	add.w	r6, r4, #11
 8005a7e:	f001 ffeb 	bl	8007a58 <__malloc_unlock>
 8005a82:	f026 0607 	bic.w	r6, r6, #7
 8005a86:	1d23      	adds	r3, r4, #4
 8005a88:	1af2      	subs	r2, r6, r3
 8005a8a:	d0b6      	beq.n	80059fa <_malloc_r+0x22>
 8005a8c:	1b9b      	subs	r3, r3, r6
 8005a8e:	50a3      	str	r3, [r4, r2]
 8005a90:	e7b3      	b.n	80059fa <_malloc_r+0x22>
 8005a92:	6862      	ldr	r2, [r4, #4]
 8005a94:	42a3      	cmp	r3, r4
 8005a96:	bf0c      	ite	eq
 8005a98:	6032      	streq	r2, [r6, #0]
 8005a9a:	605a      	strne	r2, [r3, #4]
 8005a9c:	e7ec      	b.n	8005a78 <_malloc_r+0xa0>
 8005a9e:	4623      	mov	r3, r4
 8005aa0:	6864      	ldr	r4, [r4, #4]
 8005aa2:	e7b2      	b.n	8005a0a <_malloc_r+0x32>
 8005aa4:	4634      	mov	r4, r6
 8005aa6:	6876      	ldr	r6, [r6, #4]
 8005aa8:	e7b9      	b.n	8005a1e <_malloc_r+0x46>
 8005aaa:	230c      	movs	r3, #12
 8005aac:	603b      	str	r3, [r7, #0]
 8005aae:	4638      	mov	r0, r7
 8005ab0:	f001 ffd2 	bl	8007a58 <__malloc_unlock>
 8005ab4:	e7a1      	b.n	80059fa <_malloc_r+0x22>
 8005ab6:	6025      	str	r5, [r4, #0]
 8005ab8:	e7de      	b.n	8005a78 <_malloc_r+0xa0>
 8005aba:	bf00      	nop
 8005abc:	20000d78 	.word	0x20000d78

08005ac0 <__sfputc_r>:
 8005ac0:	6893      	ldr	r3, [r2, #8]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	b410      	push	{r4}
 8005ac8:	6093      	str	r3, [r2, #8]
 8005aca:	da08      	bge.n	8005ade <__sfputc_r+0x1e>
 8005acc:	6994      	ldr	r4, [r2, #24]
 8005ace:	42a3      	cmp	r3, r4
 8005ad0:	db01      	blt.n	8005ad6 <__sfputc_r+0x16>
 8005ad2:	290a      	cmp	r1, #10
 8005ad4:	d103      	bne.n	8005ade <__sfputc_r+0x1e>
 8005ad6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ada:	f000 be53 	b.w	8006784 <__swbuf_r>
 8005ade:	6813      	ldr	r3, [r2, #0]
 8005ae0:	1c58      	adds	r0, r3, #1
 8005ae2:	6010      	str	r0, [r2, #0]
 8005ae4:	7019      	strb	r1, [r3, #0]
 8005ae6:	4608      	mov	r0, r1
 8005ae8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <__sfputs_r>:
 8005aee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af0:	4606      	mov	r6, r0
 8005af2:	460f      	mov	r7, r1
 8005af4:	4614      	mov	r4, r2
 8005af6:	18d5      	adds	r5, r2, r3
 8005af8:	42ac      	cmp	r4, r5
 8005afa:	d101      	bne.n	8005b00 <__sfputs_r+0x12>
 8005afc:	2000      	movs	r0, #0
 8005afe:	e007      	b.n	8005b10 <__sfputs_r+0x22>
 8005b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b04:	463a      	mov	r2, r7
 8005b06:	4630      	mov	r0, r6
 8005b08:	f7ff ffda 	bl	8005ac0 <__sfputc_r>
 8005b0c:	1c43      	adds	r3, r0, #1
 8005b0e:	d1f3      	bne.n	8005af8 <__sfputs_r+0xa>
 8005b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b14 <_vfiprintf_r>:
 8005b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b18:	460d      	mov	r5, r1
 8005b1a:	b09d      	sub	sp, #116	; 0x74
 8005b1c:	4614      	mov	r4, r2
 8005b1e:	4698      	mov	r8, r3
 8005b20:	4606      	mov	r6, r0
 8005b22:	b118      	cbz	r0, 8005b2c <_vfiprintf_r+0x18>
 8005b24:	6983      	ldr	r3, [r0, #24]
 8005b26:	b90b      	cbnz	r3, 8005b2c <_vfiprintf_r+0x18>
 8005b28:	f001 fe86 	bl	8007838 <__sinit>
 8005b2c:	4b89      	ldr	r3, [pc, #548]	; (8005d54 <_vfiprintf_r+0x240>)
 8005b2e:	429d      	cmp	r5, r3
 8005b30:	d11b      	bne.n	8005b6a <_vfiprintf_r+0x56>
 8005b32:	6875      	ldr	r5, [r6, #4]
 8005b34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b36:	07d9      	lsls	r1, r3, #31
 8005b38:	d405      	bmi.n	8005b46 <_vfiprintf_r+0x32>
 8005b3a:	89ab      	ldrh	r3, [r5, #12]
 8005b3c:	059a      	lsls	r2, r3, #22
 8005b3e:	d402      	bmi.n	8005b46 <_vfiprintf_r+0x32>
 8005b40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b42:	f001 ff1c 	bl	800797e <__retarget_lock_acquire_recursive>
 8005b46:	89ab      	ldrh	r3, [r5, #12]
 8005b48:	071b      	lsls	r3, r3, #28
 8005b4a:	d501      	bpl.n	8005b50 <_vfiprintf_r+0x3c>
 8005b4c:	692b      	ldr	r3, [r5, #16]
 8005b4e:	b9eb      	cbnz	r3, 8005b8c <_vfiprintf_r+0x78>
 8005b50:	4629      	mov	r1, r5
 8005b52:	4630      	mov	r0, r6
 8005b54:	f000 fe68 	bl	8006828 <__swsetup_r>
 8005b58:	b1c0      	cbz	r0, 8005b8c <_vfiprintf_r+0x78>
 8005b5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b5c:	07dc      	lsls	r4, r3, #31
 8005b5e:	d50e      	bpl.n	8005b7e <_vfiprintf_r+0x6a>
 8005b60:	f04f 30ff 	mov.w	r0, #4294967295
 8005b64:	b01d      	add	sp, #116	; 0x74
 8005b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b6a:	4b7b      	ldr	r3, [pc, #492]	; (8005d58 <_vfiprintf_r+0x244>)
 8005b6c:	429d      	cmp	r5, r3
 8005b6e:	d101      	bne.n	8005b74 <_vfiprintf_r+0x60>
 8005b70:	68b5      	ldr	r5, [r6, #8]
 8005b72:	e7df      	b.n	8005b34 <_vfiprintf_r+0x20>
 8005b74:	4b79      	ldr	r3, [pc, #484]	; (8005d5c <_vfiprintf_r+0x248>)
 8005b76:	429d      	cmp	r5, r3
 8005b78:	bf08      	it	eq
 8005b7a:	68f5      	ldreq	r5, [r6, #12]
 8005b7c:	e7da      	b.n	8005b34 <_vfiprintf_r+0x20>
 8005b7e:	89ab      	ldrh	r3, [r5, #12]
 8005b80:	0598      	lsls	r0, r3, #22
 8005b82:	d4ed      	bmi.n	8005b60 <_vfiprintf_r+0x4c>
 8005b84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b86:	f001 fefb 	bl	8007980 <__retarget_lock_release_recursive>
 8005b8a:	e7e9      	b.n	8005b60 <_vfiprintf_r+0x4c>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b90:	2320      	movs	r3, #32
 8005b92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b96:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b9a:	2330      	movs	r3, #48	; 0x30
 8005b9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005d60 <_vfiprintf_r+0x24c>
 8005ba0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ba4:	f04f 0901 	mov.w	r9, #1
 8005ba8:	4623      	mov	r3, r4
 8005baa:	469a      	mov	sl, r3
 8005bac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bb0:	b10a      	cbz	r2, 8005bb6 <_vfiprintf_r+0xa2>
 8005bb2:	2a25      	cmp	r2, #37	; 0x25
 8005bb4:	d1f9      	bne.n	8005baa <_vfiprintf_r+0x96>
 8005bb6:	ebba 0b04 	subs.w	fp, sl, r4
 8005bba:	d00b      	beq.n	8005bd4 <_vfiprintf_r+0xc0>
 8005bbc:	465b      	mov	r3, fp
 8005bbe:	4622      	mov	r2, r4
 8005bc0:	4629      	mov	r1, r5
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	f7ff ff93 	bl	8005aee <__sfputs_r>
 8005bc8:	3001      	adds	r0, #1
 8005bca:	f000 80aa 	beq.w	8005d22 <_vfiprintf_r+0x20e>
 8005bce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bd0:	445a      	add	r2, fp
 8005bd2:	9209      	str	r2, [sp, #36]	; 0x24
 8005bd4:	f89a 3000 	ldrb.w	r3, [sl]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 80a2 	beq.w	8005d22 <_vfiprintf_r+0x20e>
 8005bde:	2300      	movs	r3, #0
 8005be0:	f04f 32ff 	mov.w	r2, #4294967295
 8005be4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005be8:	f10a 0a01 	add.w	sl, sl, #1
 8005bec:	9304      	str	r3, [sp, #16]
 8005bee:	9307      	str	r3, [sp, #28]
 8005bf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bf4:	931a      	str	r3, [sp, #104]	; 0x68
 8005bf6:	4654      	mov	r4, sl
 8005bf8:	2205      	movs	r2, #5
 8005bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bfe:	4858      	ldr	r0, [pc, #352]	; (8005d60 <_vfiprintf_r+0x24c>)
 8005c00:	f7fa faf6 	bl	80001f0 <memchr>
 8005c04:	9a04      	ldr	r2, [sp, #16]
 8005c06:	b9d8      	cbnz	r0, 8005c40 <_vfiprintf_r+0x12c>
 8005c08:	06d1      	lsls	r1, r2, #27
 8005c0a:	bf44      	itt	mi
 8005c0c:	2320      	movmi	r3, #32
 8005c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c12:	0713      	lsls	r3, r2, #28
 8005c14:	bf44      	itt	mi
 8005c16:	232b      	movmi	r3, #43	; 0x2b
 8005c18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c1c:	f89a 3000 	ldrb.w	r3, [sl]
 8005c20:	2b2a      	cmp	r3, #42	; 0x2a
 8005c22:	d015      	beq.n	8005c50 <_vfiprintf_r+0x13c>
 8005c24:	9a07      	ldr	r2, [sp, #28]
 8005c26:	4654      	mov	r4, sl
 8005c28:	2000      	movs	r0, #0
 8005c2a:	f04f 0c0a 	mov.w	ip, #10
 8005c2e:	4621      	mov	r1, r4
 8005c30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c34:	3b30      	subs	r3, #48	; 0x30
 8005c36:	2b09      	cmp	r3, #9
 8005c38:	d94e      	bls.n	8005cd8 <_vfiprintf_r+0x1c4>
 8005c3a:	b1b0      	cbz	r0, 8005c6a <_vfiprintf_r+0x156>
 8005c3c:	9207      	str	r2, [sp, #28]
 8005c3e:	e014      	b.n	8005c6a <_vfiprintf_r+0x156>
 8005c40:	eba0 0308 	sub.w	r3, r0, r8
 8005c44:	fa09 f303 	lsl.w	r3, r9, r3
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	9304      	str	r3, [sp, #16]
 8005c4c:	46a2      	mov	sl, r4
 8005c4e:	e7d2      	b.n	8005bf6 <_vfiprintf_r+0xe2>
 8005c50:	9b03      	ldr	r3, [sp, #12]
 8005c52:	1d19      	adds	r1, r3, #4
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	9103      	str	r1, [sp, #12]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	bfbb      	ittet	lt
 8005c5c:	425b      	neglt	r3, r3
 8005c5e:	f042 0202 	orrlt.w	r2, r2, #2
 8005c62:	9307      	strge	r3, [sp, #28]
 8005c64:	9307      	strlt	r3, [sp, #28]
 8005c66:	bfb8      	it	lt
 8005c68:	9204      	strlt	r2, [sp, #16]
 8005c6a:	7823      	ldrb	r3, [r4, #0]
 8005c6c:	2b2e      	cmp	r3, #46	; 0x2e
 8005c6e:	d10c      	bne.n	8005c8a <_vfiprintf_r+0x176>
 8005c70:	7863      	ldrb	r3, [r4, #1]
 8005c72:	2b2a      	cmp	r3, #42	; 0x2a
 8005c74:	d135      	bne.n	8005ce2 <_vfiprintf_r+0x1ce>
 8005c76:	9b03      	ldr	r3, [sp, #12]
 8005c78:	1d1a      	adds	r2, r3, #4
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	9203      	str	r2, [sp, #12]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	bfb8      	it	lt
 8005c82:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c86:	3402      	adds	r4, #2
 8005c88:	9305      	str	r3, [sp, #20]
 8005c8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005d70 <_vfiprintf_r+0x25c>
 8005c8e:	7821      	ldrb	r1, [r4, #0]
 8005c90:	2203      	movs	r2, #3
 8005c92:	4650      	mov	r0, sl
 8005c94:	f7fa faac 	bl	80001f0 <memchr>
 8005c98:	b140      	cbz	r0, 8005cac <_vfiprintf_r+0x198>
 8005c9a:	2340      	movs	r3, #64	; 0x40
 8005c9c:	eba0 000a 	sub.w	r0, r0, sl
 8005ca0:	fa03 f000 	lsl.w	r0, r3, r0
 8005ca4:	9b04      	ldr	r3, [sp, #16]
 8005ca6:	4303      	orrs	r3, r0
 8005ca8:	3401      	adds	r4, #1
 8005caa:	9304      	str	r3, [sp, #16]
 8005cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cb0:	482c      	ldr	r0, [pc, #176]	; (8005d64 <_vfiprintf_r+0x250>)
 8005cb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cb6:	2206      	movs	r2, #6
 8005cb8:	f7fa fa9a 	bl	80001f0 <memchr>
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	d03f      	beq.n	8005d40 <_vfiprintf_r+0x22c>
 8005cc0:	4b29      	ldr	r3, [pc, #164]	; (8005d68 <_vfiprintf_r+0x254>)
 8005cc2:	bb1b      	cbnz	r3, 8005d0c <_vfiprintf_r+0x1f8>
 8005cc4:	9b03      	ldr	r3, [sp, #12]
 8005cc6:	3307      	adds	r3, #7
 8005cc8:	f023 0307 	bic.w	r3, r3, #7
 8005ccc:	3308      	adds	r3, #8
 8005cce:	9303      	str	r3, [sp, #12]
 8005cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cd2:	443b      	add	r3, r7
 8005cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8005cd6:	e767      	b.n	8005ba8 <_vfiprintf_r+0x94>
 8005cd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cdc:	460c      	mov	r4, r1
 8005cde:	2001      	movs	r0, #1
 8005ce0:	e7a5      	b.n	8005c2e <_vfiprintf_r+0x11a>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	3401      	adds	r4, #1
 8005ce6:	9305      	str	r3, [sp, #20]
 8005ce8:	4619      	mov	r1, r3
 8005cea:	f04f 0c0a 	mov.w	ip, #10
 8005cee:	4620      	mov	r0, r4
 8005cf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cf4:	3a30      	subs	r2, #48	; 0x30
 8005cf6:	2a09      	cmp	r2, #9
 8005cf8:	d903      	bls.n	8005d02 <_vfiprintf_r+0x1ee>
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0c5      	beq.n	8005c8a <_vfiprintf_r+0x176>
 8005cfe:	9105      	str	r1, [sp, #20]
 8005d00:	e7c3      	b.n	8005c8a <_vfiprintf_r+0x176>
 8005d02:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d06:	4604      	mov	r4, r0
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e7f0      	b.n	8005cee <_vfiprintf_r+0x1da>
 8005d0c:	ab03      	add	r3, sp, #12
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	462a      	mov	r2, r5
 8005d12:	4b16      	ldr	r3, [pc, #88]	; (8005d6c <_vfiprintf_r+0x258>)
 8005d14:	a904      	add	r1, sp, #16
 8005d16:	4630      	mov	r0, r6
 8005d18:	f000 f8cc 	bl	8005eb4 <_printf_float>
 8005d1c:	4607      	mov	r7, r0
 8005d1e:	1c78      	adds	r0, r7, #1
 8005d20:	d1d6      	bne.n	8005cd0 <_vfiprintf_r+0x1bc>
 8005d22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d24:	07d9      	lsls	r1, r3, #31
 8005d26:	d405      	bmi.n	8005d34 <_vfiprintf_r+0x220>
 8005d28:	89ab      	ldrh	r3, [r5, #12]
 8005d2a:	059a      	lsls	r2, r3, #22
 8005d2c:	d402      	bmi.n	8005d34 <_vfiprintf_r+0x220>
 8005d2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d30:	f001 fe26 	bl	8007980 <__retarget_lock_release_recursive>
 8005d34:	89ab      	ldrh	r3, [r5, #12]
 8005d36:	065b      	lsls	r3, r3, #25
 8005d38:	f53f af12 	bmi.w	8005b60 <_vfiprintf_r+0x4c>
 8005d3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d3e:	e711      	b.n	8005b64 <_vfiprintf_r+0x50>
 8005d40:	ab03      	add	r3, sp, #12
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	462a      	mov	r2, r5
 8005d46:	4b09      	ldr	r3, [pc, #36]	; (8005d6c <_vfiprintf_r+0x258>)
 8005d48:	a904      	add	r1, sp, #16
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	f000 fb56 	bl	80063fc <_printf_i>
 8005d50:	e7e4      	b.n	8005d1c <_vfiprintf_r+0x208>
 8005d52:	bf00      	nop
 8005d54:	08008b88 	.word	0x08008b88
 8005d58:	08008ba8 	.word	0x08008ba8
 8005d5c:	08008b68 	.word	0x08008b68
 8005d60:	08008a90 	.word	0x08008a90
 8005d64:	08008a9a 	.word	0x08008a9a
 8005d68:	08005eb5 	.word	0x08005eb5
 8005d6c:	08005aef 	.word	0x08005aef
 8005d70:	08008a96 	.word	0x08008a96

08005d74 <__cvt>:
 8005d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d78:	ec55 4b10 	vmov	r4, r5, d0
 8005d7c:	2d00      	cmp	r5, #0
 8005d7e:	460e      	mov	r6, r1
 8005d80:	4619      	mov	r1, r3
 8005d82:	462b      	mov	r3, r5
 8005d84:	bfbb      	ittet	lt
 8005d86:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005d8a:	461d      	movlt	r5, r3
 8005d8c:	2300      	movge	r3, #0
 8005d8e:	232d      	movlt	r3, #45	; 0x2d
 8005d90:	700b      	strb	r3, [r1, #0]
 8005d92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d94:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005d98:	4691      	mov	r9, r2
 8005d9a:	f023 0820 	bic.w	r8, r3, #32
 8005d9e:	bfbc      	itt	lt
 8005da0:	4622      	movlt	r2, r4
 8005da2:	4614      	movlt	r4, r2
 8005da4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005da8:	d005      	beq.n	8005db6 <__cvt+0x42>
 8005daa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005dae:	d100      	bne.n	8005db2 <__cvt+0x3e>
 8005db0:	3601      	adds	r6, #1
 8005db2:	2102      	movs	r1, #2
 8005db4:	e000      	b.n	8005db8 <__cvt+0x44>
 8005db6:	2103      	movs	r1, #3
 8005db8:	ab03      	add	r3, sp, #12
 8005dba:	9301      	str	r3, [sp, #4]
 8005dbc:	ab02      	add	r3, sp, #8
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	ec45 4b10 	vmov	d0, r4, r5
 8005dc4:	4653      	mov	r3, sl
 8005dc6:	4632      	mov	r2, r6
 8005dc8:	f000 fe2e 	bl	8006a28 <_dtoa_r>
 8005dcc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005dd0:	4607      	mov	r7, r0
 8005dd2:	d102      	bne.n	8005dda <__cvt+0x66>
 8005dd4:	f019 0f01 	tst.w	r9, #1
 8005dd8:	d022      	beq.n	8005e20 <__cvt+0xac>
 8005dda:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005dde:	eb07 0906 	add.w	r9, r7, r6
 8005de2:	d110      	bne.n	8005e06 <__cvt+0x92>
 8005de4:	783b      	ldrb	r3, [r7, #0]
 8005de6:	2b30      	cmp	r3, #48	; 0x30
 8005de8:	d10a      	bne.n	8005e00 <__cvt+0x8c>
 8005dea:	2200      	movs	r2, #0
 8005dec:	2300      	movs	r3, #0
 8005dee:	4620      	mov	r0, r4
 8005df0:	4629      	mov	r1, r5
 8005df2:	f7fa fe71 	bl	8000ad8 <__aeabi_dcmpeq>
 8005df6:	b918      	cbnz	r0, 8005e00 <__cvt+0x8c>
 8005df8:	f1c6 0601 	rsb	r6, r6, #1
 8005dfc:	f8ca 6000 	str.w	r6, [sl]
 8005e00:	f8da 3000 	ldr.w	r3, [sl]
 8005e04:	4499      	add	r9, r3
 8005e06:	2200      	movs	r2, #0
 8005e08:	2300      	movs	r3, #0
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	4629      	mov	r1, r5
 8005e0e:	f7fa fe63 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e12:	b108      	cbz	r0, 8005e18 <__cvt+0xa4>
 8005e14:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e18:	2230      	movs	r2, #48	; 0x30
 8005e1a:	9b03      	ldr	r3, [sp, #12]
 8005e1c:	454b      	cmp	r3, r9
 8005e1e:	d307      	bcc.n	8005e30 <__cvt+0xbc>
 8005e20:	9b03      	ldr	r3, [sp, #12]
 8005e22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e24:	1bdb      	subs	r3, r3, r7
 8005e26:	4638      	mov	r0, r7
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	b004      	add	sp, #16
 8005e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e30:	1c59      	adds	r1, r3, #1
 8005e32:	9103      	str	r1, [sp, #12]
 8005e34:	701a      	strb	r2, [r3, #0]
 8005e36:	e7f0      	b.n	8005e1a <__cvt+0xa6>

08005e38 <__exponent>:
 8005e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2900      	cmp	r1, #0
 8005e3e:	bfb8      	it	lt
 8005e40:	4249      	neglt	r1, r1
 8005e42:	f803 2b02 	strb.w	r2, [r3], #2
 8005e46:	bfb4      	ite	lt
 8005e48:	222d      	movlt	r2, #45	; 0x2d
 8005e4a:	222b      	movge	r2, #43	; 0x2b
 8005e4c:	2909      	cmp	r1, #9
 8005e4e:	7042      	strb	r2, [r0, #1]
 8005e50:	dd2a      	ble.n	8005ea8 <__exponent+0x70>
 8005e52:	f10d 0407 	add.w	r4, sp, #7
 8005e56:	46a4      	mov	ip, r4
 8005e58:	270a      	movs	r7, #10
 8005e5a:	46a6      	mov	lr, r4
 8005e5c:	460a      	mov	r2, r1
 8005e5e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005e62:	fb07 1516 	mls	r5, r7, r6, r1
 8005e66:	3530      	adds	r5, #48	; 0x30
 8005e68:	2a63      	cmp	r2, #99	; 0x63
 8005e6a:	f104 34ff 	add.w	r4, r4, #4294967295
 8005e6e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005e72:	4631      	mov	r1, r6
 8005e74:	dcf1      	bgt.n	8005e5a <__exponent+0x22>
 8005e76:	3130      	adds	r1, #48	; 0x30
 8005e78:	f1ae 0502 	sub.w	r5, lr, #2
 8005e7c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005e80:	1c44      	adds	r4, r0, #1
 8005e82:	4629      	mov	r1, r5
 8005e84:	4561      	cmp	r1, ip
 8005e86:	d30a      	bcc.n	8005e9e <__exponent+0x66>
 8005e88:	f10d 0209 	add.w	r2, sp, #9
 8005e8c:	eba2 020e 	sub.w	r2, r2, lr
 8005e90:	4565      	cmp	r5, ip
 8005e92:	bf88      	it	hi
 8005e94:	2200      	movhi	r2, #0
 8005e96:	4413      	add	r3, r2
 8005e98:	1a18      	subs	r0, r3, r0
 8005e9a:	b003      	add	sp, #12
 8005e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ea2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005ea6:	e7ed      	b.n	8005e84 <__exponent+0x4c>
 8005ea8:	2330      	movs	r3, #48	; 0x30
 8005eaa:	3130      	adds	r1, #48	; 0x30
 8005eac:	7083      	strb	r3, [r0, #2]
 8005eae:	70c1      	strb	r1, [r0, #3]
 8005eb0:	1d03      	adds	r3, r0, #4
 8005eb2:	e7f1      	b.n	8005e98 <__exponent+0x60>

08005eb4 <_printf_float>:
 8005eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb8:	ed2d 8b02 	vpush	{d8}
 8005ebc:	b08d      	sub	sp, #52	; 0x34
 8005ebe:	460c      	mov	r4, r1
 8005ec0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005ec4:	4616      	mov	r6, r2
 8005ec6:	461f      	mov	r7, r3
 8005ec8:	4605      	mov	r5, r0
 8005eca:	f001 fd53 	bl	8007974 <_localeconv_r>
 8005ece:	f8d0 a000 	ldr.w	sl, [r0]
 8005ed2:	4650      	mov	r0, sl
 8005ed4:	f7fa f984 	bl	80001e0 <strlen>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	930a      	str	r3, [sp, #40]	; 0x28
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	9305      	str	r3, [sp, #20]
 8005ee0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ee4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005ee8:	3307      	adds	r3, #7
 8005eea:	f023 0307 	bic.w	r3, r3, #7
 8005eee:	f103 0208 	add.w	r2, r3, #8
 8005ef2:	f8c8 2000 	str.w	r2, [r8]
 8005ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005efe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005f02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005f06:	9307      	str	r3, [sp, #28]
 8005f08:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f0c:	ee08 0a10 	vmov	s16, r0
 8005f10:	4b9f      	ldr	r3, [pc, #636]	; (8006190 <_printf_float+0x2dc>)
 8005f12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f16:	f04f 32ff 	mov.w	r2, #4294967295
 8005f1a:	f7fa fe0f 	bl	8000b3c <__aeabi_dcmpun>
 8005f1e:	bb88      	cbnz	r0, 8005f84 <_printf_float+0xd0>
 8005f20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f24:	4b9a      	ldr	r3, [pc, #616]	; (8006190 <_printf_float+0x2dc>)
 8005f26:	f04f 32ff 	mov.w	r2, #4294967295
 8005f2a:	f7fa fde9 	bl	8000b00 <__aeabi_dcmple>
 8005f2e:	bb48      	cbnz	r0, 8005f84 <_printf_float+0xd0>
 8005f30:	2200      	movs	r2, #0
 8005f32:	2300      	movs	r3, #0
 8005f34:	4640      	mov	r0, r8
 8005f36:	4649      	mov	r1, r9
 8005f38:	f7fa fdd8 	bl	8000aec <__aeabi_dcmplt>
 8005f3c:	b110      	cbz	r0, 8005f44 <_printf_float+0x90>
 8005f3e:	232d      	movs	r3, #45	; 0x2d
 8005f40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f44:	4b93      	ldr	r3, [pc, #588]	; (8006194 <_printf_float+0x2e0>)
 8005f46:	4894      	ldr	r0, [pc, #592]	; (8006198 <_printf_float+0x2e4>)
 8005f48:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005f4c:	bf94      	ite	ls
 8005f4e:	4698      	movls	r8, r3
 8005f50:	4680      	movhi	r8, r0
 8005f52:	2303      	movs	r3, #3
 8005f54:	6123      	str	r3, [r4, #16]
 8005f56:	9b05      	ldr	r3, [sp, #20]
 8005f58:	f023 0204 	bic.w	r2, r3, #4
 8005f5c:	6022      	str	r2, [r4, #0]
 8005f5e:	f04f 0900 	mov.w	r9, #0
 8005f62:	9700      	str	r7, [sp, #0]
 8005f64:	4633      	mov	r3, r6
 8005f66:	aa0b      	add	r2, sp, #44	; 0x2c
 8005f68:	4621      	mov	r1, r4
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	f000 f9d8 	bl	8006320 <_printf_common>
 8005f70:	3001      	adds	r0, #1
 8005f72:	f040 8090 	bne.w	8006096 <_printf_float+0x1e2>
 8005f76:	f04f 30ff 	mov.w	r0, #4294967295
 8005f7a:	b00d      	add	sp, #52	; 0x34
 8005f7c:	ecbd 8b02 	vpop	{d8}
 8005f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f84:	4642      	mov	r2, r8
 8005f86:	464b      	mov	r3, r9
 8005f88:	4640      	mov	r0, r8
 8005f8a:	4649      	mov	r1, r9
 8005f8c:	f7fa fdd6 	bl	8000b3c <__aeabi_dcmpun>
 8005f90:	b140      	cbz	r0, 8005fa4 <_printf_float+0xf0>
 8005f92:	464b      	mov	r3, r9
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	bfbc      	itt	lt
 8005f98:	232d      	movlt	r3, #45	; 0x2d
 8005f9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f9e:	487f      	ldr	r0, [pc, #508]	; (800619c <_printf_float+0x2e8>)
 8005fa0:	4b7f      	ldr	r3, [pc, #508]	; (80061a0 <_printf_float+0x2ec>)
 8005fa2:	e7d1      	b.n	8005f48 <_printf_float+0x94>
 8005fa4:	6863      	ldr	r3, [r4, #4]
 8005fa6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005faa:	9206      	str	r2, [sp, #24]
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	d13f      	bne.n	8006030 <_printf_float+0x17c>
 8005fb0:	2306      	movs	r3, #6
 8005fb2:	6063      	str	r3, [r4, #4]
 8005fb4:	9b05      	ldr	r3, [sp, #20]
 8005fb6:	6861      	ldr	r1, [r4, #4]
 8005fb8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	9303      	str	r3, [sp, #12]
 8005fc0:	ab0a      	add	r3, sp, #40	; 0x28
 8005fc2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005fc6:	ab09      	add	r3, sp, #36	; 0x24
 8005fc8:	ec49 8b10 	vmov	d0, r8, r9
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	6022      	str	r2, [r4, #0]
 8005fd0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	f7ff fecd 	bl	8005d74 <__cvt>
 8005fda:	9b06      	ldr	r3, [sp, #24]
 8005fdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fde:	2b47      	cmp	r3, #71	; 0x47
 8005fe0:	4680      	mov	r8, r0
 8005fe2:	d108      	bne.n	8005ff6 <_printf_float+0x142>
 8005fe4:	1cc8      	adds	r0, r1, #3
 8005fe6:	db02      	blt.n	8005fee <_printf_float+0x13a>
 8005fe8:	6863      	ldr	r3, [r4, #4]
 8005fea:	4299      	cmp	r1, r3
 8005fec:	dd41      	ble.n	8006072 <_printf_float+0x1be>
 8005fee:	f1ab 0b02 	sub.w	fp, fp, #2
 8005ff2:	fa5f fb8b 	uxtb.w	fp, fp
 8005ff6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ffa:	d820      	bhi.n	800603e <_printf_float+0x18a>
 8005ffc:	3901      	subs	r1, #1
 8005ffe:	465a      	mov	r2, fp
 8006000:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006004:	9109      	str	r1, [sp, #36]	; 0x24
 8006006:	f7ff ff17 	bl	8005e38 <__exponent>
 800600a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800600c:	1813      	adds	r3, r2, r0
 800600e:	2a01      	cmp	r2, #1
 8006010:	4681      	mov	r9, r0
 8006012:	6123      	str	r3, [r4, #16]
 8006014:	dc02      	bgt.n	800601c <_printf_float+0x168>
 8006016:	6822      	ldr	r2, [r4, #0]
 8006018:	07d2      	lsls	r2, r2, #31
 800601a:	d501      	bpl.n	8006020 <_printf_float+0x16c>
 800601c:	3301      	adds	r3, #1
 800601e:	6123      	str	r3, [r4, #16]
 8006020:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006024:	2b00      	cmp	r3, #0
 8006026:	d09c      	beq.n	8005f62 <_printf_float+0xae>
 8006028:	232d      	movs	r3, #45	; 0x2d
 800602a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800602e:	e798      	b.n	8005f62 <_printf_float+0xae>
 8006030:	9a06      	ldr	r2, [sp, #24]
 8006032:	2a47      	cmp	r2, #71	; 0x47
 8006034:	d1be      	bne.n	8005fb4 <_printf_float+0x100>
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1bc      	bne.n	8005fb4 <_printf_float+0x100>
 800603a:	2301      	movs	r3, #1
 800603c:	e7b9      	b.n	8005fb2 <_printf_float+0xfe>
 800603e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006042:	d118      	bne.n	8006076 <_printf_float+0x1c2>
 8006044:	2900      	cmp	r1, #0
 8006046:	6863      	ldr	r3, [r4, #4]
 8006048:	dd0b      	ble.n	8006062 <_printf_float+0x1ae>
 800604a:	6121      	str	r1, [r4, #16]
 800604c:	b913      	cbnz	r3, 8006054 <_printf_float+0x1a0>
 800604e:	6822      	ldr	r2, [r4, #0]
 8006050:	07d0      	lsls	r0, r2, #31
 8006052:	d502      	bpl.n	800605a <_printf_float+0x1a6>
 8006054:	3301      	adds	r3, #1
 8006056:	440b      	add	r3, r1
 8006058:	6123      	str	r3, [r4, #16]
 800605a:	65a1      	str	r1, [r4, #88]	; 0x58
 800605c:	f04f 0900 	mov.w	r9, #0
 8006060:	e7de      	b.n	8006020 <_printf_float+0x16c>
 8006062:	b913      	cbnz	r3, 800606a <_printf_float+0x1b6>
 8006064:	6822      	ldr	r2, [r4, #0]
 8006066:	07d2      	lsls	r2, r2, #31
 8006068:	d501      	bpl.n	800606e <_printf_float+0x1ba>
 800606a:	3302      	adds	r3, #2
 800606c:	e7f4      	b.n	8006058 <_printf_float+0x1a4>
 800606e:	2301      	movs	r3, #1
 8006070:	e7f2      	b.n	8006058 <_printf_float+0x1a4>
 8006072:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006078:	4299      	cmp	r1, r3
 800607a:	db05      	blt.n	8006088 <_printf_float+0x1d4>
 800607c:	6823      	ldr	r3, [r4, #0]
 800607e:	6121      	str	r1, [r4, #16]
 8006080:	07d8      	lsls	r0, r3, #31
 8006082:	d5ea      	bpl.n	800605a <_printf_float+0x1a6>
 8006084:	1c4b      	adds	r3, r1, #1
 8006086:	e7e7      	b.n	8006058 <_printf_float+0x1a4>
 8006088:	2900      	cmp	r1, #0
 800608a:	bfd4      	ite	le
 800608c:	f1c1 0202 	rsble	r2, r1, #2
 8006090:	2201      	movgt	r2, #1
 8006092:	4413      	add	r3, r2
 8006094:	e7e0      	b.n	8006058 <_printf_float+0x1a4>
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	055a      	lsls	r2, r3, #21
 800609a:	d407      	bmi.n	80060ac <_printf_float+0x1f8>
 800609c:	6923      	ldr	r3, [r4, #16]
 800609e:	4642      	mov	r2, r8
 80060a0:	4631      	mov	r1, r6
 80060a2:	4628      	mov	r0, r5
 80060a4:	47b8      	blx	r7
 80060a6:	3001      	adds	r0, #1
 80060a8:	d12c      	bne.n	8006104 <_printf_float+0x250>
 80060aa:	e764      	b.n	8005f76 <_printf_float+0xc2>
 80060ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80060b0:	f240 80e0 	bls.w	8006274 <_printf_float+0x3c0>
 80060b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80060b8:	2200      	movs	r2, #0
 80060ba:	2300      	movs	r3, #0
 80060bc:	f7fa fd0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d034      	beq.n	800612e <_printf_float+0x27a>
 80060c4:	4a37      	ldr	r2, [pc, #220]	; (80061a4 <_printf_float+0x2f0>)
 80060c6:	2301      	movs	r3, #1
 80060c8:	4631      	mov	r1, r6
 80060ca:	4628      	mov	r0, r5
 80060cc:	47b8      	blx	r7
 80060ce:	3001      	adds	r0, #1
 80060d0:	f43f af51 	beq.w	8005f76 <_printf_float+0xc2>
 80060d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060d8:	429a      	cmp	r2, r3
 80060da:	db02      	blt.n	80060e2 <_printf_float+0x22e>
 80060dc:	6823      	ldr	r3, [r4, #0]
 80060de:	07d8      	lsls	r0, r3, #31
 80060e0:	d510      	bpl.n	8006104 <_printf_float+0x250>
 80060e2:	ee18 3a10 	vmov	r3, s16
 80060e6:	4652      	mov	r2, sl
 80060e8:	4631      	mov	r1, r6
 80060ea:	4628      	mov	r0, r5
 80060ec:	47b8      	blx	r7
 80060ee:	3001      	adds	r0, #1
 80060f0:	f43f af41 	beq.w	8005f76 <_printf_float+0xc2>
 80060f4:	f04f 0800 	mov.w	r8, #0
 80060f8:	f104 091a 	add.w	r9, r4, #26
 80060fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060fe:	3b01      	subs	r3, #1
 8006100:	4543      	cmp	r3, r8
 8006102:	dc09      	bgt.n	8006118 <_printf_float+0x264>
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	079b      	lsls	r3, r3, #30
 8006108:	f100 8105 	bmi.w	8006316 <_printf_float+0x462>
 800610c:	68e0      	ldr	r0, [r4, #12]
 800610e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006110:	4298      	cmp	r0, r3
 8006112:	bfb8      	it	lt
 8006114:	4618      	movlt	r0, r3
 8006116:	e730      	b.n	8005f7a <_printf_float+0xc6>
 8006118:	2301      	movs	r3, #1
 800611a:	464a      	mov	r2, r9
 800611c:	4631      	mov	r1, r6
 800611e:	4628      	mov	r0, r5
 8006120:	47b8      	blx	r7
 8006122:	3001      	adds	r0, #1
 8006124:	f43f af27 	beq.w	8005f76 <_printf_float+0xc2>
 8006128:	f108 0801 	add.w	r8, r8, #1
 800612c:	e7e6      	b.n	80060fc <_printf_float+0x248>
 800612e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006130:	2b00      	cmp	r3, #0
 8006132:	dc39      	bgt.n	80061a8 <_printf_float+0x2f4>
 8006134:	4a1b      	ldr	r2, [pc, #108]	; (80061a4 <_printf_float+0x2f0>)
 8006136:	2301      	movs	r3, #1
 8006138:	4631      	mov	r1, r6
 800613a:	4628      	mov	r0, r5
 800613c:	47b8      	blx	r7
 800613e:	3001      	adds	r0, #1
 8006140:	f43f af19 	beq.w	8005f76 <_printf_float+0xc2>
 8006144:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006148:	4313      	orrs	r3, r2
 800614a:	d102      	bne.n	8006152 <_printf_float+0x29e>
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	07d9      	lsls	r1, r3, #31
 8006150:	d5d8      	bpl.n	8006104 <_printf_float+0x250>
 8006152:	ee18 3a10 	vmov	r3, s16
 8006156:	4652      	mov	r2, sl
 8006158:	4631      	mov	r1, r6
 800615a:	4628      	mov	r0, r5
 800615c:	47b8      	blx	r7
 800615e:	3001      	adds	r0, #1
 8006160:	f43f af09 	beq.w	8005f76 <_printf_float+0xc2>
 8006164:	f04f 0900 	mov.w	r9, #0
 8006168:	f104 0a1a 	add.w	sl, r4, #26
 800616c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800616e:	425b      	negs	r3, r3
 8006170:	454b      	cmp	r3, r9
 8006172:	dc01      	bgt.n	8006178 <_printf_float+0x2c4>
 8006174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006176:	e792      	b.n	800609e <_printf_float+0x1ea>
 8006178:	2301      	movs	r3, #1
 800617a:	4652      	mov	r2, sl
 800617c:	4631      	mov	r1, r6
 800617e:	4628      	mov	r0, r5
 8006180:	47b8      	blx	r7
 8006182:	3001      	adds	r0, #1
 8006184:	f43f aef7 	beq.w	8005f76 <_printf_float+0xc2>
 8006188:	f109 0901 	add.w	r9, r9, #1
 800618c:	e7ee      	b.n	800616c <_printf_float+0x2b8>
 800618e:	bf00      	nop
 8006190:	7fefffff 	.word	0x7fefffff
 8006194:	08008aa1 	.word	0x08008aa1
 8006198:	08008aa5 	.word	0x08008aa5
 800619c:	08008aad 	.word	0x08008aad
 80061a0:	08008aa9 	.word	0x08008aa9
 80061a4:	08008ab1 	.word	0x08008ab1
 80061a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061ac:	429a      	cmp	r2, r3
 80061ae:	bfa8      	it	ge
 80061b0:	461a      	movge	r2, r3
 80061b2:	2a00      	cmp	r2, #0
 80061b4:	4691      	mov	r9, r2
 80061b6:	dc37      	bgt.n	8006228 <_printf_float+0x374>
 80061b8:	f04f 0b00 	mov.w	fp, #0
 80061bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061c0:	f104 021a 	add.w	r2, r4, #26
 80061c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061c6:	9305      	str	r3, [sp, #20]
 80061c8:	eba3 0309 	sub.w	r3, r3, r9
 80061cc:	455b      	cmp	r3, fp
 80061ce:	dc33      	bgt.n	8006238 <_printf_float+0x384>
 80061d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061d4:	429a      	cmp	r2, r3
 80061d6:	db3b      	blt.n	8006250 <_printf_float+0x39c>
 80061d8:	6823      	ldr	r3, [r4, #0]
 80061da:	07da      	lsls	r2, r3, #31
 80061dc:	d438      	bmi.n	8006250 <_printf_float+0x39c>
 80061de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061e0:	9a05      	ldr	r2, [sp, #20]
 80061e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061e4:	1a9a      	subs	r2, r3, r2
 80061e6:	eba3 0901 	sub.w	r9, r3, r1
 80061ea:	4591      	cmp	r9, r2
 80061ec:	bfa8      	it	ge
 80061ee:	4691      	movge	r9, r2
 80061f0:	f1b9 0f00 	cmp.w	r9, #0
 80061f4:	dc35      	bgt.n	8006262 <_printf_float+0x3ae>
 80061f6:	f04f 0800 	mov.w	r8, #0
 80061fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061fe:	f104 0a1a 	add.w	sl, r4, #26
 8006202:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006206:	1a9b      	subs	r3, r3, r2
 8006208:	eba3 0309 	sub.w	r3, r3, r9
 800620c:	4543      	cmp	r3, r8
 800620e:	f77f af79 	ble.w	8006104 <_printf_float+0x250>
 8006212:	2301      	movs	r3, #1
 8006214:	4652      	mov	r2, sl
 8006216:	4631      	mov	r1, r6
 8006218:	4628      	mov	r0, r5
 800621a:	47b8      	blx	r7
 800621c:	3001      	adds	r0, #1
 800621e:	f43f aeaa 	beq.w	8005f76 <_printf_float+0xc2>
 8006222:	f108 0801 	add.w	r8, r8, #1
 8006226:	e7ec      	b.n	8006202 <_printf_float+0x34e>
 8006228:	4613      	mov	r3, r2
 800622a:	4631      	mov	r1, r6
 800622c:	4642      	mov	r2, r8
 800622e:	4628      	mov	r0, r5
 8006230:	47b8      	blx	r7
 8006232:	3001      	adds	r0, #1
 8006234:	d1c0      	bne.n	80061b8 <_printf_float+0x304>
 8006236:	e69e      	b.n	8005f76 <_printf_float+0xc2>
 8006238:	2301      	movs	r3, #1
 800623a:	4631      	mov	r1, r6
 800623c:	4628      	mov	r0, r5
 800623e:	9205      	str	r2, [sp, #20]
 8006240:	47b8      	blx	r7
 8006242:	3001      	adds	r0, #1
 8006244:	f43f ae97 	beq.w	8005f76 <_printf_float+0xc2>
 8006248:	9a05      	ldr	r2, [sp, #20]
 800624a:	f10b 0b01 	add.w	fp, fp, #1
 800624e:	e7b9      	b.n	80061c4 <_printf_float+0x310>
 8006250:	ee18 3a10 	vmov	r3, s16
 8006254:	4652      	mov	r2, sl
 8006256:	4631      	mov	r1, r6
 8006258:	4628      	mov	r0, r5
 800625a:	47b8      	blx	r7
 800625c:	3001      	adds	r0, #1
 800625e:	d1be      	bne.n	80061de <_printf_float+0x32a>
 8006260:	e689      	b.n	8005f76 <_printf_float+0xc2>
 8006262:	9a05      	ldr	r2, [sp, #20]
 8006264:	464b      	mov	r3, r9
 8006266:	4442      	add	r2, r8
 8006268:	4631      	mov	r1, r6
 800626a:	4628      	mov	r0, r5
 800626c:	47b8      	blx	r7
 800626e:	3001      	adds	r0, #1
 8006270:	d1c1      	bne.n	80061f6 <_printf_float+0x342>
 8006272:	e680      	b.n	8005f76 <_printf_float+0xc2>
 8006274:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006276:	2a01      	cmp	r2, #1
 8006278:	dc01      	bgt.n	800627e <_printf_float+0x3ca>
 800627a:	07db      	lsls	r3, r3, #31
 800627c:	d538      	bpl.n	80062f0 <_printf_float+0x43c>
 800627e:	2301      	movs	r3, #1
 8006280:	4642      	mov	r2, r8
 8006282:	4631      	mov	r1, r6
 8006284:	4628      	mov	r0, r5
 8006286:	47b8      	blx	r7
 8006288:	3001      	adds	r0, #1
 800628a:	f43f ae74 	beq.w	8005f76 <_printf_float+0xc2>
 800628e:	ee18 3a10 	vmov	r3, s16
 8006292:	4652      	mov	r2, sl
 8006294:	4631      	mov	r1, r6
 8006296:	4628      	mov	r0, r5
 8006298:	47b8      	blx	r7
 800629a:	3001      	adds	r0, #1
 800629c:	f43f ae6b 	beq.w	8005f76 <_printf_float+0xc2>
 80062a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80062a4:	2200      	movs	r2, #0
 80062a6:	2300      	movs	r3, #0
 80062a8:	f7fa fc16 	bl	8000ad8 <__aeabi_dcmpeq>
 80062ac:	b9d8      	cbnz	r0, 80062e6 <_printf_float+0x432>
 80062ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062b0:	f108 0201 	add.w	r2, r8, #1
 80062b4:	3b01      	subs	r3, #1
 80062b6:	4631      	mov	r1, r6
 80062b8:	4628      	mov	r0, r5
 80062ba:	47b8      	blx	r7
 80062bc:	3001      	adds	r0, #1
 80062be:	d10e      	bne.n	80062de <_printf_float+0x42a>
 80062c0:	e659      	b.n	8005f76 <_printf_float+0xc2>
 80062c2:	2301      	movs	r3, #1
 80062c4:	4652      	mov	r2, sl
 80062c6:	4631      	mov	r1, r6
 80062c8:	4628      	mov	r0, r5
 80062ca:	47b8      	blx	r7
 80062cc:	3001      	adds	r0, #1
 80062ce:	f43f ae52 	beq.w	8005f76 <_printf_float+0xc2>
 80062d2:	f108 0801 	add.w	r8, r8, #1
 80062d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062d8:	3b01      	subs	r3, #1
 80062da:	4543      	cmp	r3, r8
 80062dc:	dcf1      	bgt.n	80062c2 <_printf_float+0x40e>
 80062de:	464b      	mov	r3, r9
 80062e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80062e4:	e6dc      	b.n	80060a0 <_printf_float+0x1ec>
 80062e6:	f04f 0800 	mov.w	r8, #0
 80062ea:	f104 0a1a 	add.w	sl, r4, #26
 80062ee:	e7f2      	b.n	80062d6 <_printf_float+0x422>
 80062f0:	2301      	movs	r3, #1
 80062f2:	4642      	mov	r2, r8
 80062f4:	e7df      	b.n	80062b6 <_printf_float+0x402>
 80062f6:	2301      	movs	r3, #1
 80062f8:	464a      	mov	r2, r9
 80062fa:	4631      	mov	r1, r6
 80062fc:	4628      	mov	r0, r5
 80062fe:	47b8      	blx	r7
 8006300:	3001      	adds	r0, #1
 8006302:	f43f ae38 	beq.w	8005f76 <_printf_float+0xc2>
 8006306:	f108 0801 	add.w	r8, r8, #1
 800630a:	68e3      	ldr	r3, [r4, #12]
 800630c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800630e:	1a5b      	subs	r3, r3, r1
 8006310:	4543      	cmp	r3, r8
 8006312:	dcf0      	bgt.n	80062f6 <_printf_float+0x442>
 8006314:	e6fa      	b.n	800610c <_printf_float+0x258>
 8006316:	f04f 0800 	mov.w	r8, #0
 800631a:	f104 0919 	add.w	r9, r4, #25
 800631e:	e7f4      	b.n	800630a <_printf_float+0x456>

08006320 <_printf_common>:
 8006320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006324:	4616      	mov	r6, r2
 8006326:	4699      	mov	r9, r3
 8006328:	688a      	ldr	r2, [r1, #8]
 800632a:	690b      	ldr	r3, [r1, #16]
 800632c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006330:	4293      	cmp	r3, r2
 8006332:	bfb8      	it	lt
 8006334:	4613      	movlt	r3, r2
 8006336:	6033      	str	r3, [r6, #0]
 8006338:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800633c:	4607      	mov	r7, r0
 800633e:	460c      	mov	r4, r1
 8006340:	b10a      	cbz	r2, 8006346 <_printf_common+0x26>
 8006342:	3301      	adds	r3, #1
 8006344:	6033      	str	r3, [r6, #0]
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	0699      	lsls	r1, r3, #26
 800634a:	bf42      	ittt	mi
 800634c:	6833      	ldrmi	r3, [r6, #0]
 800634e:	3302      	addmi	r3, #2
 8006350:	6033      	strmi	r3, [r6, #0]
 8006352:	6825      	ldr	r5, [r4, #0]
 8006354:	f015 0506 	ands.w	r5, r5, #6
 8006358:	d106      	bne.n	8006368 <_printf_common+0x48>
 800635a:	f104 0a19 	add.w	sl, r4, #25
 800635e:	68e3      	ldr	r3, [r4, #12]
 8006360:	6832      	ldr	r2, [r6, #0]
 8006362:	1a9b      	subs	r3, r3, r2
 8006364:	42ab      	cmp	r3, r5
 8006366:	dc26      	bgt.n	80063b6 <_printf_common+0x96>
 8006368:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800636c:	1e13      	subs	r3, r2, #0
 800636e:	6822      	ldr	r2, [r4, #0]
 8006370:	bf18      	it	ne
 8006372:	2301      	movne	r3, #1
 8006374:	0692      	lsls	r2, r2, #26
 8006376:	d42b      	bmi.n	80063d0 <_printf_common+0xb0>
 8006378:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800637c:	4649      	mov	r1, r9
 800637e:	4638      	mov	r0, r7
 8006380:	47c0      	blx	r8
 8006382:	3001      	adds	r0, #1
 8006384:	d01e      	beq.n	80063c4 <_printf_common+0xa4>
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	68e5      	ldr	r5, [r4, #12]
 800638a:	6832      	ldr	r2, [r6, #0]
 800638c:	f003 0306 	and.w	r3, r3, #6
 8006390:	2b04      	cmp	r3, #4
 8006392:	bf08      	it	eq
 8006394:	1aad      	subeq	r5, r5, r2
 8006396:	68a3      	ldr	r3, [r4, #8]
 8006398:	6922      	ldr	r2, [r4, #16]
 800639a:	bf0c      	ite	eq
 800639c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063a0:	2500      	movne	r5, #0
 80063a2:	4293      	cmp	r3, r2
 80063a4:	bfc4      	itt	gt
 80063a6:	1a9b      	subgt	r3, r3, r2
 80063a8:	18ed      	addgt	r5, r5, r3
 80063aa:	2600      	movs	r6, #0
 80063ac:	341a      	adds	r4, #26
 80063ae:	42b5      	cmp	r5, r6
 80063b0:	d11a      	bne.n	80063e8 <_printf_common+0xc8>
 80063b2:	2000      	movs	r0, #0
 80063b4:	e008      	b.n	80063c8 <_printf_common+0xa8>
 80063b6:	2301      	movs	r3, #1
 80063b8:	4652      	mov	r2, sl
 80063ba:	4649      	mov	r1, r9
 80063bc:	4638      	mov	r0, r7
 80063be:	47c0      	blx	r8
 80063c0:	3001      	adds	r0, #1
 80063c2:	d103      	bne.n	80063cc <_printf_common+0xac>
 80063c4:	f04f 30ff 	mov.w	r0, #4294967295
 80063c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063cc:	3501      	adds	r5, #1
 80063ce:	e7c6      	b.n	800635e <_printf_common+0x3e>
 80063d0:	18e1      	adds	r1, r4, r3
 80063d2:	1c5a      	adds	r2, r3, #1
 80063d4:	2030      	movs	r0, #48	; 0x30
 80063d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063da:	4422      	add	r2, r4
 80063dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063e4:	3302      	adds	r3, #2
 80063e6:	e7c7      	b.n	8006378 <_printf_common+0x58>
 80063e8:	2301      	movs	r3, #1
 80063ea:	4622      	mov	r2, r4
 80063ec:	4649      	mov	r1, r9
 80063ee:	4638      	mov	r0, r7
 80063f0:	47c0      	blx	r8
 80063f2:	3001      	adds	r0, #1
 80063f4:	d0e6      	beq.n	80063c4 <_printf_common+0xa4>
 80063f6:	3601      	adds	r6, #1
 80063f8:	e7d9      	b.n	80063ae <_printf_common+0x8e>
	...

080063fc <_printf_i>:
 80063fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006400:	7e0f      	ldrb	r7, [r1, #24]
 8006402:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006404:	2f78      	cmp	r7, #120	; 0x78
 8006406:	4691      	mov	r9, r2
 8006408:	4680      	mov	r8, r0
 800640a:	460c      	mov	r4, r1
 800640c:	469a      	mov	sl, r3
 800640e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006412:	d807      	bhi.n	8006424 <_printf_i+0x28>
 8006414:	2f62      	cmp	r7, #98	; 0x62
 8006416:	d80a      	bhi.n	800642e <_printf_i+0x32>
 8006418:	2f00      	cmp	r7, #0
 800641a:	f000 80d8 	beq.w	80065ce <_printf_i+0x1d2>
 800641e:	2f58      	cmp	r7, #88	; 0x58
 8006420:	f000 80a3 	beq.w	800656a <_printf_i+0x16e>
 8006424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006428:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800642c:	e03a      	b.n	80064a4 <_printf_i+0xa8>
 800642e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006432:	2b15      	cmp	r3, #21
 8006434:	d8f6      	bhi.n	8006424 <_printf_i+0x28>
 8006436:	a101      	add	r1, pc, #4	; (adr r1, 800643c <_printf_i+0x40>)
 8006438:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800643c:	08006495 	.word	0x08006495
 8006440:	080064a9 	.word	0x080064a9
 8006444:	08006425 	.word	0x08006425
 8006448:	08006425 	.word	0x08006425
 800644c:	08006425 	.word	0x08006425
 8006450:	08006425 	.word	0x08006425
 8006454:	080064a9 	.word	0x080064a9
 8006458:	08006425 	.word	0x08006425
 800645c:	08006425 	.word	0x08006425
 8006460:	08006425 	.word	0x08006425
 8006464:	08006425 	.word	0x08006425
 8006468:	080065b5 	.word	0x080065b5
 800646c:	080064d9 	.word	0x080064d9
 8006470:	08006597 	.word	0x08006597
 8006474:	08006425 	.word	0x08006425
 8006478:	08006425 	.word	0x08006425
 800647c:	080065d7 	.word	0x080065d7
 8006480:	08006425 	.word	0x08006425
 8006484:	080064d9 	.word	0x080064d9
 8006488:	08006425 	.word	0x08006425
 800648c:	08006425 	.word	0x08006425
 8006490:	0800659f 	.word	0x0800659f
 8006494:	682b      	ldr	r3, [r5, #0]
 8006496:	1d1a      	adds	r2, r3, #4
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	602a      	str	r2, [r5, #0]
 800649c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064a4:	2301      	movs	r3, #1
 80064a6:	e0a3      	b.n	80065f0 <_printf_i+0x1f4>
 80064a8:	6820      	ldr	r0, [r4, #0]
 80064aa:	6829      	ldr	r1, [r5, #0]
 80064ac:	0606      	lsls	r6, r0, #24
 80064ae:	f101 0304 	add.w	r3, r1, #4
 80064b2:	d50a      	bpl.n	80064ca <_printf_i+0xce>
 80064b4:	680e      	ldr	r6, [r1, #0]
 80064b6:	602b      	str	r3, [r5, #0]
 80064b8:	2e00      	cmp	r6, #0
 80064ba:	da03      	bge.n	80064c4 <_printf_i+0xc8>
 80064bc:	232d      	movs	r3, #45	; 0x2d
 80064be:	4276      	negs	r6, r6
 80064c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064c4:	485e      	ldr	r0, [pc, #376]	; (8006640 <_printf_i+0x244>)
 80064c6:	230a      	movs	r3, #10
 80064c8:	e019      	b.n	80064fe <_printf_i+0x102>
 80064ca:	680e      	ldr	r6, [r1, #0]
 80064cc:	602b      	str	r3, [r5, #0]
 80064ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064d2:	bf18      	it	ne
 80064d4:	b236      	sxthne	r6, r6
 80064d6:	e7ef      	b.n	80064b8 <_printf_i+0xbc>
 80064d8:	682b      	ldr	r3, [r5, #0]
 80064da:	6820      	ldr	r0, [r4, #0]
 80064dc:	1d19      	adds	r1, r3, #4
 80064de:	6029      	str	r1, [r5, #0]
 80064e0:	0601      	lsls	r1, r0, #24
 80064e2:	d501      	bpl.n	80064e8 <_printf_i+0xec>
 80064e4:	681e      	ldr	r6, [r3, #0]
 80064e6:	e002      	b.n	80064ee <_printf_i+0xf2>
 80064e8:	0646      	lsls	r6, r0, #25
 80064ea:	d5fb      	bpl.n	80064e4 <_printf_i+0xe8>
 80064ec:	881e      	ldrh	r6, [r3, #0]
 80064ee:	4854      	ldr	r0, [pc, #336]	; (8006640 <_printf_i+0x244>)
 80064f0:	2f6f      	cmp	r7, #111	; 0x6f
 80064f2:	bf0c      	ite	eq
 80064f4:	2308      	moveq	r3, #8
 80064f6:	230a      	movne	r3, #10
 80064f8:	2100      	movs	r1, #0
 80064fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064fe:	6865      	ldr	r5, [r4, #4]
 8006500:	60a5      	str	r5, [r4, #8]
 8006502:	2d00      	cmp	r5, #0
 8006504:	bfa2      	ittt	ge
 8006506:	6821      	ldrge	r1, [r4, #0]
 8006508:	f021 0104 	bicge.w	r1, r1, #4
 800650c:	6021      	strge	r1, [r4, #0]
 800650e:	b90e      	cbnz	r6, 8006514 <_printf_i+0x118>
 8006510:	2d00      	cmp	r5, #0
 8006512:	d04d      	beq.n	80065b0 <_printf_i+0x1b4>
 8006514:	4615      	mov	r5, r2
 8006516:	fbb6 f1f3 	udiv	r1, r6, r3
 800651a:	fb03 6711 	mls	r7, r3, r1, r6
 800651e:	5dc7      	ldrb	r7, [r0, r7]
 8006520:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006524:	4637      	mov	r7, r6
 8006526:	42bb      	cmp	r3, r7
 8006528:	460e      	mov	r6, r1
 800652a:	d9f4      	bls.n	8006516 <_printf_i+0x11a>
 800652c:	2b08      	cmp	r3, #8
 800652e:	d10b      	bne.n	8006548 <_printf_i+0x14c>
 8006530:	6823      	ldr	r3, [r4, #0]
 8006532:	07de      	lsls	r6, r3, #31
 8006534:	d508      	bpl.n	8006548 <_printf_i+0x14c>
 8006536:	6923      	ldr	r3, [r4, #16]
 8006538:	6861      	ldr	r1, [r4, #4]
 800653a:	4299      	cmp	r1, r3
 800653c:	bfde      	ittt	le
 800653e:	2330      	movle	r3, #48	; 0x30
 8006540:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006544:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006548:	1b52      	subs	r2, r2, r5
 800654a:	6122      	str	r2, [r4, #16]
 800654c:	f8cd a000 	str.w	sl, [sp]
 8006550:	464b      	mov	r3, r9
 8006552:	aa03      	add	r2, sp, #12
 8006554:	4621      	mov	r1, r4
 8006556:	4640      	mov	r0, r8
 8006558:	f7ff fee2 	bl	8006320 <_printf_common>
 800655c:	3001      	adds	r0, #1
 800655e:	d14c      	bne.n	80065fa <_printf_i+0x1fe>
 8006560:	f04f 30ff 	mov.w	r0, #4294967295
 8006564:	b004      	add	sp, #16
 8006566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800656a:	4835      	ldr	r0, [pc, #212]	; (8006640 <_printf_i+0x244>)
 800656c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006570:	6829      	ldr	r1, [r5, #0]
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	f851 6b04 	ldr.w	r6, [r1], #4
 8006578:	6029      	str	r1, [r5, #0]
 800657a:	061d      	lsls	r5, r3, #24
 800657c:	d514      	bpl.n	80065a8 <_printf_i+0x1ac>
 800657e:	07df      	lsls	r7, r3, #31
 8006580:	bf44      	itt	mi
 8006582:	f043 0320 	orrmi.w	r3, r3, #32
 8006586:	6023      	strmi	r3, [r4, #0]
 8006588:	b91e      	cbnz	r6, 8006592 <_printf_i+0x196>
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	f023 0320 	bic.w	r3, r3, #32
 8006590:	6023      	str	r3, [r4, #0]
 8006592:	2310      	movs	r3, #16
 8006594:	e7b0      	b.n	80064f8 <_printf_i+0xfc>
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	f043 0320 	orr.w	r3, r3, #32
 800659c:	6023      	str	r3, [r4, #0]
 800659e:	2378      	movs	r3, #120	; 0x78
 80065a0:	4828      	ldr	r0, [pc, #160]	; (8006644 <_printf_i+0x248>)
 80065a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065a6:	e7e3      	b.n	8006570 <_printf_i+0x174>
 80065a8:	0659      	lsls	r1, r3, #25
 80065aa:	bf48      	it	mi
 80065ac:	b2b6      	uxthmi	r6, r6
 80065ae:	e7e6      	b.n	800657e <_printf_i+0x182>
 80065b0:	4615      	mov	r5, r2
 80065b2:	e7bb      	b.n	800652c <_printf_i+0x130>
 80065b4:	682b      	ldr	r3, [r5, #0]
 80065b6:	6826      	ldr	r6, [r4, #0]
 80065b8:	6961      	ldr	r1, [r4, #20]
 80065ba:	1d18      	adds	r0, r3, #4
 80065bc:	6028      	str	r0, [r5, #0]
 80065be:	0635      	lsls	r5, r6, #24
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	d501      	bpl.n	80065c8 <_printf_i+0x1cc>
 80065c4:	6019      	str	r1, [r3, #0]
 80065c6:	e002      	b.n	80065ce <_printf_i+0x1d2>
 80065c8:	0670      	lsls	r0, r6, #25
 80065ca:	d5fb      	bpl.n	80065c4 <_printf_i+0x1c8>
 80065cc:	8019      	strh	r1, [r3, #0]
 80065ce:	2300      	movs	r3, #0
 80065d0:	6123      	str	r3, [r4, #16]
 80065d2:	4615      	mov	r5, r2
 80065d4:	e7ba      	b.n	800654c <_printf_i+0x150>
 80065d6:	682b      	ldr	r3, [r5, #0]
 80065d8:	1d1a      	adds	r2, r3, #4
 80065da:	602a      	str	r2, [r5, #0]
 80065dc:	681d      	ldr	r5, [r3, #0]
 80065de:	6862      	ldr	r2, [r4, #4]
 80065e0:	2100      	movs	r1, #0
 80065e2:	4628      	mov	r0, r5
 80065e4:	f7f9 fe04 	bl	80001f0 <memchr>
 80065e8:	b108      	cbz	r0, 80065ee <_printf_i+0x1f2>
 80065ea:	1b40      	subs	r0, r0, r5
 80065ec:	6060      	str	r0, [r4, #4]
 80065ee:	6863      	ldr	r3, [r4, #4]
 80065f0:	6123      	str	r3, [r4, #16]
 80065f2:	2300      	movs	r3, #0
 80065f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065f8:	e7a8      	b.n	800654c <_printf_i+0x150>
 80065fa:	6923      	ldr	r3, [r4, #16]
 80065fc:	462a      	mov	r2, r5
 80065fe:	4649      	mov	r1, r9
 8006600:	4640      	mov	r0, r8
 8006602:	47d0      	blx	sl
 8006604:	3001      	adds	r0, #1
 8006606:	d0ab      	beq.n	8006560 <_printf_i+0x164>
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	079b      	lsls	r3, r3, #30
 800660c:	d413      	bmi.n	8006636 <_printf_i+0x23a>
 800660e:	68e0      	ldr	r0, [r4, #12]
 8006610:	9b03      	ldr	r3, [sp, #12]
 8006612:	4298      	cmp	r0, r3
 8006614:	bfb8      	it	lt
 8006616:	4618      	movlt	r0, r3
 8006618:	e7a4      	b.n	8006564 <_printf_i+0x168>
 800661a:	2301      	movs	r3, #1
 800661c:	4632      	mov	r2, r6
 800661e:	4649      	mov	r1, r9
 8006620:	4640      	mov	r0, r8
 8006622:	47d0      	blx	sl
 8006624:	3001      	adds	r0, #1
 8006626:	d09b      	beq.n	8006560 <_printf_i+0x164>
 8006628:	3501      	adds	r5, #1
 800662a:	68e3      	ldr	r3, [r4, #12]
 800662c:	9903      	ldr	r1, [sp, #12]
 800662e:	1a5b      	subs	r3, r3, r1
 8006630:	42ab      	cmp	r3, r5
 8006632:	dcf2      	bgt.n	800661a <_printf_i+0x21e>
 8006634:	e7eb      	b.n	800660e <_printf_i+0x212>
 8006636:	2500      	movs	r5, #0
 8006638:	f104 0619 	add.w	r6, r4, #25
 800663c:	e7f5      	b.n	800662a <_printf_i+0x22e>
 800663e:	bf00      	nop
 8006640:	08008ab3 	.word	0x08008ab3
 8006644:	08008ac4 	.word	0x08008ac4

08006648 <iprintf>:
 8006648:	b40f      	push	{r0, r1, r2, r3}
 800664a:	4b0a      	ldr	r3, [pc, #40]	; (8006674 <iprintf+0x2c>)
 800664c:	b513      	push	{r0, r1, r4, lr}
 800664e:	681c      	ldr	r4, [r3, #0]
 8006650:	b124      	cbz	r4, 800665c <iprintf+0x14>
 8006652:	69a3      	ldr	r3, [r4, #24]
 8006654:	b913      	cbnz	r3, 800665c <iprintf+0x14>
 8006656:	4620      	mov	r0, r4
 8006658:	f001 f8ee 	bl	8007838 <__sinit>
 800665c:	ab05      	add	r3, sp, #20
 800665e:	9a04      	ldr	r2, [sp, #16]
 8006660:	68a1      	ldr	r1, [r4, #8]
 8006662:	9301      	str	r3, [sp, #4]
 8006664:	4620      	mov	r0, r4
 8006666:	f7ff fa55 	bl	8005b14 <_vfiprintf_r>
 800666a:	b002      	add	sp, #8
 800666c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006670:	b004      	add	sp, #16
 8006672:	4770      	bx	lr
 8006674:	2000000c 	.word	0x2000000c

08006678 <_puts_r>:
 8006678:	b570      	push	{r4, r5, r6, lr}
 800667a:	460e      	mov	r6, r1
 800667c:	4605      	mov	r5, r0
 800667e:	b118      	cbz	r0, 8006688 <_puts_r+0x10>
 8006680:	6983      	ldr	r3, [r0, #24]
 8006682:	b90b      	cbnz	r3, 8006688 <_puts_r+0x10>
 8006684:	f001 f8d8 	bl	8007838 <__sinit>
 8006688:	69ab      	ldr	r3, [r5, #24]
 800668a:	68ac      	ldr	r4, [r5, #8]
 800668c:	b913      	cbnz	r3, 8006694 <_puts_r+0x1c>
 800668e:	4628      	mov	r0, r5
 8006690:	f001 f8d2 	bl	8007838 <__sinit>
 8006694:	4b2c      	ldr	r3, [pc, #176]	; (8006748 <_puts_r+0xd0>)
 8006696:	429c      	cmp	r4, r3
 8006698:	d120      	bne.n	80066dc <_puts_r+0x64>
 800669a:	686c      	ldr	r4, [r5, #4]
 800669c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800669e:	07db      	lsls	r3, r3, #31
 80066a0:	d405      	bmi.n	80066ae <_puts_r+0x36>
 80066a2:	89a3      	ldrh	r3, [r4, #12]
 80066a4:	0598      	lsls	r0, r3, #22
 80066a6:	d402      	bmi.n	80066ae <_puts_r+0x36>
 80066a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066aa:	f001 f968 	bl	800797e <__retarget_lock_acquire_recursive>
 80066ae:	89a3      	ldrh	r3, [r4, #12]
 80066b0:	0719      	lsls	r1, r3, #28
 80066b2:	d51d      	bpl.n	80066f0 <_puts_r+0x78>
 80066b4:	6923      	ldr	r3, [r4, #16]
 80066b6:	b1db      	cbz	r3, 80066f0 <_puts_r+0x78>
 80066b8:	3e01      	subs	r6, #1
 80066ba:	68a3      	ldr	r3, [r4, #8]
 80066bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80066c0:	3b01      	subs	r3, #1
 80066c2:	60a3      	str	r3, [r4, #8]
 80066c4:	bb39      	cbnz	r1, 8006716 <_puts_r+0x9e>
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	da38      	bge.n	800673c <_puts_r+0xc4>
 80066ca:	4622      	mov	r2, r4
 80066cc:	210a      	movs	r1, #10
 80066ce:	4628      	mov	r0, r5
 80066d0:	f000 f858 	bl	8006784 <__swbuf_r>
 80066d4:	3001      	adds	r0, #1
 80066d6:	d011      	beq.n	80066fc <_puts_r+0x84>
 80066d8:	250a      	movs	r5, #10
 80066da:	e011      	b.n	8006700 <_puts_r+0x88>
 80066dc:	4b1b      	ldr	r3, [pc, #108]	; (800674c <_puts_r+0xd4>)
 80066de:	429c      	cmp	r4, r3
 80066e0:	d101      	bne.n	80066e6 <_puts_r+0x6e>
 80066e2:	68ac      	ldr	r4, [r5, #8]
 80066e4:	e7da      	b.n	800669c <_puts_r+0x24>
 80066e6:	4b1a      	ldr	r3, [pc, #104]	; (8006750 <_puts_r+0xd8>)
 80066e8:	429c      	cmp	r4, r3
 80066ea:	bf08      	it	eq
 80066ec:	68ec      	ldreq	r4, [r5, #12]
 80066ee:	e7d5      	b.n	800669c <_puts_r+0x24>
 80066f0:	4621      	mov	r1, r4
 80066f2:	4628      	mov	r0, r5
 80066f4:	f000 f898 	bl	8006828 <__swsetup_r>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	d0dd      	beq.n	80066b8 <_puts_r+0x40>
 80066fc:	f04f 35ff 	mov.w	r5, #4294967295
 8006700:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006702:	07da      	lsls	r2, r3, #31
 8006704:	d405      	bmi.n	8006712 <_puts_r+0x9a>
 8006706:	89a3      	ldrh	r3, [r4, #12]
 8006708:	059b      	lsls	r3, r3, #22
 800670a:	d402      	bmi.n	8006712 <_puts_r+0x9a>
 800670c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800670e:	f001 f937 	bl	8007980 <__retarget_lock_release_recursive>
 8006712:	4628      	mov	r0, r5
 8006714:	bd70      	pop	{r4, r5, r6, pc}
 8006716:	2b00      	cmp	r3, #0
 8006718:	da04      	bge.n	8006724 <_puts_r+0xac>
 800671a:	69a2      	ldr	r2, [r4, #24]
 800671c:	429a      	cmp	r2, r3
 800671e:	dc06      	bgt.n	800672e <_puts_r+0xb6>
 8006720:	290a      	cmp	r1, #10
 8006722:	d004      	beq.n	800672e <_puts_r+0xb6>
 8006724:	6823      	ldr	r3, [r4, #0]
 8006726:	1c5a      	adds	r2, r3, #1
 8006728:	6022      	str	r2, [r4, #0]
 800672a:	7019      	strb	r1, [r3, #0]
 800672c:	e7c5      	b.n	80066ba <_puts_r+0x42>
 800672e:	4622      	mov	r2, r4
 8006730:	4628      	mov	r0, r5
 8006732:	f000 f827 	bl	8006784 <__swbuf_r>
 8006736:	3001      	adds	r0, #1
 8006738:	d1bf      	bne.n	80066ba <_puts_r+0x42>
 800673a:	e7df      	b.n	80066fc <_puts_r+0x84>
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	250a      	movs	r5, #10
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	6022      	str	r2, [r4, #0]
 8006744:	701d      	strb	r5, [r3, #0]
 8006746:	e7db      	b.n	8006700 <_puts_r+0x88>
 8006748:	08008b88 	.word	0x08008b88
 800674c:	08008ba8 	.word	0x08008ba8
 8006750:	08008b68 	.word	0x08008b68

08006754 <puts>:
 8006754:	4b02      	ldr	r3, [pc, #8]	; (8006760 <puts+0xc>)
 8006756:	4601      	mov	r1, r0
 8006758:	6818      	ldr	r0, [r3, #0]
 800675a:	f7ff bf8d 	b.w	8006678 <_puts_r>
 800675e:	bf00      	nop
 8006760:	2000000c 	.word	0x2000000c

08006764 <_sbrk_r>:
 8006764:	b538      	push	{r3, r4, r5, lr}
 8006766:	4d06      	ldr	r5, [pc, #24]	; (8006780 <_sbrk_r+0x1c>)
 8006768:	2300      	movs	r3, #0
 800676a:	4604      	mov	r4, r0
 800676c:	4608      	mov	r0, r1
 800676e:	602b      	str	r3, [r5, #0]
 8006770:	f7fc fb1c 	bl	8002dac <_sbrk>
 8006774:	1c43      	adds	r3, r0, #1
 8006776:	d102      	bne.n	800677e <_sbrk_r+0x1a>
 8006778:	682b      	ldr	r3, [r5, #0]
 800677a:	b103      	cbz	r3, 800677e <_sbrk_r+0x1a>
 800677c:	6023      	str	r3, [r4, #0]
 800677e:	bd38      	pop	{r3, r4, r5, pc}
 8006780:	20000d84 	.word	0x20000d84

08006784 <__swbuf_r>:
 8006784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006786:	460e      	mov	r6, r1
 8006788:	4614      	mov	r4, r2
 800678a:	4605      	mov	r5, r0
 800678c:	b118      	cbz	r0, 8006796 <__swbuf_r+0x12>
 800678e:	6983      	ldr	r3, [r0, #24]
 8006790:	b90b      	cbnz	r3, 8006796 <__swbuf_r+0x12>
 8006792:	f001 f851 	bl	8007838 <__sinit>
 8006796:	4b21      	ldr	r3, [pc, #132]	; (800681c <__swbuf_r+0x98>)
 8006798:	429c      	cmp	r4, r3
 800679a:	d12b      	bne.n	80067f4 <__swbuf_r+0x70>
 800679c:	686c      	ldr	r4, [r5, #4]
 800679e:	69a3      	ldr	r3, [r4, #24]
 80067a0:	60a3      	str	r3, [r4, #8]
 80067a2:	89a3      	ldrh	r3, [r4, #12]
 80067a4:	071a      	lsls	r2, r3, #28
 80067a6:	d52f      	bpl.n	8006808 <__swbuf_r+0x84>
 80067a8:	6923      	ldr	r3, [r4, #16]
 80067aa:	b36b      	cbz	r3, 8006808 <__swbuf_r+0x84>
 80067ac:	6923      	ldr	r3, [r4, #16]
 80067ae:	6820      	ldr	r0, [r4, #0]
 80067b0:	1ac0      	subs	r0, r0, r3
 80067b2:	6963      	ldr	r3, [r4, #20]
 80067b4:	b2f6      	uxtb	r6, r6
 80067b6:	4283      	cmp	r3, r0
 80067b8:	4637      	mov	r7, r6
 80067ba:	dc04      	bgt.n	80067c6 <__swbuf_r+0x42>
 80067bc:	4621      	mov	r1, r4
 80067be:	4628      	mov	r0, r5
 80067c0:	f000 ffa6 	bl	8007710 <_fflush_r>
 80067c4:	bb30      	cbnz	r0, 8006814 <__swbuf_r+0x90>
 80067c6:	68a3      	ldr	r3, [r4, #8]
 80067c8:	3b01      	subs	r3, #1
 80067ca:	60a3      	str	r3, [r4, #8]
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	6022      	str	r2, [r4, #0]
 80067d2:	701e      	strb	r6, [r3, #0]
 80067d4:	6963      	ldr	r3, [r4, #20]
 80067d6:	3001      	adds	r0, #1
 80067d8:	4283      	cmp	r3, r0
 80067da:	d004      	beq.n	80067e6 <__swbuf_r+0x62>
 80067dc:	89a3      	ldrh	r3, [r4, #12]
 80067de:	07db      	lsls	r3, r3, #31
 80067e0:	d506      	bpl.n	80067f0 <__swbuf_r+0x6c>
 80067e2:	2e0a      	cmp	r6, #10
 80067e4:	d104      	bne.n	80067f0 <__swbuf_r+0x6c>
 80067e6:	4621      	mov	r1, r4
 80067e8:	4628      	mov	r0, r5
 80067ea:	f000 ff91 	bl	8007710 <_fflush_r>
 80067ee:	b988      	cbnz	r0, 8006814 <__swbuf_r+0x90>
 80067f0:	4638      	mov	r0, r7
 80067f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067f4:	4b0a      	ldr	r3, [pc, #40]	; (8006820 <__swbuf_r+0x9c>)
 80067f6:	429c      	cmp	r4, r3
 80067f8:	d101      	bne.n	80067fe <__swbuf_r+0x7a>
 80067fa:	68ac      	ldr	r4, [r5, #8]
 80067fc:	e7cf      	b.n	800679e <__swbuf_r+0x1a>
 80067fe:	4b09      	ldr	r3, [pc, #36]	; (8006824 <__swbuf_r+0xa0>)
 8006800:	429c      	cmp	r4, r3
 8006802:	bf08      	it	eq
 8006804:	68ec      	ldreq	r4, [r5, #12]
 8006806:	e7ca      	b.n	800679e <__swbuf_r+0x1a>
 8006808:	4621      	mov	r1, r4
 800680a:	4628      	mov	r0, r5
 800680c:	f000 f80c 	bl	8006828 <__swsetup_r>
 8006810:	2800      	cmp	r0, #0
 8006812:	d0cb      	beq.n	80067ac <__swbuf_r+0x28>
 8006814:	f04f 37ff 	mov.w	r7, #4294967295
 8006818:	e7ea      	b.n	80067f0 <__swbuf_r+0x6c>
 800681a:	bf00      	nop
 800681c:	08008b88 	.word	0x08008b88
 8006820:	08008ba8 	.word	0x08008ba8
 8006824:	08008b68 	.word	0x08008b68

08006828 <__swsetup_r>:
 8006828:	4b32      	ldr	r3, [pc, #200]	; (80068f4 <__swsetup_r+0xcc>)
 800682a:	b570      	push	{r4, r5, r6, lr}
 800682c:	681d      	ldr	r5, [r3, #0]
 800682e:	4606      	mov	r6, r0
 8006830:	460c      	mov	r4, r1
 8006832:	b125      	cbz	r5, 800683e <__swsetup_r+0x16>
 8006834:	69ab      	ldr	r3, [r5, #24]
 8006836:	b913      	cbnz	r3, 800683e <__swsetup_r+0x16>
 8006838:	4628      	mov	r0, r5
 800683a:	f000 fffd 	bl	8007838 <__sinit>
 800683e:	4b2e      	ldr	r3, [pc, #184]	; (80068f8 <__swsetup_r+0xd0>)
 8006840:	429c      	cmp	r4, r3
 8006842:	d10f      	bne.n	8006864 <__swsetup_r+0x3c>
 8006844:	686c      	ldr	r4, [r5, #4]
 8006846:	89a3      	ldrh	r3, [r4, #12]
 8006848:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800684c:	0719      	lsls	r1, r3, #28
 800684e:	d42c      	bmi.n	80068aa <__swsetup_r+0x82>
 8006850:	06dd      	lsls	r5, r3, #27
 8006852:	d411      	bmi.n	8006878 <__swsetup_r+0x50>
 8006854:	2309      	movs	r3, #9
 8006856:	6033      	str	r3, [r6, #0]
 8006858:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800685c:	81a3      	strh	r3, [r4, #12]
 800685e:	f04f 30ff 	mov.w	r0, #4294967295
 8006862:	e03e      	b.n	80068e2 <__swsetup_r+0xba>
 8006864:	4b25      	ldr	r3, [pc, #148]	; (80068fc <__swsetup_r+0xd4>)
 8006866:	429c      	cmp	r4, r3
 8006868:	d101      	bne.n	800686e <__swsetup_r+0x46>
 800686a:	68ac      	ldr	r4, [r5, #8]
 800686c:	e7eb      	b.n	8006846 <__swsetup_r+0x1e>
 800686e:	4b24      	ldr	r3, [pc, #144]	; (8006900 <__swsetup_r+0xd8>)
 8006870:	429c      	cmp	r4, r3
 8006872:	bf08      	it	eq
 8006874:	68ec      	ldreq	r4, [r5, #12]
 8006876:	e7e6      	b.n	8006846 <__swsetup_r+0x1e>
 8006878:	0758      	lsls	r0, r3, #29
 800687a:	d512      	bpl.n	80068a2 <__swsetup_r+0x7a>
 800687c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800687e:	b141      	cbz	r1, 8006892 <__swsetup_r+0x6a>
 8006880:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006884:	4299      	cmp	r1, r3
 8006886:	d002      	beq.n	800688e <__swsetup_r+0x66>
 8006888:	4630      	mov	r0, r6
 800688a:	f7ff f839 	bl	8005900 <_free_r>
 800688e:	2300      	movs	r3, #0
 8006890:	6363      	str	r3, [r4, #52]	; 0x34
 8006892:	89a3      	ldrh	r3, [r4, #12]
 8006894:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006898:	81a3      	strh	r3, [r4, #12]
 800689a:	2300      	movs	r3, #0
 800689c:	6063      	str	r3, [r4, #4]
 800689e:	6923      	ldr	r3, [r4, #16]
 80068a0:	6023      	str	r3, [r4, #0]
 80068a2:	89a3      	ldrh	r3, [r4, #12]
 80068a4:	f043 0308 	orr.w	r3, r3, #8
 80068a8:	81a3      	strh	r3, [r4, #12]
 80068aa:	6923      	ldr	r3, [r4, #16]
 80068ac:	b94b      	cbnz	r3, 80068c2 <__swsetup_r+0x9a>
 80068ae:	89a3      	ldrh	r3, [r4, #12]
 80068b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068b8:	d003      	beq.n	80068c2 <__swsetup_r+0x9a>
 80068ba:	4621      	mov	r1, r4
 80068bc:	4630      	mov	r0, r6
 80068be:	f001 f885 	bl	80079cc <__smakebuf_r>
 80068c2:	89a0      	ldrh	r0, [r4, #12]
 80068c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068c8:	f010 0301 	ands.w	r3, r0, #1
 80068cc:	d00a      	beq.n	80068e4 <__swsetup_r+0xbc>
 80068ce:	2300      	movs	r3, #0
 80068d0:	60a3      	str	r3, [r4, #8]
 80068d2:	6963      	ldr	r3, [r4, #20]
 80068d4:	425b      	negs	r3, r3
 80068d6:	61a3      	str	r3, [r4, #24]
 80068d8:	6923      	ldr	r3, [r4, #16]
 80068da:	b943      	cbnz	r3, 80068ee <__swsetup_r+0xc6>
 80068dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80068e0:	d1ba      	bne.n	8006858 <__swsetup_r+0x30>
 80068e2:	bd70      	pop	{r4, r5, r6, pc}
 80068e4:	0781      	lsls	r1, r0, #30
 80068e6:	bf58      	it	pl
 80068e8:	6963      	ldrpl	r3, [r4, #20]
 80068ea:	60a3      	str	r3, [r4, #8]
 80068ec:	e7f4      	b.n	80068d8 <__swsetup_r+0xb0>
 80068ee:	2000      	movs	r0, #0
 80068f0:	e7f7      	b.n	80068e2 <__swsetup_r+0xba>
 80068f2:	bf00      	nop
 80068f4:	2000000c 	.word	0x2000000c
 80068f8:	08008b88 	.word	0x08008b88
 80068fc:	08008ba8 	.word	0x08008ba8
 8006900:	08008b68 	.word	0x08008b68

08006904 <abort>:
 8006904:	b508      	push	{r3, lr}
 8006906:	2006      	movs	r0, #6
 8006908:	f001 fc6e 	bl	80081e8 <raise>
 800690c:	2001      	movs	r0, #1
 800690e:	f7fc f9f1 	bl	8002cf4 <_exit>

08006912 <quorem>:
 8006912:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006916:	6903      	ldr	r3, [r0, #16]
 8006918:	690c      	ldr	r4, [r1, #16]
 800691a:	42a3      	cmp	r3, r4
 800691c:	4607      	mov	r7, r0
 800691e:	f2c0 8081 	blt.w	8006a24 <quorem+0x112>
 8006922:	3c01      	subs	r4, #1
 8006924:	f101 0814 	add.w	r8, r1, #20
 8006928:	f100 0514 	add.w	r5, r0, #20
 800692c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006930:	9301      	str	r3, [sp, #4]
 8006932:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006936:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800693a:	3301      	adds	r3, #1
 800693c:	429a      	cmp	r2, r3
 800693e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006942:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006946:	fbb2 f6f3 	udiv	r6, r2, r3
 800694a:	d331      	bcc.n	80069b0 <quorem+0x9e>
 800694c:	f04f 0e00 	mov.w	lr, #0
 8006950:	4640      	mov	r0, r8
 8006952:	46ac      	mov	ip, r5
 8006954:	46f2      	mov	sl, lr
 8006956:	f850 2b04 	ldr.w	r2, [r0], #4
 800695a:	b293      	uxth	r3, r2
 800695c:	fb06 e303 	mla	r3, r6, r3, lr
 8006960:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006964:	b29b      	uxth	r3, r3
 8006966:	ebaa 0303 	sub.w	r3, sl, r3
 800696a:	f8dc a000 	ldr.w	sl, [ip]
 800696e:	0c12      	lsrs	r2, r2, #16
 8006970:	fa13 f38a 	uxtah	r3, r3, sl
 8006974:	fb06 e202 	mla	r2, r6, r2, lr
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	9b00      	ldr	r3, [sp, #0]
 800697c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006980:	b292      	uxth	r2, r2
 8006982:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006986:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800698a:	f8bd 3000 	ldrh.w	r3, [sp]
 800698e:	4581      	cmp	r9, r0
 8006990:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006994:	f84c 3b04 	str.w	r3, [ip], #4
 8006998:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800699c:	d2db      	bcs.n	8006956 <quorem+0x44>
 800699e:	f855 300b 	ldr.w	r3, [r5, fp]
 80069a2:	b92b      	cbnz	r3, 80069b0 <quorem+0x9e>
 80069a4:	9b01      	ldr	r3, [sp, #4]
 80069a6:	3b04      	subs	r3, #4
 80069a8:	429d      	cmp	r5, r3
 80069aa:	461a      	mov	r2, r3
 80069ac:	d32e      	bcc.n	8006a0c <quorem+0xfa>
 80069ae:	613c      	str	r4, [r7, #16]
 80069b0:	4638      	mov	r0, r7
 80069b2:	f001 fad9 	bl	8007f68 <__mcmp>
 80069b6:	2800      	cmp	r0, #0
 80069b8:	db24      	blt.n	8006a04 <quorem+0xf2>
 80069ba:	3601      	adds	r6, #1
 80069bc:	4628      	mov	r0, r5
 80069be:	f04f 0c00 	mov.w	ip, #0
 80069c2:	f858 2b04 	ldr.w	r2, [r8], #4
 80069c6:	f8d0 e000 	ldr.w	lr, [r0]
 80069ca:	b293      	uxth	r3, r2
 80069cc:	ebac 0303 	sub.w	r3, ip, r3
 80069d0:	0c12      	lsrs	r2, r2, #16
 80069d2:	fa13 f38e 	uxtah	r3, r3, lr
 80069d6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80069da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069de:	b29b      	uxth	r3, r3
 80069e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069e4:	45c1      	cmp	r9, r8
 80069e6:	f840 3b04 	str.w	r3, [r0], #4
 80069ea:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80069ee:	d2e8      	bcs.n	80069c2 <quorem+0xb0>
 80069f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069f8:	b922      	cbnz	r2, 8006a04 <quorem+0xf2>
 80069fa:	3b04      	subs	r3, #4
 80069fc:	429d      	cmp	r5, r3
 80069fe:	461a      	mov	r2, r3
 8006a00:	d30a      	bcc.n	8006a18 <quorem+0x106>
 8006a02:	613c      	str	r4, [r7, #16]
 8006a04:	4630      	mov	r0, r6
 8006a06:	b003      	add	sp, #12
 8006a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a0c:	6812      	ldr	r2, [r2, #0]
 8006a0e:	3b04      	subs	r3, #4
 8006a10:	2a00      	cmp	r2, #0
 8006a12:	d1cc      	bne.n	80069ae <quorem+0x9c>
 8006a14:	3c01      	subs	r4, #1
 8006a16:	e7c7      	b.n	80069a8 <quorem+0x96>
 8006a18:	6812      	ldr	r2, [r2, #0]
 8006a1a:	3b04      	subs	r3, #4
 8006a1c:	2a00      	cmp	r2, #0
 8006a1e:	d1f0      	bne.n	8006a02 <quorem+0xf0>
 8006a20:	3c01      	subs	r4, #1
 8006a22:	e7eb      	b.n	80069fc <quorem+0xea>
 8006a24:	2000      	movs	r0, #0
 8006a26:	e7ee      	b.n	8006a06 <quorem+0xf4>

08006a28 <_dtoa_r>:
 8006a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2c:	ed2d 8b04 	vpush	{d8-d9}
 8006a30:	ec57 6b10 	vmov	r6, r7, d0
 8006a34:	b093      	sub	sp, #76	; 0x4c
 8006a36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006a38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006a3c:	9106      	str	r1, [sp, #24]
 8006a3e:	ee10 aa10 	vmov	sl, s0
 8006a42:	4604      	mov	r4, r0
 8006a44:	9209      	str	r2, [sp, #36]	; 0x24
 8006a46:	930c      	str	r3, [sp, #48]	; 0x30
 8006a48:	46bb      	mov	fp, r7
 8006a4a:	b975      	cbnz	r5, 8006a6a <_dtoa_r+0x42>
 8006a4c:	2010      	movs	r0, #16
 8006a4e:	f7fe ff39 	bl	80058c4 <malloc>
 8006a52:	4602      	mov	r2, r0
 8006a54:	6260      	str	r0, [r4, #36]	; 0x24
 8006a56:	b920      	cbnz	r0, 8006a62 <_dtoa_r+0x3a>
 8006a58:	4ba7      	ldr	r3, [pc, #668]	; (8006cf8 <_dtoa_r+0x2d0>)
 8006a5a:	21ea      	movs	r1, #234	; 0xea
 8006a5c:	48a7      	ldr	r0, [pc, #668]	; (8006cfc <_dtoa_r+0x2d4>)
 8006a5e:	f7fe fed7 	bl	8005810 <__assert_func>
 8006a62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a66:	6005      	str	r5, [r0, #0]
 8006a68:	60c5      	str	r5, [r0, #12]
 8006a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a6c:	6819      	ldr	r1, [r3, #0]
 8006a6e:	b151      	cbz	r1, 8006a86 <_dtoa_r+0x5e>
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	604a      	str	r2, [r1, #4]
 8006a74:	2301      	movs	r3, #1
 8006a76:	4093      	lsls	r3, r2
 8006a78:	608b      	str	r3, [r1, #8]
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	f001 f832 	bl	8007ae4 <_Bfree>
 8006a80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a82:	2200      	movs	r2, #0
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	1e3b      	subs	r3, r7, #0
 8006a88:	bfaa      	itet	ge
 8006a8a:	2300      	movge	r3, #0
 8006a8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006a90:	f8c8 3000 	strge.w	r3, [r8]
 8006a94:	4b9a      	ldr	r3, [pc, #616]	; (8006d00 <_dtoa_r+0x2d8>)
 8006a96:	bfbc      	itt	lt
 8006a98:	2201      	movlt	r2, #1
 8006a9a:	f8c8 2000 	strlt.w	r2, [r8]
 8006a9e:	ea33 030b 	bics.w	r3, r3, fp
 8006aa2:	d11b      	bne.n	8006adc <_dtoa_r+0xb4>
 8006aa4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006aa6:	f242 730f 	movw	r3, #9999	; 0x270f
 8006aaa:	6013      	str	r3, [r2, #0]
 8006aac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ab0:	4333      	orrs	r3, r6
 8006ab2:	f000 8592 	beq.w	80075da <_dtoa_r+0xbb2>
 8006ab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ab8:	b963      	cbnz	r3, 8006ad4 <_dtoa_r+0xac>
 8006aba:	4b92      	ldr	r3, [pc, #584]	; (8006d04 <_dtoa_r+0x2dc>)
 8006abc:	e022      	b.n	8006b04 <_dtoa_r+0xdc>
 8006abe:	4b92      	ldr	r3, [pc, #584]	; (8006d08 <_dtoa_r+0x2e0>)
 8006ac0:	9301      	str	r3, [sp, #4]
 8006ac2:	3308      	adds	r3, #8
 8006ac4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	9801      	ldr	r0, [sp, #4]
 8006aca:	b013      	add	sp, #76	; 0x4c
 8006acc:	ecbd 8b04 	vpop	{d8-d9}
 8006ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad4:	4b8b      	ldr	r3, [pc, #556]	; (8006d04 <_dtoa_r+0x2dc>)
 8006ad6:	9301      	str	r3, [sp, #4]
 8006ad8:	3303      	adds	r3, #3
 8006ada:	e7f3      	b.n	8006ac4 <_dtoa_r+0x9c>
 8006adc:	2200      	movs	r2, #0
 8006ade:	2300      	movs	r3, #0
 8006ae0:	4650      	mov	r0, sl
 8006ae2:	4659      	mov	r1, fp
 8006ae4:	f7f9 fff8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ae8:	ec4b ab19 	vmov	d9, sl, fp
 8006aec:	4680      	mov	r8, r0
 8006aee:	b158      	cbz	r0, 8006b08 <_dtoa_r+0xe0>
 8006af0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006af2:	2301      	movs	r3, #1
 8006af4:	6013      	str	r3, [r2, #0]
 8006af6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 856b 	beq.w	80075d4 <_dtoa_r+0xbac>
 8006afe:	4883      	ldr	r0, [pc, #524]	; (8006d0c <_dtoa_r+0x2e4>)
 8006b00:	6018      	str	r0, [r3, #0]
 8006b02:	1e43      	subs	r3, r0, #1
 8006b04:	9301      	str	r3, [sp, #4]
 8006b06:	e7df      	b.n	8006ac8 <_dtoa_r+0xa0>
 8006b08:	ec4b ab10 	vmov	d0, sl, fp
 8006b0c:	aa10      	add	r2, sp, #64	; 0x40
 8006b0e:	a911      	add	r1, sp, #68	; 0x44
 8006b10:	4620      	mov	r0, r4
 8006b12:	f001 facf 	bl	80080b4 <__d2b>
 8006b16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006b1a:	ee08 0a10 	vmov	s16, r0
 8006b1e:	2d00      	cmp	r5, #0
 8006b20:	f000 8084 	beq.w	8006c2c <_dtoa_r+0x204>
 8006b24:	ee19 3a90 	vmov	r3, s19
 8006b28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006b30:	4656      	mov	r6, sl
 8006b32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006b36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006b3e:	4b74      	ldr	r3, [pc, #464]	; (8006d10 <_dtoa_r+0x2e8>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	4630      	mov	r0, r6
 8006b44:	4639      	mov	r1, r7
 8006b46:	f7f9 fba7 	bl	8000298 <__aeabi_dsub>
 8006b4a:	a365      	add	r3, pc, #404	; (adr r3, 8006ce0 <_dtoa_r+0x2b8>)
 8006b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b50:	f7f9 fd5a 	bl	8000608 <__aeabi_dmul>
 8006b54:	a364      	add	r3, pc, #400	; (adr r3, 8006ce8 <_dtoa_r+0x2c0>)
 8006b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5a:	f7f9 fb9f 	bl	800029c <__adddf3>
 8006b5e:	4606      	mov	r6, r0
 8006b60:	4628      	mov	r0, r5
 8006b62:	460f      	mov	r7, r1
 8006b64:	f7f9 fce6 	bl	8000534 <__aeabi_i2d>
 8006b68:	a361      	add	r3, pc, #388	; (adr r3, 8006cf0 <_dtoa_r+0x2c8>)
 8006b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6e:	f7f9 fd4b 	bl	8000608 <__aeabi_dmul>
 8006b72:	4602      	mov	r2, r0
 8006b74:	460b      	mov	r3, r1
 8006b76:	4630      	mov	r0, r6
 8006b78:	4639      	mov	r1, r7
 8006b7a:	f7f9 fb8f 	bl	800029c <__adddf3>
 8006b7e:	4606      	mov	r6, r0
 8006b80:	460f      	mov	r7, r1
 8006b82:	f7f9 fff1 	bl	8000b68 <__aeabi_d2iz>
 8006b86:	2200      	movs	r2, #0
 8006b88:	9000      	str	r0, [sp, #0]
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	4639      	mov	r1, r7
 8006b90:	f7f9 ffac 	bl	8000aec <__aeabi_dcmplt>
 8006b94:	b150      	cbz	r0, 8006bac <_dtoa_r+0x184>
 8006b96:	9800      	ldr	r0, [sp, #0]
 8006b98:	f7f9 fccc 	bl	8000534 <__aeabi_i2d>
 8006b9c:	4632      	mov	r2, r6
 8006b9e:	463b      	mov	r3, r7
 8006ba0:	f7f9 ff9a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ba4:	b910      	cbnz	r0, 8006bac <_dtoa_r+0x184>
 8006ba6:	9b00      	ldr	r3, [sp, #0]
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	9b00      	ldr	r3, [sp, #0]
 8006bae:	2b16      	cmp	r3, #22
 8006bb0:	d85a      	bhi.n	8006c68 <_dtoa_r+0x240>
 8006bb2:	9a00      	ldr	r2, [sp, #0]
 8006bb4:	4b57      	ldr	r3, [pc, #348]	; (8006d14 <_dtoa_r+0x2ec>)
 8006bb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbe:	ec51 0b19 	vmov	r0, r1, d9
 8006bc2:	f7f9 ff93 	bl	8000aec <__aeabi_dcmplt>
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	d050      	beq.n	8006c6c <_dtoa_r+0x244>
 8006bca:	9b00      	ldr	r3, [sp, #0]
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bd6:	1b5d      	subs	r5, r3, r5
 8006bd8:	1e6b      	subs	r3, r5, #1
 8006bda:	9305      	str	r3, [sp, #20]
 8006bdc:	bf45      	ittet	mi
 8006bde:	f1c5 0301 	rsbmi	r3, r5, #1
 8006be2:	9304      	strmi	r3, [sp, #16]
 8006be4:	2300      	movpl	r3, #0
 8006be6:	2300      	movmi	r3, #0
 8006be8:	bf4c      	ite	mi
 8006bea:	9305      	strmi	r3, [sp, #20]
 8006bec:	9304      	strpl	r3, [sp, #16]
 8006bee:	9b00      	ldr	r3, [sp, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	db3d      	blt.n	8006c70 <_dtoa_r+0x248>
 8006bf4:	9b05      	ldr	r3, [sp, #20]
 8006bf6:	9a00      	ldr	r2, [sp, #0]
 8006bf8:	920a      	str	r2, [sp, #40]	; 0x28
 8006bfa:	4413      	add	r3, r2
 8006bfc:	9305      	str	r3, [sp, #20]
 8006bfe:	2300      	movs	r3, #0
 8006c00:	9307      	str	r3, [sp, #28]
 8006c02:	9b06      	ldr	r3, [sp, #24]
 8006c04:	2b09      	cmp	r3, #9
 8006c06:	f200 8089 	bhi.w	8006d1c <_dtoa_r+0x2f4>
 8006c0a:	2b05      	cmp	r3, #5
 8006c0c:	bfc4      	itt	gt
 8006c0e:	3b04      	subgt	r3, #4
 8006c10:	9306      	strgt	r3, [sp, #24]
 8006c12:	9b06      	ldr	r3, [sp, #24]
 8006c14:	f1a3 0302 	sub.w	r3, r3, #2
 8006c18:	bfcc      	ite	gt
 8006c1a:	2500      	movgt	r5, #0
 8006c1c:	2501      	movle	r5, #1
 8006c1e:	2b03      	cmp	r3, #3
 8006c20:	f200 8087 	bhi.w	8006d32 <_dtoa_r+0x30a>
 8006c24:	e8df f003 	tbb	[pc, r3]
 8006c28:	59383a2d 	.word	0x59383a2d
 8006c2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006c30:	441d      	add	r5, r3
 8006c32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006c36:	2b20      	cmp	r3, #32
 8006c38:	bfc1      	itttt	gt
 8006c3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006c3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006c42:	fa0b f303 	lslgt.w	r3, fp, r3
 8006c46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006c4a:	bfda      	itte	le
 8006c4c:	f1c3 0320 	rsble	r3, r3, #32
 8006c50:	fa06 f003 	lslle.w	r0, r6, r3
 8006c54:	4318      	orrgt	r0, r3
 8006c56:	f7f9 fc5d 	bl	8000514 <__aeabi_ui2d>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	4606      	mov	r6, r0
 8006c5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006c62:	3d01      	subs	r5, #1
 8006c64:	930e      	str	r3, [sp, #56]	; 0x38
 8006c66:	e76a      	b.n	8006b3e <_dtoa_r+0x116>
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e7b2      	b.n	8006bd2 <_dtoa_r+0x1aa>
 8006c6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8006c6e:	e7b1      	b.n	8006bd4 <_dtoa_r+0x1ac>
 8006c70:	9b04      	ldr	r3, [sp, #16]
 8006c72:	9a00      	ldr	r2, [sp, #0]
 8006c74:	1a9b      	subs	r3, r3, r2
 8006c76:	9304      	str	r3, [sp, #16]
 8006c78:	4253      	negs	r3, r2
 8006c7a:	9307      	str	r3, [sp, #28]
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	930a      	str	r3, [sp, #40]	; 0x28
 8006c80:	e7bf      	b.n	8006c02 <_dtoa_r+0x1da>
 8006c82:	2300      	movs	r3, #0
 8006c84:	9308      	str	r3, [sp, #32]
 8006c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	dc55      	bgt.n	8006d38 <_dtoa_r+0x310>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006c92:	461a      	mov	r2, r3
 8006c94:	9209      	str	r2, [sp, #36]	; 0x24
 8006c96:	e00c      	b.n	8006cb2 <_dtoa_r+0x28a>
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e7f3      	b.n	8006c84 <_dtoa_r+0x25c>
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ca0:	9308      	str	r3, [sp, #32]
 8006ca2:	9b00      	ldr	r3, [sp, #0]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	9302      	str	r3, [sp, #8]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	9303      	str	r3, [sp, #12]
 8006cae:	bfb8      	it	lt
 8006cb0:	2301      	movlt	r3, #1
 8006cb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	6042      	str	r2, [r0, #4]
 8006cb8:	2204      	movs	r2, #4
 8006cba:	f102 0614 	add.w	r6, r2, #20
 8006cbe:	429e      	cmp	r6, r3
 8006cc0:	6841      	ldr	r1, [r0, #4]
 8006cc2:	d93d      	bls.n	8006d40 <_dtoa_r+0x318>
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f000 fecd 	bl	8007a64 <_Balloc>
 8006cca:	9001      	str	r0, [sp, #4]
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	d13b      	bne.n	8006d48 <_dtoa_r+0x320>
 8006cd0:	4b11      	ldr	r3, [pc, #68]	; (8006d18 <_dtoa_r+0x2f0>)
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006cd8:	e6c0      	b.n	8006a5c <_dtoa_r+0x34>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e7df      	b.n	8006c9e <_dtoa_r+0x276>
 8006cde:	bf00      	nop
 8006ce0:	636f4361 	.word	0x636f4361
 8006ce4:	3fd287a7 	.word	0x3fd287a7
 8006ce8:	8b60c8b3 	.word	0x8b60c8b3
 8006cec:	3fc68a28 	.word	0x3fc68a28
 8006cf0:	509f79fb 	.word	0x509f79fb
 8006cf4:	3fd34413 	.word	0x3fd34413
 8006cf8:	08008ae2 	.word	0x08008ae2
 8006cfc:	08008af9 	.word	0x08008af9
 8006d00:	7ff00000 	.word	0x7ff00000
 8006d04:	08008ade 	.word	0x08008ade
 8006d08:	08008ad5 	.word	0x08008ad5
 8006d0c:	08008ab2 	.word	0x08008ab2
 8006d10:	3ff80000 	.word	0x3ff80000
 8006d14:	08008c50 	.word	0x08008c50
 8006d18:	08008b54 	.word	0x08008b54
 8006d1c:	2501      	movs	r5, #1
 8006d1e:	2300      	movs	r3, #0
 8006d20:	9306      	str	r3, [sp, #24]
 8006d22:	9508      	str	r5, [sp, #32]
 8006d24:	f04f 33ff 	mov.w	r3, #4294967295
 8006d28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	2312      	movs	r3, #18
 8006d30:	e7b0      	b.n	8006c94 <_dtoa_r+0x26c>
 8006d32:	2301      	movs	r3, #1
 8006d34:	9308      	str	r3, [sp, #32]
 8006d36:	e7f5      	b.n	8006d24 <_dtoa_r+0x2fc>
 8006d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d3e:	e7b8      	b.n	8006cb2 <_dtoa_r+0x28a>
 8006d40:	3101      	adds	r1, #1
 8006d42:	6041      	str	r1, [r0, #4]
 8006d44:	0052      	lsls	r2, r2, #1
 8006d46:	e7b8      	b.n	8006cba <_dtoa_r+0x292>
 8006d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d4a:	9a01      	ldr	r2, [sp, #4]
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	9b03      	ldr	r3, [sp, #12]
 8006d50:	2b0e      	cmp	r3, #14
 8006d52:	f200 809d 	bhi.w	8006e90 <_dtoa_r+0x468>
 8006d56:	2d00      	cmp	r5, #0
 8006d58:	f000 809a 	beq.w	8006e90 <_dtoa_r+0x468>
 8006d5c:	9b00      	ldr	r3, [sp, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	dd32      	ble.n	8006dc8 <_dtoa_r+0x3a0>
 8006d62:	4ab7      	ldr	r2, [pc, #732]	; (8007040 <_dtoa_r+0x618>)
 8006d64:	f003 030f 	and.w	r3, r3, #15
 8006d68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006d6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d70:	9b00      	ldr	r3, [sp, #0]
 8006d72:	05d8      	lsls	r0, r3, #23
 8006d74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006d78:	d516      	bpl.n	8006da8 <_dtoa_r+0x380>
 8006d7a:	4bb2      	ldr	r3, [pc, #712]	; (8007044 <_dtoa_r+0x61c>)
 8006d7c:	ec51 0b19 	vmov	r0, r1, d9
 8006d80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d84:	f7f9 fd6a 	bl	800085c <__aeabi_ddiv>
 8006d88:	f007 070f 	and.w	r7, r7, #15
 8006d8c:	4682      	mov	sl, r0
 8006d8e:	468b      	mov	fp, r1
 8006d90:	2503      	movs	r5, #3
 8006d92:	4eac      	ldr	r6, [pc, #688]	; (8007044 <_dtoa_r+0x61c>)
 8006d94:	b957      	cbnz	r7, 8006dac <_dtoa_r+0x384>
 8006d96:	4642      	mov	r2, r8
 8006d98:	464b      	mov	r3, r9
 8006d9a:	4650      	mov	r0, sl
 8006d9c:	4659      	mov	r1, fp
 8006d9e:	f7f9 fd5d 	bl	800085c <__aeabi_ddiv>
 8006da2:	4682      	mov	sl, r0
 8006da4:	468b      	mov	fp, r1
 8006da6:	e028      	b.n	8006dfa <_dtoa_r+0x3d2>
 8006da8:	2502      	movs	r5, #2
 8006daa:	e7f2      	b.n	8006d92 <_dtoa_r+0x36a>
 8006dac:	07f9      	lsls	r1, r7, #31
 8006dae:	d508      	bpl.n	8006dc2 <_dtoa_r+0x39a>
 8006db0:	4640      	mov	r0, r8
 8006db2:	4649      	mov	r1, r9
 8006db4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006db8:	f7f9 fc26 	bl	8000608 <__aeabi_dmul>
 8006dbc:	3501      	adds	r5, #1
 8006dbe:	4680      	mov	r8, r0
 8006dc0:	4689      	mov	r9, r1
 8006dc2:	107f      	asrs	r7, r7, #1
 8006dc4:	3608      	adds	r6, #8
 8006dc6:	e7e5      	b.n	8006d94 <_dtoa_r+0x36c>
 8006dc8:	f000 809b 	beq.w	8006f02 <_dtoa_r+0x4da>
 8006dcc:	9b00      	ldr	r3, [sp, #0]
 8006dce:	4f9d      	ldr	r7, [pc, #628]	; (8007044 <_dtoa_r+0x61c>)
 8006dd0:	425e      	negs	r6, r3
 8006dd2:	4b9b      	ldr	r3, [pc, #620]	; (8007040 <_dtoa_r+0x618>)
 8006dd4:	f006 020f 	and.w	r2, r6, #15
 8006dd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de0:	ec51 0b19 	vmov	r0, r1, d9
 8006de4:	f7f9 fc10 	bl	8000608 <__aeabi_dmul>
 8006de8:	1136      	asrs	r6, r6, #4
 8006dea:	4682      	mov	sl, r0
 8006dec:	468b      	mov	fp, r1
 8006dee:	2300      	movs	r3, #0
 8006df0:	2502      	movs	r5, #2
 8006df2:	2e00      	cmp	r6, #0
 8006df4:	d17a      	bne.n	8006eec <_dtoa_r+0x4c4>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1d3      	bne.n	8006da2 <_dtoa_r+0x37a>
 8006dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 8082 	beq.w	8006f06 <_dtoa_r+0x4de>
 8006e02:	4b91      	ldr	r3, [pc, #580]	; (8007048 <_dtoa_r+0x620>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	4650      	mov	r0, sl
 8006e08:	4659      	mov	r1, fp
 8006e0a:	f7f9 fe6f 	bl	8000aec <__aeabi_dcmplt>
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	d079      	beq.n	8006f06 <_dtoa_r+0x4de>
 8006e12:	9b03      	ldr	r3, [sp, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d076      	beq.n	8006f06 <_dtoa_r+0x4de>
 8006e18:	9b02      	ldr	r3, [sp, #8]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	dd36      	ble.n	8006e8c <_dtoa_r+0x464>
 8006e1e:	9b00      	ldr	r3, [sp, #0]
 8006e20:	4650      	mov	r0, sl
 8006e22:	4659      	mov	r1, fp
 8006e24:	1e5f      	subs	r7, r3, #1
 8006e26:	2200      	movs	r2, #0
 8006e28:	4b88      	ldr	r3, [pc, #544]	; (800704c <_dtoa_r+0x624>)
 8006e2a:	f7f9 fbed 	bl	8000608 <__aeabi_dmul>
 8006e2e:	9e02      	ldr	r6, [sp, #8]
 8006e30:	4682      	mov	sl, r0
 8006e32:	468b      	mov	fp, r1
 8006e34:	3501      	adds	r5, #1
 8006e36:	4628      	mov	r0, r5
 8006e38:	f7f9 fb7c 	bl	8000534 <__aeabi_i2d>
 8006e3c:	4652      	mov	r2, sl
 8006e3e:	465b      	mov	r3, fp
 8006e40:	f7f9 fbe2 	bl	8000608 <__aeabi_dmul>
 8006e44:	4b82      	ldr	r3, [pc, #520]	; (8007050 <_dtoa_r+0x628>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	f7f9 fa28 	bl	800029c <__adddf3>
 8006e4c:	46d0      	mov	r8, sl
 8006e4e:	46d9      	mov	r9, fp
 8006e50:	4682      	mov	sl, r0
 8006e52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006e56:	2e00      	cmp	r6, #0
 8006e58:	d158      	bne.n	8006f0c <_dtoa_r+0x4e4>
 8006e5a:	4b7e      	ldr	r3, [pc, #504]	; (8007054 <_dtoa_r+0x62c>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	4640      	mov	r0, r8
 8006e60:	4649      	mov	r1, r9
 8006e62:	f7f9 fa19 	bl	8000298 <__aeabi_dsub>
 8006e66:	4652      	mov	r2, sl
 8006e68:	465b      	mov	r3, fp
 8006e6a:	4680      	mov	r8, r0
 8006e6c:	4689      	mov	r9, r1
 8006e6e:	f7f9 fe5b 	bl	8000b28 <__aeabi_dcmpgt>
 8006e72:	2800      	cmp	r0, #0
 8006e74:	f040 8295 	bne.w	80073a2 <_dtoa_r+0x97a>
 8006e78:	4652      	mov	r2, sl
 8006e7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006e7e:	4640      	mov	r0, r8
 8006e80:	4649      	mov	r1, r9
 8006e82:	f7f9 fe33 	bl	8000aec <__aeabi_dcmplt>
 8006e86:	2800      	cmp	r0, #0
 8006e88:	f040 8289 	bne.w	800739e <_dtoa_r+0x976>
 8006e8c:	ec5b ab19 	vmov	sl, fp, d9
 8006e90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f2c0 8148 	blt.w	8007128 <_dtoa_r+0x700>
 8006e98:	9a00      	ldr	r2, [sp, #0]
 8006e9a:	2a0e      	cmp	r2, #14
 8006e9c:	f300 8144 	bgt.w	8007128 <_dtoa_r+0x700>
 8006ea0:	4b67      	ldr	r3, [pc, #412]	; (8007040 <_dtoa_r+0x618>)
 8006ea2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ea6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f280 80d5 	bge.w	800705c <_dtoa_r+0x634>
 8006eb2:	9b03      	ldr	r3, [sp, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f300 80d1 	bgt.w	800705c <_dtoa_r+0x634>
 8006eba:	f040 826f 	bne.w	800739c <_dtoa_r+0x974>
 8006ebe:	4b65      	ldr	r3, [pc, #404]	; (8007054 <_dtoa_r+0x62c>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	4640      	mov	r0, r8
 8006ec4:	4649      	mov	r1, r9
 8006ec6:	f7f9 fb9f 	bl	8000608 <__aeabi_dmul>
 8006eca:	4652      	mov	r2, sl
 8006ecc:	465b      	mov	r3, fp
 8006ece:	f7f9 fe21 	bl	8000b14 <__aeabi_dcmpge>
 8006ed2:	9e03      	ldr	r6, [sp, #12]
 8006ed4:	4637      	mov	r7, r6
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	f040 8245 	bne.w	8007366 <_dtoa_r+0x93e>
 8006edc:	9d01      	ldr	r5, [sp, #4]
 8006ede:	2331      	movs	r3, #49	; 0x31
 8006ee0:	f805 3b01 	strb.w	r3, [r5], #1
 8006ee4:	9b00      	ldr	r3, [sp, #0]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	e240      	b.n	800736e <_dtoa_r+0x946>
 8006eec:	07f2      	lsls	r2, r6, #31
 8006eee:	d505      	bpl.n	8006efc <_dtoa_r+0x4d4>
 8006ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ef4:	f7f9 fb88 	bl	8000608 <__aeabi_dmul>
 8006ef8:	3501      	adds	r5, #1
 8006efa:	2301      	movs	r3, #1
 8006efc:	1076      	asrs	r6, r6, #1
 8006efe:	3708      	adds	r7, #8
 8006f00:	e777      	b.n	8006df2 <_dtoa_r+0x3ca>
 8006f02:	2502      	movs	r5, #2
 8006f04:	e779      	b.n	8006dfa <_dtoa_r+0x3d2>
 8006f06:	9f00      	ldr	r7, [sp, #0]
 8006f08:	9e03      	ldr	r6, [sp, #12]
 8006f0a:	e794      	b.n	8006e36 <_dtoa_r+0x40e>
 8006f0c:	9901      	ldr	r1, [sp, #4]
 8006f0e:	4b4c      	ldr	r3, [pc, #304]	; (8007040 <_dtoa_r+0x618>)
 8006f10:	4431      	add	r1, r6
 8006f12:	910d      	str	r1, [sp, #52]	; 0x34
 8006f14:	9908      	ldr	r1, [sp, #32]
 8006f16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006f1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f1e:	2900      	cmp	r1, #0
 8006f20:	d043      	beq.n	8006faa <_dtoa_r+0x582>
 8006f22:	494d      	ldr	r1, [pc, #308]	; (8007058 <_dtoa_r+0x630>)
 8006f24:	2000      	movs	r0, #0
 8006f26:	f7f9 fc99 	bl	800085c <__aeabi_ddiv>
 8006f2a:	4652      	mov	r2, sl
 8006f2c:	465b      	mov	r3, fp
 8006f2e:	f7f9 f9b3 	bl	8000298 <__aeabi_dsub>
 8006f32:	9d01      	ldr	r5, [sp, #4]
 8006f34:	4682      	mov	sl, r0
 8006f36:	468b      	mov	fp, r1
 8006f38:	4649      	mov	r1, r9
 8006f3a:	4640      	mov	r0, r8
 8006f3c:	f7f9 fe14 	bl	8000b68 <__aeabi_d2iz>
 8006f40:	4606      	mov	r6, r0
 8006f42:	f7f9 faf7 	bl	8000534 <__aeabi_i2d>
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	4640      	mov	r0, r8
 8006f4c:	4649      	mov	r1, r9
 8006f4e:	f7f9 f9a3 	bl	8000298 <__aeabi_dsub>
 8006f52:	3630      	adds	r6, #48	; 0x30
 8006f54:	f805 6b01 	strb.w	r6, [r5], #1
 8006f58:	4652      	mov	r2, sl
 8006f5a:	465b      	mov	r3, fp
 8006f5c:	4680      	mov	r8, r0
 8006f5e:	4689      	mov	r9, r1
 8006f60:	f7f9 fdc4 	bl	8000aec <__aeabi_dcmplt>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	d163      	bne.n	8007030 <_dtoa_r+0x608>
 8006f68:	4642      	mov	r2, r8
 8006f6a:	464b      	mov	r3, r9
 8006f6c:	4936      	ldr	r1, [pc, #216]	; (8007048 <_dtoa_r+0x620>)
 8006f6e:	2000      	movs	r0, #0
 8006f70:	f7f9 f992 	bl	8000298 <__aeabi_dsub>
 8006f74:	4652      	mov	r2, sl
 8006f76:	465b      	mov	r3, fp
 8006f78:	f7f9 fdb8 	bl	8000aec <__aeabi_dcmplt>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	f040 80b5 	bne.w	80070ec <_dtoa_r+0x6c4>
 8006f82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f84:	429d      	cmp	r5, r3
 8006f86:	d081      	beq.n	8006e8c <_dtoa_r+0x464>
 8006f88:	4b30      	ldr	r3, [pc, #192]	; (800704c <_dtoa_r+0x624>)
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	4650      	mov	r0, sl
 8006f8e:	4659      	mov	r1, fp
 8006f90:	f7f9 fb3a 	bl	8000608 <__aeabi_dmul>
 8006f94:	4b2d      	ldr	r3, [pc, #180]	; (800704c <_dtoa_r+0x624>)
 8006f96:	4682      	mov	sl, r0
 8006f98:	468b      	mov	fp, r1
 8006f9a:	4640      	mov	r0, r8
 8006f9c:	4649      	mov	r1, r9
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f7f9 fb32 	bl	8000608 <__aeabi_dmul>
 8006fa4:	4680      	mov	r8, r0
 8006fa6:	4689      	mov	r9, r1
 8006fa8:	e7c6      	b.n	8006f38 <_dtoa_r+0x510>
 8006faa:	4650      	mov	r0, sl
 8006fac:	4659      	mov	r1, fp
 8006fae:	f7f9 fb2b 	bl	8000608 <__aeabi_dmul>
 8006fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fb4:	9d01      	ldr	r5, [sp, #4]
 8006fb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fb8:	4682      	mov	sl, r0
 8006fba:	468b      	mov	fp, r1
 8006fbc:	4649      	mov	r1, r9
 8006fbe:	4640      	mov	r0, r8
 8006fc0:	f7f9 fdd2 	bl	8000b68 <__aeabi_d2iz>
 8006fc4:	4606      	mov	r6, r0
 8006fc6:	f7f9 fab5 	bl	8000534 <__aeabi_i2d>
 8006fca:	3630      	adds	r6, #48	; 0x30
 8006fcc:	4602      	mov	r2, r0
 8006fce:	460b      	mov	r3, r1
 8006fd0:	4640      	mov	r0, r8
 8006fd2:	4649      	mov	r1, r9
 8006fd4:	f7f9 f960 	bl	8000298 <__aeabi_dsub>
 8006fd8:	f805 6b01 	strb.w	r6, [r5], #1
 8006fdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fde:	429d      	cmp	r5, r3
 8006fe0:	4680      	mov	r8, r0
 8006fe2:	4689      	mov	r9, r1
 8006fe4:	f04f 0200 	mov.w	r2, #0
 8006fe8:	d124      	bne.n	8007034 <_dtoa_r+0x60c>
 8006fea:	4b1b      	ldr	r3, [pc, #108]	; (8007058 <_dtoa_r+0x630>)
 8006fec:	4650      	mov	r0, sl
 8006fee:	4659      	mov	r1, fp
 8006ff0:	f7f9 f954 	bl	800029c <__adddf3>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	4640      	mov	r0, r8
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	f7f9 fd94 	bl	8000b28 <__aeabi_dcmpgt>
 8007000:	2800      	cmp	r0, #0
 8007002:	d173      	bne.n	80070ec <_dtoa_r+0x6c4>
 8007004:	4652      	mov	r2, sl
 8007006:	465b      	mov	r3, fp
 8007008:	4913      	ldr	r1, [pc, #76]	; (8007058 <_dtoa_r+0x630>)
 800700a:	2000      	movs	r0, #0
 800700c:	f7f9 f944 	bl	8000298 <__aeabi_dsub>
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	4640      	mov	r0, r8
 8007016:	4649      	mov	r1, r9
 8007018:	f7f9 fd68 	bl	8000aec <__aeabi_dcmplt>
 800701c:	2800      	cmp	r0, #0
 800701e:	f43f af35 	beq.w	8006e8c <_dtoa_r+0x464>
 8007022:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007024:	1e6b      	subs	r3, r5, #1
 8007026:	930f      	str	r3, [sp, #60]	; 0x3c
 8007028:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800702c:	2b30      	cmp	r3, #48	; 0x30
 800702e:	d0f8      	beq.n	8007022 <_dtoa_r+0x5fa>
 8007030:	9700      	str	r7, [sp, #0]
 8007032:	e049      	b.n	80070c8 <_dtoa_r+0x6a0>
 8007034:	4b05      	ldr	r3, [pc, #20]	; (800704c <_dtoa_r+0x624>)
 8007036:	f7f9 fae7 	bl	8000608 <__aeabi_dmul>
 800703a:	4680      	mov	r8, r0
 800703c:	4689      	mov	r9, r1
 800703e:	e7bd      	b.n	8006fbc <_dtoa_r+0x594>
 8007040:	08008c50 	.word	0x08008c50
 8007044:	08008c28 	.word	0x08008c28
 8007048:	3ff00000 	.word	0x3ff00000
 800704c:	40240000 	.word	0x40240000
 8007050:	401c0000 	.word	0x401c0000
 8007054:	40140000 	.word	0x40140000
 8007058:	3fe00000 	.word	0x3fe00000
 800705c:	9d01      	ldr	r5, [sp, #4]
 800705e:	4656      	mov	r6, sl
 8007060:	465f      	mov	r7, fp
 8007062:	4642      	mov	r2, r8
 8007064:	464b      	mov	r3, r9
 8007066:	4630      	mov	r0, r6
 8007068:	4639      	mov	r1, r7
 800706a:	f7f9 fbf7 	bl	800085c <__aeabi_ddiv>
 800706e:	f7f9 fd7b 	bl	8000b68 <__aeabi_d2iz>
 8007072:	4682      	mov	sl, r0
 8007074:	f7f9 fa5e 	bl	8000534 <__aeabi_i2d>
 8007078:	4642      	mov	r2, r8
 800707a:	464b      	mov	r3, r9
 800707c:	f7f9 fac4 	bl	8000608 <__aeabi_dmul>
 8007080:	4602      	mov	r2, r0
 8007082:	460b      	mov	r3, r1
 8007084:	4630      	mov	r0, r6
 8007086:	4639      	mov	r1, r7
 8007088:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800708c:	f7f9 f904 	bl	8000298 <__aeabi_dsub>
 8007090:	f805 6b01 	strb.w	r6, [r5], #1
 8007094:	9e01      	ldr	r6, [sp, #4]
 8007096:	9f03      	ldr	r7, [sp, #12]
 8007098:	1bae      	subs	r6, r5, r6
 800709a:	42b7      	cmp	r7, r6
 800709c:	4602      	mov	r2, r0
 800709e:	460b      	mov	r3, r1
 80070a0:	d135      	bne.n	800710e <_dtoa_r+0x6e6>
 80070a2:	f7f9 f8fb 	bl	800029c <__adddf3>
 80070a6:	4642      	mov	r2, r8
 80070a8:	464b      	mov	r3, r9
 80070aa:	4606      	mov	r6, r0
 80070ac:	460f      	mov	r7, r1
 80070ae:	f7f9 fd3b 	bl	8000b28 <__aeabi_dcmpgt>
 80070b2:	b9d0      	cbnz	r0, 80070ea <_dtoa_r+0x6c2>
 80070b4:	4642      	mov	r2, r8
 80070b6:	464b      	mov	r3, r9
 80070b8:	4630      	mov	r0, r6
 80070ba:	4639      	mov	r1, r7
 80070bc:	f7f9 fd0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80070c0:	b110      	cbz	r0, 80070c8 <_dtoa_r+0x6a0>
 80070c2:	f01a 0f01 	tst.w	sl, #1
 80070c6:	d110      	bne.n	80070ea <_dtoa_r+0x6c2>
 80070c8:	4620      	mov	r0, r4
 80070ca:	ee18 1a10 	vmov	r1, s16
 80070ce:	f000 fd09 	bl	8007ae4 <_Bfree>
 80070d2:	2300      	movs	r3, #0
 80070d4:	9800      	ldr	r0, [sp, #0]
 80070d6:	702b      	strb	r3, [r5, #0]
 80070d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070da:	3001      	adds	r0, #1
 80070dc:	6018      	str	r0, [r3, #0]
 80070de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f43f acf1 	beq.w	8006ac8 <_dtoa_r+0xa0>
 80070e6:	601d      	str	r5, [r3, #0]
 80070e8:	e4ee      	b.n	8006ac8 <_dtoa_r+0xa0>
 80070ea:	9f00      	ldr	r7, [sp, #0]
 80070ec:	462b      	mov	r3, r5
 80070ee:	461d      	mov	r5, r3
 80070f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070f4:	2a39      	cmp	r2, #57	; 0x39
 80070f6:	d106      	bne.n	8007106 <_dtoa_r+0x6de>
 80070f8:	9a01      	ldr	r2, [sp, #4]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d1f7      	bne.n	80070ee <_dtoa_r+0x6c6>
 80070fe:	9901      	ldr	r1, [sp, #4]
 8007100:	2230      	movs	r2, #48	; 0x30
 8007102:	3701      	adds	r7, #1
 8007104:	700a      	strb	r2, [r1, #0]
 8007106:	781a      	ldrb	r2, [r3, #0]
 8007108:	3201      	adds	r2, #1
 800710a:	701a      	strb	r2, [r3, #0]
 800710c:	e790      	b.n	8007030 <_dtoa_r+0x608>
 800710e:	4ba6      	ldr	r3, [pc, #664]	; (80073a8 <_dtoa_r+0x980>)
 8007110:	2200      	movs	r2, #0
 8007112:	f7f9 fa79 	bl	8000608 <__aeabi_dmul>
 8007116:	2200      	movs	r2, #0
 8007118:	2300      	movs	r3, #0
 800711a:	4606      	mov	r6, r0
 800711c:	460f      	mov	r7, r1
 800711e:	f7f9 fcdb 	bl	8000ad8 <__aeabi_dcmpeq>
 8007122:	2800      	cmp	r0, #0
 8007124:	d09d      	beq.n	8007062 <_dtoa_r+0x63a>
 8007126:	e7cf      	b.n	80070c8 <_dtoa_r+0x6a0>
 8007128:	9a08      	ldr	r2, [sp, #32]
 800712a:	2a00      	cmp	r2, #0
 800712c:	f000 80d7 	beq.w	80072de <_dtoa_r+0x8b6>
 8007130:	9a06      	ldr	r2, [sp, #24]
 8007132:	2a01      	cmp	r2, #1
 8007134:	f300 80ba 	bgt.w	80072ac <_dtoa_r+0x884>
 8007138:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800713a:	2a00      	cmp	r2, #0
 800713c:	f000 80b2 	beq.w	80072a4 <_dtoa_r+0x87c>
 8007140:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007144:	9e07      	ldr	r6, [sp, #28]
 8007146:	9d04      	ldr	r5, [sp, #16]
 8007148:	9a04      	ldr	r2, [sp, #16]
 800714a:	441a      	add	r2, r3
 800714c:	9204      	str	r2, [sp, #16]
 800714e:	9a05      	ldr	r2, [sp, #20]
 8007150:	2101      	movs	r1, #1
 8007152:	441a      	add	r2, r3
 8007154:	4620      	mov	r0, r4
 8007156:	9205      	str	r2, [sp, #20]
 8007158:	f000 fd7c 	bl	8007c54 <__i2b>
 800715c:	4607      	mov	r7, r0
 800715e:	2d00      	cmp	r5, #0
 8007160:	dd0c      	ble.n	800717c <_dtoa_r+0x754>
 8007162:	9b05      	ldr	r3, [sp, #20]
 8007164:	2b00      	cmp	r3, #0
 8007166:	dd09      	ble.n	800717c <_dtoa_r+0x754>
 8007168:	42ab      	cmp	r3, r5
 800716a:	9a04      	ldr	r2, [sp, #16]
 800716c:	bfa8      	it	ge
 800716e:	462b      	movge	r3, r5
 8007170:	1ad2      	subs	r2, r2, r3
 8007172:	9204      	str	r2, [sp, #16]
 8007174:	9a05      	ldr	r2, [sp, #20]
 8007176:	1aed      	subs	r5, r5, r3
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	9305      	str	r3, [sp, #20]
 800717c:	9b07      	ldr	r3, [sp, #28]
 800717e:	b31b      	cbz	r3, 80071c8 <_dtoa_r+0x7a0>
 8007180:	9b08      	ldr	r3, [sp, #32]
 8007182:	2b00      	cmp	r3, #0
 8007184:	f000 80af 	beq.w	80072e6 <_dtoa_r+0x8be>
 8007188:	2e00      	cmp	r6, #0
 800718a:	dd13      	ble.n	80071b4 <_dtoa_r+0x78c>
 800718c:	4639      	mov	r1, r7
 800718e:	4632      	mov	r2, r6
 8007190:	4620      	mov	r0, r4
 8007192:	f000 fe1f 	bl	8007dd4 <__pow5mult>
 8007196:	ee18 2a10 	vmov	r2, s16
 800719a:	4601      	mov	r1, r0
 800719c:	4607      	mov	r7, r0
 800719e:	4620      	mov	r0, r4
 80071a0:	f000 fd6e 	bl	8007c80 <__multiply>
 80071a4:	ee18 1a10 	vmov	r1, s16
 80071a8:	4680      	mov	r8, r0
 80071aa:	4620      	mov	r0, r4
 80071ac:	f000 fc9a 	bl	8007ae4 <_Bfree>
 80071b0:	ee08 8a10 	vmov	s16, r8
 80071b4:	9b07      	ldr	r3, [sp, #28]
 80071b6:	1b9a      	subs	r2, r3, r6
 80071b8:	d006      	beq.n	80071c8 <_dtoa_r+0x7a0>
 80071ba:	ee18 1a10 	vmov	r1, s16
 80071be:	4620      	mov	r0, r4
 80071c0:	f000 fe08 	bl	8007dd4 <__pow5mult>
 80071c4:	ee08 0a10 	vmov	s16, r0
 80071c8:	2101      	movs	r1, #1
 80071ca:	4620      	mov	r0, r4
 80071cc:	f000 fd42 	bl	8007c54 <__i2b>
 80071d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	4606      	mov	r6, r0
 80071d6:	f340 8088 	ble.w	80072ea <_dtoa_r+0x8c2>
 80071da:	461a      	mov	r2, r3
 80071dc:	4601      	mov	r1, r0
 80071de:	4620      	mov	r0, r4
 80071e0:	f000 fdf8 	bl	8007dd4 <__pow5mult>
 80071e4:	9b06      	ldr	r3, [sp, #24]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	4606      	mov	r6, r0
 80071ea:	f340 8081 	ble.w	80072f0 <_dtoa_r+0x8c8>
 80071ee:	f04f 0800 	mov.w	r8, #0
 80071f2:	6933      	ldr	r3, [r6, #16]
 80071f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80071f8:	6918      	ldr	r0, [r3, #16]
 80071fa:	f000 fcdb 	bl	8007bb4 <__hi0bits>
 80071fe:	f1c0 0020 	rsb	r0, r0, #32
 8007202:	9b05      	ldr	r3, [sp, #20]
 8007204:	4418      	add	r0, r3
 8007206:	f010 001f 	ands.w	r0, r0, #31
 800720a:	f000 8092 	beq.w	8007332 <_dtoa_r+0x90a>
 800720e:	f1c0 0320 	rsb	r3, r0, #32
 8007212:	2b04      	cmp	r3, #4
 8007214:	f340 808a 	ble.w	800732c <_dtoa_r+0x904>
 8007218:	f1c0 001c 	rsb	r0, r0, #28
 800721c:	9b04      	ldr	r3, [sp, #16]
 800721e:	4403      	add	r3, r0
 8007220:	9304      	str	r3, [sp, #16]
 8007222:	9b05      	ldr	r3, [sp, #20]
 8007224:	4403      	add	r3, r0
 8007226:	4405      	add	r5, r0
 8007228:	9305      	str	r3, [sp, #20]
 800722a:	9b04      	ldr	r3, [sp, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	dd07      	ble.n	8007240 <_dtoa_r+0x818>
 8007230:	ee18 1a10 	vmov	r1, s16
 8007234:	461a      	mov	r2, r3
 8007236:	4620      	mov	r0, r4
 8007238:	f000 fe26 	bl	8007e88 <__lshift>
 800723c:	ee08 0a10 	vmov	s16, r0
 8007240:	9b05      	ldr	r3, [sp, #20]
 8007242:	2b00      	cmp	r3, #0
 8007244:	dd05      	ble.n	8007252 <_dtoa_r+0x82a>
 8007246:	4631      	mov	r1, r6
 8007248:	461a      	mov	r2, r3
 800724a:	4620      	mov	r0, r4
 800724c:	f000 fe1c 	bl	8007e88 <__lshift>
 8007250:	4606      	mov	r6, r0
 8007252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007254:	2b00      	cmp	r3, #0
 8007256:	d06e      	beq.n	8007336 <_dtoa_r+0x90e>
 8007258:	ee18 0a10 	vmov	r0, s16
 800725c:	4631      	mov	r1, r6
 800725e:	f000 fe83 	bl	8007f68 <__mcmp>
 8007262:	2800      	cmp	r0, #0
 8007264:	da67      	bge.n	8007336 <_dtoa_r+0x90e>
 8007266:	9b00      	ldr	r3, [sp, #0]
 8007268:	3b01      	subs	r3, #1
 800726a:	ee18 1a10 	vmov	r1, s16
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	220a      	movs	r2, #10
 8007272:	2300      	movs	r3, #0
 8007274:	4620      	mov	r0, r4
 8007276:	f000 fc57 	bl	8007b28 <__multadd>
 800727a:	9b08      	ldr	r3, [sp, #32]
 800727c:	ee08 0a10 	vmov	s16, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	f000 81b1 	beq.w	80075e8 <_dtoa_r+0xbc0>
 8007286:	2300      	movs	r3, #0
 8007288:	4639      	mov	r1, r7
 800728a:	220a      	movs	r2, #10
 800728c:	4620      	mov	r0, r4
 800728e:	f000 fc4b 	bl	8007b28 <__multadd>
 8007292:	9b02      	ldr	r3, [sp, #8]
 8007294:	2b00      	cmp	r3, #0
 8007296:	4607      	mov	r7, r0
 8007298:	f300 808e 	bgt.w	80073b8 <_dtoa_r+0x990>
 800729c:	9b06      	ldr	r3, [sp, #24]
 800729e:	2b02      	cmp	r3, #2
 80072a0:	dc51      	bgt.n	8007346 <_dtoa_r+0x91e>
 80072a2:	e089      	b.n	80073b8 <_dtoa_r+0x990>
 80072a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80072aa:	e74b      	b.n	8007144 <_dtoa_r+0x71c>
 80072ac:	9b03      	ldr	r3, [sp, #12]
 80072ae:	1e5e      	subs	r6, r3, #1
 80072b0:	9b07      	ldr	r3, [sp, #28]
 80072b2:	42b3      	cmp	r3, r6
 80072b4:	bfbf      	itttt	lt
 80072b6:	9b07      	ldrlt	r3, [sp, #28]
 80072b8:	9607      	strlt	r6, [sp, #28]
 80072ba:	1af2      	sublt	r2, r6, r3
 80072bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80072be:	bfb6      	itet	lt
 80072c0:	189b      	addlt	r3, r3, r2
 80072c2:	1b9e      	subge	r6, r3, r6
 80072c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80072c6:	9b03      	ldr	r3, [sp, #12]
 80072c8:	bfb8      	it	lt
 80072ca:	2600      	movlt	r6, #0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	bfb7      	itett	lt
 80072d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80072d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80072d8:	1a9d      	sublt	r5, r3, r2
 80072da:	2300      	movlt	r3, #0
 80072dc:	e734      	b.n	8007148 <_dtoa_r+0x720>
 80072de:	9e07      	ldr	r6, [sp, #28]
 80072e0:	9d04      	ldr	r5, [sp, #16]
 80072e2:	9f08      	ldr	r7, [sp, #32]
 80072e4:	e73b      	b.n	800715e <_dtoa_r+0x736>
 80072e6:	9a07      	ldr	r2, [sp, #28]
 80072e8:	e767      	b.n	80071ba <_dtoa_r+0x792>
 80072ea:	9b06      	ldr	r3, [sp, #24]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	dc18      	bgt.n	8007322 <_dtoa_r+0x8fa>
 80072f0:	f1ba 0f00 	cmp.w	sl, #0
 80072f4:	d115      	bne.n	8007322 <_dtoa_r+0x8fa>
 80072f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072fa:	b993      	cbnz	r3, 8007322 <_dtoa_r+0x8fa>
 80072fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007300:	0d1b      	lsrs	r3, r3, #20
 8007302:	051b      	lsls	r3, r3, #20
 8007304:	b183      	cbz	r3, 8007328 <_dtoa_r+0x900>
 8007306:	9b04      	ldr	r3, [sp, #16]
 8007308:	3301      	adds	r3, #1
 800730a:	9304      	str	r3, [sp, #16]
 800730c:	9b05      	ldr	r3, [sp, #20]
 800730e:	3301      	adds	r3, #1
 8007310:	9305      	str	r3, [sp, #20]
 8007312:	f04f 0801 	mov.w	r8, #1
 8007316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007318:	2b00      	cmp	r3, #0
 800731a:	f47f af6a 	bne.w	80071f2 <_dtoa_r+0x7ca>
 800731e:	2001      	movs	r0, #1
 8007320:	e76f      	b.n	8007202 <_dtoa_r+0x7da>
 8007322:	f04f 0800 	mov.w	r8, #0
 8007326:	e7f6      	b.n	8007316 <_dtoa_r+0x8ee>
 8007328:	4698      	mov	r8, r3
 800732a:	e7f4      	b.n	8007316 <_dtoa_r+0x8ee>
 800732c:	f43f af7d 	beq.w	800722a <_dtoa_r+0x802>
 8007330:	4618      	mov	r0, r3
 8007332:	301c      	adds	r0, #28
 8007334:	e772      	b.n	800721c <_dtoa_r+0x7f4>
 8007336:	9b03      	ldr	r3, [sp, #12]
 8007338:	2b00      	cmp	r3, #0
 800733a:	dc37      	bgt.n	80073ac <_dtoa_r+0x984>
 800733c:	9b06      	ldr	r3, [sp, #24]
 800733e:	2b02      	cmp	r3, #2
 8007340:	dd34      	ble.n	80073ac <_dtoa_r+0x984>
 8007342:	9b03      	ldr	r3, [sp, #12]
 8007344:	9302      	str	r3, [sp, #8]
 8007346:	9b02      	ldr	r3, [sp, #8]
 8007348:	b96b      	cbnz	r3, 8007366 <_dtoa_r+0x93e>
 800734a:	4631      	mov	r1, r6
 800734c:	2205      	movs	r2, #5
 800734e:	4620      	mov	r0, r4
 8007350:	f000 fbea 	bl	8007b28 <__multadd>
 8007354:	4601      	mov	r1, r0
 8007356:	4606      	mov	r6, r0
 8007358:	ee18 0a10 	vmov	r0, s16
 800735c:	f000 fe04 	bl	8007f68 <__mcmp>
 8007360:	2800      	cmp	r0, #0
 8007362:	f73f adbb 	bgt.w	8006edc <_dtoa_r+0x4b4>
 8007366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007368:	9d01      	ldr	r5, [sp, #4]
 800736a:	43db      	mvns	r3, r3
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	f04f 0800 	mov.w	r8, #0
 8007372:	4631      	mov	r1, r6
 8007374:	4620      	mov	r0, r4
 8007376:	f000 fbb5 	bl	8007ae4 <_Bfree>
 800737a:	2f00      	cmp	r7, #0
 800737c:	f43f aea4 	beq.w	80070c8 <_dtoa_r+0x6a0>
 8007380:	f1b8 0f00 	cmp.w	r8, #0
 8007384:	d005      	beq.n	8007392 <_dtoa_r+0x96a>
 8007386:	45b8      	cmp	r8, r7
 8007388:	d003      	beq.n	8007392 <_dtoa_r+0x96a>
 800738a:	4641      	mov	r1, r8
 800738c:	4620      	mov	r0, r4
 800738e:	f000 fba9 	bl	8007ae4 <_Bfree>
 8007392:	4639      	mov	r1, r7
 8007394:	4620      	mov	r0, r4
 8007396:	f000 fba5 	bl	8007ae4 <_Bfree>
 800739a:	e695      	b.n	80070c8 <_dtoa_r+0x6a0>
 800739c:	2600      	movs	r6, #0
 800739e:	4637      	mov	r7, r6
 80073a0:	e7e1      	b.n	8007366 <_dtoa_r+0x93e>
 80073a2:	9700      	str	r7, [sp, #0]
 80073a4:	4637      	mov	r7, r6
 80073a6:	e599      	b.n	8006edc <_dtoa_r+0x4b4>
 80073a8:	40240000 	.word	0x40240000
 80073ac:	9b08      	ldr	r3, [sp, #32]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 80ca 	beq.w	8007548 <_dtoa_r+0xb20>
 80073b4:	9b03      	ldr	r3, [sp, #12]
 80073b6:	9302      	str	r3, [sp, #8]
 80073b8:	2d00      	cmp	r5, #0
 80073ba:	dd05      	ble.n	80073c8 <_dtoa_r+0x9a0>
 80073bc:	4639      	mov	r1, r7
 80073be:	462a      	mov	r2, r5
 80073c0:	4620      	mov	r0, r4
 80073c2:	f000 fd61 	bl	8007e88 <__lshift>
 80073c6:	4607      	mov	r7, r0
 80073c8:	f1b8 0f00 	cmp.w	r8, #0
 80073cc:	d05b      	beq.n	8007486 <_dtoa_r+0xa5e>
 80073ce:	6879      	ldr	r1, [r7, #4]
 80073d0:	4620      	mov	r0, r4
 80073d2:	f000 fb47 	bl	8007a64 <_Balloc>
 80073d6:	4605      	mov	r5, r0
 80073d8:	b928      	cbnz	r0, 80073e6 <_dtoa_r+0x9be>
 80073da:	4b87      	ldr	r3, [pc, #540]	; (80075f8 <_dtoa_r+0xbd0>)
 80073dc:	4602      	mov	r2, r0
 80073de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80073e2:	f7ff bb3b 	b.w	8006a5c <_dtoa_r+0x34>
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	3202      	adds	r2, #2
 80073ea:	0092      	lsls	r2, r2, #2
 80073ec:	f107 010c 	add.w	r1, r7, #12
 80073f0:	300c      	adds	r0, #12
 80073f2:	f7fe fa6f 	bl	80058d4 <memcpy>
 80073f6:	2201      	movs	r2, #1
 80073f8:	4629      	mov	r1, r5
 80073fa:	4620      	mov	r0, r4
 80073fc:	f000 fd44 	bl	8007e88 <__lshift>
 8007400:	9b01      	ldr	r3, [sp, #4]
 8007402:	f103 0901 	add.w	r9, r3, #1
 8007406:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800740a:	4413      	add	r3, r2
 800740c:	9305      	str	r3, [sp, #20]
 800740e:	f00a 0301 	and.w	r3, sl, #1
 8007412:	46b8      	mov	r8, r7
 8007414:	9304      	str	r3, [sp, #16]
 8007416:	4607      	mov	r7, r0
 8007418:	4631      	mov	r1, r6
 800741a:	ee18 0a10 	vmov	r0, s16
 800741e:	f7ff fa78 	bl	8006912 <quorem>
 8007422:	4641      	mov	r1, r8
 8007424:	9002      	str	r0, [sp, #8]
 8007426:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800742a:	ee18 0a10 	vmov	r0, s16
 800742e:	f000 fd9b 	bl	8007f68 <__mcmp>
 8007432:	463a      	mov	r2, r7
 8007434:	9003      	str	r0, [sp, #12]
 8007436:	4631      	mov	r1, r6
 8007438:	4620      	mov	r0, r4
 800743a:	f000 fdb1 	bl	8007fa0 <__mdiff>
 800743e:	68c2      	ldr	r2, [r0, #12]
 8007440:	f109 3bff 	add.w	fp, r9, #4294967295
 8007444:	4605      	mov	r5, r0
 8007446:	bb02      	cbnz	r2, 800748a <_dtoa_r+0xa62>
 8007448:	4601      	mov	r1, r0
 800744a:	ee18 0a10 	vmov	r0, s16
 800744e:	f000 fd8b 	bl	8007f68 <__mcmp>
 8007452:	4602      	mov	r2, r0
 8007454:	4629      	mov	r1, r5
 8007456:	4620      	mov	r0, r4
 8007458:	9207      	str	r2, [sp, #28]
 800745a:	f000 fb43 	bl	8007ae4 <_Bfree>
 800745e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007462:	ea43 0102 	orr.w	r1, r3, r2
 8007466:	9b04      	ldr	r3, [sp, #16]
 8007468:	430b      	orrs	r3, r1
 800746a:	464d      	mov	r5, r9
 800746c:	d10f      	bne.n	800748e <_dtoa_r+0xa66>
 800746e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007472:	d02a      	beq.n	80074ca <_dtoa_r+0xaa2>
 8007474:	9b03      	ldr	r3, [sp, #12]
 8007476:	2b00      	cmp	r3, #0
 8007478:	dd02      	ble.n	8007480 <_dtoa_r+0xa58>
 800747a:	9b02      	ldr	r3, [sp, #8]
 800747c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007480:	f88b a000 	strb.w	sl, [fp]
 8007484:	e775      	b.n	8007372 <_dtoa_r+0x94a>
 8007486:	4638      	mov	r0, r7
 8007488:	e7ba      	b.n	8007400 <_dtoa_r+0x9d8>
 800748a:	2201      	movs	r2, #1
 800748c:	e7e2      	b.n	8007454 <_dtoa_r+0xa2c>
 800748e:	9b03      	ldr	r3, [sp, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	db04      	blt.n	800749e <_dtoa_r+0xa76>
 8007494:	9906      	ldr	r1, [sp, #24]
 8007496:	430b      	orrs	r3, r1
 8007498:	9904      	ldr	r1, [sp, #16]
 800749a:	430b      	orrs	r3, r1
 800749c:	d122      	bne.n	80074e4 <_dtoa_r+0xabc>
 800749e:	2a00      	cmp	r2, #0
 80074a0:	ddee      	ble.n	8007480 <_dtoa_r+0xa58>
 80074a2:	ee18 1a10 	vmov	r1, s16
 80074a6:	2201      	movs	r2, #1
 80074a8:	4620      	mov	r0, r4
 80074aa:	f000 fced 	bl	8007e88 <__lshift>
 80074ae:	4631      	mov	r1, r6
 80074b0:	ee08 0a10 	vmov	s16, r0
 80074b4:	f000 fd58 	bl	8007f68 <__mcmp>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	dc03      	bgt.n	80074c4 <_dtoa_r+0xa9c>
 80074bc:	d1e0      	bne.n	8007480 <_dtoa_r+0xa58>
 80074be:	f01a 0f01 	tst.w	sl, #1
 80074c2:	d0dd      	beq.n	8007480 <_dtoa_r+0xa58>
 80074c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80074c8:	d1d7      	bne.n	800747a <_dtoa_r+0xa52>
 80074ca:	2339      	movs	r3, #57	; 0x39
 80074cc:	f88b 3000 	strb.w	r3, [fp]
 80074d0:	462b      	mov	r3, r5
 80074d2:	461d      	mov	r5, r3
 80074d4:	3b01      	subs	r3, #1
 80074d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80074da:	2a39      	cmp	r2, #57	; 0x39
 80074dc:	d071      	beq.n	80075c2 <_dtoa_r+0xb9a>
 80074de:	3201      	adds	r2, #1
 80074e0:	701a      	strb	r2, [r3, #0]
 80074e2:	e746      	b.n	8007372 <_dtoa_r+0x94a>
 80074e4:	2a00      	cmp	r2, #0
 80074e6:	dd07      	ble.n	80074f8 <_dtoa_r+0xad0>
 80074e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80074ec:	d0ed      	beq.n	80074ca <_dtoa_r+0xaa2>
 80074ee:	f10a 0301 	add.w	r3, sl, #1
 80074f2:	f88b 3000 	strb.w	r3, [fp]
 80074f6:	e73c      	b.n	8007372 <_dtoa_r+0x94a>
 80074f8:	9b05      	ldr	r3, [sp, #20]
 80074fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80074fe:	4599      	cmp	r9, r3
 8007500:	d047      	beq.n	8007592 <_dtoa_r+0xb6a>
 8007502:	ee18 1a10 	vmov	r1, s16
 8007506:	2300      	movs	r3, #0
 8007508:	220a      	movs	r2, #10
 800750a:	4620      	mov	r0, r4
 800750c:	f000 fb0c 	bl	8007b28 <__multadd>
 8007510:	45b8      	cmp	r8, r7
 8007512:	ee08 0a10 	vmov	s16, r0
 8007516:	f04f 0300 	mov.w	r3, #0
 800751a:	f04f 020a 	mov.w	r2, #10
 800751e:	4641      	mov	r1, r8
 8007520:	4620      	mov	r0, r4
 8007522:	d106      	bne.n	8007532 <_dtoa_r+0xb0a>
 8007524:	f000 fb00 	bl	8007b28 <__multadd>
 8007528:	4680      	mov	r8, r0
 800752a:	4607      	mov	r7, r0
 800752c:	f109 0901 	add.w	r9, r9, #1
 8007530:	e772      	b.n	8007418 <_dtoa_r+0x9f0>
 8007532:	f000 faf9 	bl	8007b28 <__multadd>
 8007536:	4639      	mov	r1, r7
 8007538:	4680      	mov	r8, r0
 800753a:	2300      	movs	r3, #0
 800753c:	220a      	movs	r2, #10
 800753e:	4620      	mov	r0, r4
 8007540:	f000 faf2 	bl	8007b28 <__multadd>
 8007544:	4607      	mov	r7, r0
 8007546:	e7f1      	b.n	800752c <_dtoa_r+0xb04>
 8007548:	9b03      	ldr	r3, [sp, #12]
 800754a:	9302      	str	r3, [sp, #8]
 800754c:	9d01      	ldr	r5, [sp, #4]
 800754e:	ee18 0a10 	vmov	r0, s16
 8007552:	4631      	mov	r1, r6
 8007554:	f7ff f9dd 	bl	8006912 <quorem>
 8007558:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800755c:	9b01      	ldr	r3, [sp, #4]
 800755e:	f805 ab01 	strb.w	sl, [r5], #1
 8007562:	1aea      	subs	r2, r5, r3
 8007564:	9b02      	ldr	r3, [sp, #8]
 8007566:	4293      	cmp	r3, r2
 8007568:	dd09      	ble.n	800757e <_dtoa_r+0xb56>
 800756a:	ee18 1a10 	vmov	r1, s16
 800756e:	2300      	movs	r3, #0
 8007570:	220a      	movs	r2, #10
 8007572:	4620      	mov	r0, r4
 8007574:	f000 fad8 	bl	8007b28 <__multadd>
 8007578:	ee08 0a10 	vmov	s16, r0
 800757c:	e7e7      	b.n	800754e <_dtoa_r+0xb26>
 800757e:	9b02      	ldr	r3, [sp, #8]
 8007580:	2b00      	cmp	r3, #0
 8007582:	bfc8      	it	gt
 8007584:	461d      	movgt	r5, r3
 8007586:	9b01      	ldr	r3, [sp, #4]
 8007588:	bfd8      	it	le
 800758a:	2501      	movle	r5, #1
 800758c:	441d      	add	r5, r3
 800758e:	f04f 0800 	mov.w	r8, #0
 8007592:	ee18 1a10 	vmov	r1, s16
 8007596:	2201      	movs	r2, #1
 8007598:	4620      	mov	r0, r4
 800759a:	f000 fc75 	bl	8007e88 <__lshift>
 800759e:	4631      	mov	r1, r6
 80075a0:	ee08 0a10 	vmov	s16, r0
 80075a4:	f000 fce0 	bl	8007f68 <__mcmp>
 80075a8:	2800      	cmp	r0, #0
 80075aa:	dc91      	bgt.n	80074d0 <_dtoa_r+0xaa8>
 80075ac:	d102      	bne.n	80075b4 <_dtoa_r+0xb8c>
 80075ae:	f01a 0f01 	tst.w	sl, #1
 80075b2:	d18d      	bne.n	80074d0 <_dtoa_r+0xaa8>
 80075b4:	462b      	mov	r3, r5
 80075b6:	461d      	mov	r5, r3
 80075b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075bc:	2a30      	cmp	r2, #48	; 0x30
 80075be:	d0fa      	beq.n	80075b6 <_dtoa_r+0xb8e>
 80075c0:	e6d7      	b.n	8007372 <_dtoa_r+0x94a>
 80075c2:	9a01      	ldr	r2, [sp, #4]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d184      	bne.n	80074d2 <_dtoa_r+0xaaa>
 80075c8:	9b00      	ldr	r3, [sp, #0]
 80075ca:	3301      	adds	r3, #1
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	2331      	movs	r3, #49	; 0x31
 80075d0:	7013      	strb	r3, [r2, #0]
 80075d2:	e6ce      	b.n	8007372 <_dtoa_r+0x94a>
 80075d4:	4b09      	ldr	r3, [pc, #36]	; (80075fc <_dtoa_r+0xbd4>)
 80075d6:	f7ff ba95 	b.w	8006b04 <_dtoa_r+0xdc>
 80075da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f47f aa6e 	bne.w	8006abe <_dtoa_r+0x96>
 80075e2:	4b07      	ldr	r3, [pc, #28]	; (8007600 <_dtoa_r+0xbd8>)
 80075e4:	f7ff ba8e 	b.w	8006b04 <_dtoa_r+0xdc>
 80075e8:	9b02      	ldr	r3, [sp, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	dcae      	bgt.n	800754c <_dtoa_r+0xb24>
 80075ee:	9b06      	ldr	r3, [sp, #24]
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	f73f aea8 	bgt.w	8007346 <_dtoa_r+0x91e>
 80075f6:	e7a9      	b.n	800754c <_dtoa_r+0xb24>
 80075f8:	08008b54 	.word	0x08008b54
 80075fc:	08008ab1 	.word	0x08008ab1
 8007600:	08008ad5 	.word	0x08008ad5

08007604 <__sflush_r>:
 8007604:	898a      	ldrh	r2, [r1, #12]
 8007606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800760a:	4605      	mov	r5, r0
 800760c:	0710      	lsls	r0, r2, #28
 800760e:	460c      	mov	r4, r1
 8007610:	d458      	bmi.n	80076c4 <__sflush_r+0xc0>
 8007612:	684b      	ldr	r3, [r1, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	dc05      	bgt.n	8007624 <__sflush_r+0x20>
 8007618:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800761a:	2b00      	cmp	r3, #0
 800761c:	dc02      	bgt.n	8007624 <__sflush_r+0x20>
 800761e:	2000      	movs	r0, #0
 8007620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007624:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007626:	2e00      	cmp	r6, #0
 8007628:	d0f9      	beq.n	800761e <__sflush_r+0x1a>
 800762a:	2300      	movs	r3, #0
 800762c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007630:	682f      	ldr	r7, [r5, #0]
 8007632:	602b      	str	r3, [r5, #0]
 8007634:	d032      	beq.n	800769c <__sflush_r+0x98>
 8007636:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007638:	89a3      	ldrh	r3, [r4, #12]
 800763a:	075a      	lsls	r2, r3, #29
 800763c:	d505      	bpl.n	800764a <__sflush_r+0x46>
 800763e:	6863      	ldr	r3, [r4, #4]
 8007640:	1ac0      	subs	r0, r0, r3
 8007642:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007644:	b10b      	cbz	r3, 800764a <__sflush_r+0x46>
 8007646:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007648:	1ac0      	subs	r0, r0, r3
 800764a:	2300      	movs	r3, #0
 800764c:	4602      	mov	r2, r0
 800764e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007650:	6a21      	ldr	r1, [r4, #32]
 8007652:	4628      	mov	r0, r5
 8007654:	47b0      	blx	r6
 8007656:	1c43      	adds	r3, r0, #1
 8007658:	89a3      	ldrh	r3, [r4, #12]
 800765a:	d106      	bne.n	800766a <__sflush_r+0x66>
 800765c:	6829      	ldr	r1, [r5, #0]
 800765e:	291d      	cmp	r1, #29
 8007660:	d82c      	bhi.n	80076bc <__sflush_r+0xb8>
 8007662:	4a2a      	ldr	r2, [pc, #168]	; (800770c <__sflush_r+0x108>)
 8007664:	40ca      	lsrs	r2, r1
 8007666:	07d6      	lsls	r6, r2, #31
 8007668:	d528      	bpl.n	80076bc <__sflush_r+0xb8>
 800766a:	2200      	movs	r2, #0
 800766c:	6062      	str	r2, [r4, #4]
 800766e:	04d9      	lsls	r1, r3, #19
 8007670:	6922      	ldr	r2, [r4, #16]
 8007672:	6022      	str	r2, [r4, #0]
 8007674:	d504      	bpl.n	8007680 <__sflush_r+0x7c>
 8007676:	1c42      	adds	r2, r0, #1
 8007678:	d101      	bne.n	800767e <__sflush_r+0x7a>
 800767a:	682b      	ldr	r3, [r5, #0]
 800767c:	b903      	cbnz	r3, 8007680 <__sflush_r+0x7c>
 800767e:	6560      	str	r0, [r4, #84]	; 0x54
 8007680:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007682:	602f      	str	r7, [r5, #0]
 8007684:	2900      	cmp	r1, #0
 8007686:	d0ca      	beq.n	800761e <__sflush_r+0x1a>
 8007688:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800768c:	4299      	cmp	r1, r3
 800768e:	d002      	beq.n	8007696 <__sflush_r+0x92>
 8007690:	4628      	mov	r0, r5
 8007692:	f7fe f935 	bl	8005900 <_free_r>
 8007696:	2000      	movs	r0, #0
 8007698:	6360      	str	r0, [r4, #52]	; 0x34
 800769a:	e7c1      	b.n	8007620 <__sflush_r+0x1c>
 800769c:	6a21      	ldr	r1, [r4, #32]
 800769e:	2301      	movs	r3, #1
 80076a0:	4628      	mov	r0, r5
 80076a2:	47b0      	blx	r6
 80076a4:	1c41      	adds	r1, r0, #1
 80076a6:	d1c7      	bne.n	8007638 <__sflush_r+0x34>
 80076a8:	682b      	ldr	r3, [r5, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d0c4      	beq.n	8007638 <__sflush_r+0x34>
 80076ae:	2b1d      	cmp	r3, #29
 80076b0:	d001      	beq.n	80076b6 <__sflush_r+0xb2>
 80076b2:	2b16      	cmp	r3, #22
 80076b4:	d101      	bne.n	80076ba <__sflush_r+0xb6>
 80076b6:	602f      	str	r7, [r5, #0]
 80076b8:	e7b1      	b.n	800761e <__sflush_r+0x1a>
 80076ba:	89a3      	ldrh	r3, [r4, #12]
 80076bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076c0:	81a3      	strh	r3, [r4, #12]
 80076c2:	e7ad      	b.n	8007620 <__sflush_r+0x1c>
 80076c4:	690f      	ldr	r7, [r1, #16]
 80076c6:	2f00      	cmp	r7, #0
 80076c8:	d0a9      	beq.n	800761e <__sflush_r+0x1a>
 80076ca:	0793      	lsls	r3, r2, #30
 80076cc:	680e      	ldr	r6, [r1, #0]
 80076ce:	bf08      	it	eq
 80076d0:	694b      	ldreq	r3, [r1, #20]
 80076d2:	600f      	str	r7, [r1, #0]
 80076d4:	bf18      	it	ne
 80076d6:	2300      	movne	r3, #0
 80076d8:	eba6 0807 	sub.w	r8, r6, r7
 80076dc:	608b      	str	r3, [r1, #8]
 80076de:	f1b8 0f00 	cmp.w	r8, #0
 80076e2:	dd9c      	ble.n	800761e <__sflush_r+0x1a>
 80076e4:	6a21      	ldr	r1, [r4, #32]
 80076e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076e8:	4643      	mov	r3, r8
 80076ea:	463a      	mov	r2, r7
 80076ec:	4628      	mov	r0, r5
 80076ee:	47b0      	blx	r6
 80076f0:	2800      	cmp	r0, #0
 80076f2:	dc06      	bgt.n	8007702 <__sflush_r+0xfe>
 80076f4:	89a3      	ldrh	r3, [r4, #12]
 80076f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076fa:	81a3      	strh	r3, [r4, #12]
 80076fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007700:	e78e      	b.n	8007620 <__sflush_r+0x1c>
 8007702:	4407      	add	r7, r0
 8007704:	eba8 0800 	sub.w	r8, r8, r0
 8007708:	e7e9      	b.n	80076de <__sflush_r+0xda>
 800770a:	bf00      	nop
 800770c:	20400001 	.word	0x20400001

08007710 <_fflush_r>:
 8007710:	b538      	push	{r3, r4, r5, lr}
 8007712:	690b      	ldr	r3, [r1, #16]
 8007714:	4605      	mov	r5, r0
 8007716:	460c      	mov	r4, r1
 8007718:	b913      	cbnz	r3, 8007720 <_fflush_r+0x10>
 800771a:	2500      	movs	r5, #0
 800771c:	4628      	mov	r0, r5
 800771e:	bd38      	pop	{r3, r4, r5, pc}
 8007720:	b118      	cbz	r0, 800772a <_fflush_r+0x1a>
 8007722:	6983      	ldr	r3, [r0, #24]
 8007724:	b90b      	cbnz	r3, 800772a <_fflush_r+0x1a>
 8007726:	f000 f887 	bl	8007838 <__sinit>
 800772a:	4b14      	ldr	r3, [pc, #80]	; (800777c <_fflush_r+0x6c>)
 800772c:	429c      	cmp	r4, r3
 800772e:	d11b      	bne.n	8007768 <_fflush_r+0x58>
 8007730:	686c      	ldr	r4, [r5, #4]
 8007732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d0ef      	beq.n	800771a <_fflush_r+0xa>
 800773a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800773c:	07d0      	lsls	r0, r2, #31
 800773e:	d404      	bmi.n	800774a <_fflush_r+0x3a>
 8007740:	0599      	lsls	r1, r3, #22
 8007742:	d402      	bmi.n	800774a <_fflush_r+0x3a>
 8007744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007746:	f000 f91a 	bl	800797e <__retarget_lock_acquire_recursive>
 800774a:	4628      	mov	r0, r5
 800774c:	4621      	mov	r1, r4
 800774e:	f7ff ff59 	bl	8007604 <__sflush_r>
 8007752:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007754:	07da      	lsls	r2, r3, #31
 8007756:	4605      	mov	r5, r0
 8007758:	d4e0      	bmi.n	800771c <_fflush_r+0xc>
 800775a:	89a3      	ldrh	r3, [r4, #12]
 800775c:	059b      	lsls	r3, r3, #22
 800775e:	d4dd      	bmi.n	800771c <_fflush_r+0xc>
 8007760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007762:	f000 f90d 	bl	8007980 <__retarget_lock_release_recursive>
 8007766:	e7d9      	b.n	800771c <_fflush_r+0xc>
 8007768:	4b05      	ldr	r3, [pc, #20]	; (8007780 <_fflush_r+0x70>)
 800776a:	429c      	cmp	r4, r3
 800776c:	d101      	bne.n	8007772 <_fflush_r+0x62>
 800776e:	68ac      	ldr	r4, [r5, #8]
 8007770:	e7df      	b.n	8007732 <_fflush_r+0x22>
 8007772:	4b04      	ldr	r3, [pc, #16]	; (8007784 <_fflush_r+0x74>)
 8007774:	429c      	cmp	r4, r3
 8007776:	bf08      	it	eq
 8007778:	68ec      	ldreq	r4, [r5, #12]
 800777a:	e7da      	b.n	8007732 <_fflush_r+0x22>
 800777c:	08008b88 	.word	0x08008b88
 8007780:	08008ba8 	.word	0x08008ba8
 8007784:	08008b68 	.word	0x08008b68

08007788 <std>:
 8007788:	2300      	movs	r3, #0
 800778a:	b510      	push	{r4, lr}
 800778c:	4604      	mov	r4, r0
 800778e:	e9c0 3300 	strd	r3, r3, [r0]
 8007792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007796:	6083      	str	r3, [r0, #8]
 8007798:	8181      	strh	r1, [r0, #12]
 800779a:	6643      	str	r3, [r0, #100]	; 0x64
 800779c:	81c2      	strh	r2, [r0, #14]
 800779e:	6183      	str	r3, [r0, #24]
 80077a0:	4619      	mov	r1, r3
 80077a2:	2208      	movs	r2, #8
 80077a4:	305c      	adds	r0, #92	; 0x5c
 80077a6:	f7fe f8a3 	bl	80058f0 <memset>
 80077aa:	4b05      	ldr	r3, [pc, #20]	; (80077c0 <std+0x38>)
 80077ac:	6263      	str	r3, [r4, #36]	; 0x24
 80077ae:	4b05      	ldr	r3, [pc, #20]	; (80077c4 <std+0x3c>)
 80077b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80077b2:	4b05      	ldr	r3, [pc, #20]	; (80077c8 <std+0x40>)
 80077b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077b6:	4b05      	ldr	r3, [pc, #20]	; (80077cc <std+0x44>)
 80077b8:	6224      	str	r4, [r4, #32]
 80077ba:	6323      	str	r3, [r4, #48]	; 0x30
 80077bc:	bd10      	pop	{r4, pc}
 80077be:	bf00      	nop
 80077c0:	08008221 	.word	0x08008221
 80077c4:	08008243 	.word	0x08008243
 80077c8:	0800827b 	.word	0x0800827b
 80077cc:	0800829f 	.word	0x0800829f

080077d0 <_cleanup_r>:
 80077d0:	4901      	ldr	r1, [pc, #4]	; (80077d8 <_cleanup_r+0x8>)
 80077d2:	f000 b8af 	b.w	8007934 <_fwalk_reent>
 80077d6:	bf00      	nop
 80077d8:	08007711 	.word	0x08007711

080077dc <__sfmoreglue>:
 80077dc:	b570      	push	{r4, r5, r6, lr}
 80077de:	2268      	movs	r2, #104	; 0x68
 80077e0:	1e4d      	subs	r5, r1, #1
 80077e2:	4355      	muls	r5, r2
 80077e4:	460e      	mov	r6, r1
 80077e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80077ea:	f7fe f8f5 	bl	80059d8 <_malloc_r>
 80077ee:	4604      	mov	r4, r0
 80077f0:	b140      	cbz	r0, 8007804 <__sfmoreglue+0x28>
 80077f2:	2100      	movs	r1, #0
 80077f4:	e9c0 1600 	strd	r1, r6, [r0]
 80077f8:	300c      	adds	r0, #12
 80077fa:	60a0      	str	r0, [r4, #8]
 80077fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007800:	f7fe f876 	bl	80058f0 <memset>
 8007804:	4620      	mov	r0, r4
 8007806:	bd70      	pop	{r4, r5, r6, pc}

08007808 <__sfp_lock_acquire>:
 8007808:	4801      	ldr	r0, [pc, #4]	; (8007810 <__sfp_lock_acquire+0x8>)
 800780a:	f000 b8b8 	b.w	800797e <__retarget_lock_acquire_recursive>
 800780e:	bf00      	nop
 8007810:	20000d81 	.word	0x20000d81

08007814 <__sfp_lock_release>:
 8007814:	4801      	ldr	r0, [pc, #4]	; (800781c <__sfp_lock_release+0x8>)
 8007816:	f000 b8b3 	b.w	8007980 <__retarget_lock_release_recursive>
 800781a:	bf00      	nop
 800781c:	20000d81 	.word	0x20000d81

08007820 <__sinit_lock_acquire>:
 8007820:	4801      	ldr	r0, [pc, #4]	; (8007828 <__sinit_lock_acquire+0x8>)
 8007822:	f000 b8ac 	b.w	800797e <__retarget_lock_acquire_recursive>
 8007826:	bf00      	nop
 8007828:	20000d82 	.word	0x20000d82

0800782c <__sinit_lock_release>:
 800782c:	4801      	ldr	r0, [pc, #4]	; (8007834 <__sinit_lock_release+0x8>)
 800782e:	f000 b8a7 	b.w	8007980 <__retarget_lock_release_recursive>
 8007832:	bf00      	nop
 8007834:	20000d82 	.word	0x20000d82

08007838 <__sinit>:
 8007838:	b510      	push	{r4, lr}
 800783a:	4604      	mov	r4, r0
 800783c:	f7ff fff0 	bl	8007820 <__sinit_lock_acquire>
 8007840:	69a3      	ldr	r3, [r4, #24]
 8007842:	b11b      	cbz	r3, 800784c <__sinit+0x14>
 8007844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007848:	f7ff bff0 	b.w	800782c <__sinit_lock_release>
 800784c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007850:	6523      	str	r3, [r4, #80]	; 0x50
 8007852:	4b13      	ldr	r3, [pc, #76]	; (80078a0 <__sinit+0x68>)
 8007854:	4a13      	ldr	r2, [pc, #76]	; (80078a4 <__sinit+0x6c>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	62a2      	str	r2, [r4, #40]	; 0x28
 800785a:	42a3      	cmp	r3, r4
 800785c:	bf04      	itt	eq
 800785e:	2301      	moveq	r3, #1
 8007860:	61a3      	streq	r3, [r4, #24]
 8007862:	4620      	mov	r0, r4
 8007864:	f000 f820 	bl	80078a8 <__sfp>
 8007868:	6060      	str	r0, [r4, #4]
 800786a:	4620      	mov	r0, r4
 800786c:	f000 f81c 	bl	80078a8 <__sfp>
 8007870:	60a0      	str	r0, [r4, #8]
 8007872:	4620      	mov	r0, r4
 8007874:	f000 f818 	bl	80078a8 <__sfp>
 8007878:	2200      	movs	r2, #0
 800787a:	60e0      	str	r0, [r4, #12]
 800787c:	2104      	movs	r1, #4
 800787e:	6860      	ldr	r0, [r4, #4]
 8007880:	f7ff ff82 	bl	8007788 <std>
 8007884:	68a0      	ldr	r0, [r4, #8]
 8007886:	2201      	movs	r2, #1
 8007888:	2109      	movs	r1, #9
 800788a:	f7ff ff7d 	bl	8007788 <std>
 800788e:	68e0      	ldr	r0, [r4, #12]
 8007890:	2202      	movs	r2, #2
 8007892:	2112      	movs	r1, #18
 8007894:	f7ff ff78 	bl	8007788 <std>
 8007898:	2301      	movs	r3, #1
 800789a:	61a3      	str	r3, [r4, #24]
 800789c:	e7d2      	b.n	8007844 <__sinit+0xc>
 800789e:	bf00      	nop
 80078a0:	08008a8c 	.word	0x08008a8c
 80078a4:	080077d1 	.word	0x080077d1

080078a8 <__sfp>:
 80078a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078aa:	4607      	mov	r7, r0
 80078ac:	f7ff ffac 	bl	8007808 <__sfp_lock_acquire>
 80078b0:	4b1e      	ldr	r3, [pc, #120]	; (800792c <__sfp+0x84>)
 80078b2:	681e      	ldr	r6, [r3, #0]
 80078b4:	69b3      	ldr	r3, [r6, #24]
 80078b6:	b913      	cbnz	r3, 80078be <__sfp+0x16>
 80078b8:	4630      	mov	r0, r6
 80078ba:	f7ff ffbd 	bl	8007838 <__sinit>
 80078be:	3648      	adds	r6, #72	; 0x48
 80078c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80078c4:	3b01      	subs	r3, #1
 80078c6:	d503      	bpl.n	80078d0 <__sfp+0x28>
 80078c8:	6833      	ldr	r3, [r6, #0]
 80078ca:	b30b      	cbz	r3, 8007910 <__sfp+0x68>
 80078cc:	6836      	ldr	r6, [r6, #0]
 80078ce:	e7f7      	b.n	80078c0 <__sfp+0x18>
 80078d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80078d4:	b9d5      	cbnz	r5, 800790c <__sfp+0x64>
 80078d6:	4b16      	ldr	r3, [pc, #88]	; (8007930 <__sfp+0x88>)
 80078d8:	60e3      	str	r3, [r4, #12]
 80078da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80078de:	6665      	str	r5, [r4, #100]	; 0x64
 80078e0:	f000 f84c 	bl	800797c <__retarget_lock_init_recursive>
 80078e4:	f7ff ff96 	bl	8007814 <__sfp_lock_release>
 80078e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80078ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80078f0:	6025      	str	r5, [r4, #0]
 80078f2:	61a5      	str	r5, [r4, #24]
 80078f4:	2208      	movs	r2, #8
 80078f6:	4629      	mov	r1, r5
 80078f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078fc:	f7fd fff8 	bl	80058f0 <memset>
 8007900:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007904:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007908:	4620      	mov	r0, r4
 800790a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800790c:	3468      	adds	r4, #104	; 0x68
 800790e:	e7d9      	b.n	80078c4 <__sfp+0x1c>
 8007910:	2104      	movs	r1, #4
 8007912:	4638      	mov	r0, r7
 8007914:	f7ff ff62 	bl	80077dc <__sfmoreglue>
 8007918:	4604      	mov	r4, r0
 800791a:	6030      	str	r0, [r6, #0]
 800791c:	2800      	cmp	r0, #0
 800791e:	d1d5      	bne.n	80078cc <__sfp+0x24>
 8007920:	f7ff ff78 	bl	8007814 <__sfp_lock_release>
 8007924:	230c      	movs	r3, #12
 8007926:	603b      	str	r3, [r7, #0]
 8007928:	e7ee      	b.n	8007908 <__sfp+0x60>
 800792a:	bf00      	nop
 800792c:	08008a8c 	.word	0x08008a8c
 8007930:	ffff0001 	.word	0xffff0001

08007934 <_fwalk_reent>:
 8007934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007938:	4606      	mov	r6, r0
 800793a:	4688      	mov	r8, r1
 800793c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007940:	2700      	movs	r7, #0
 8007942:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007946:	f1b9 0901 	subs.w	r9, r9, #1
 800794a:	d505      	bpl.n	8007958 <_fwalk_reent+0x24>
 800794c:	6824      	ldr	r4, [r4, #0]
 800794e:	2c00      	cmp	r4, #0
 8007950:	d1f7      	bne.n	8007942 <_fwalk_reent+0xe>
 8007952:	4638      	mov	r0, r7
 8007954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007958:	89ab      	ldrh	r3, [r5, #12]
 800795a:	2b01      	cmp	r3, #1
 800795c:	d907      	bls.n	800796e <_fwalk_reent+0x3a>
 800795e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007962:	3301      	adds	r3, #1
 8007964:	d003      	beq.n	800796e <_fwalk_reent+0x3a>
 8007966:	4629      	mov	r1, r5
 8007968:	4630      	mov	r0, r6
 800796a:	47c0      	blx	r8
 800796c:	4307      	orrs	r7, r0
 800796e:	3568      	adds	r5, #104	; 0x68
 8007970:	e7e9      	b.n	8007946 <_fwalk_reent+0x12>
	...

08007974 <_localeconv_r>:
 8007974:	4800      	ldr	r0, [pc, #0]	; (8007978 <_localeconv_r+0x4>)
 8007976:	4770      	bx	lr
 8007978:	20000160 	.word	0x20000160

0800797c <__retarget_lock_init_recursive>:
 800797c:	4770      	bx	lr

0800797e <__retarget_lock_acquire_recursive>:
 800797e:	4770      	bx	lr

08007980 <__retarget_lock_release_recursive>:
 8007980:	4770      	bx	lr

08007982 <__swhatbuf_r>:
 8007982:	b570      	push	{r4, r5, r6, lr}
 8007984:	460e      	mov	r6, r1
 8007986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800798a:	2900      	cmp	r1, #0
 800798c:	b096      	sub	sp, #88	; 0x58
 800798e:	4614      	mov	r4, r2
 8007990:	461d      	mov	r5, r3
 8007992:	da08      	bge.n	80079a6 <__swhatbuf_r+0x24>
 8007994:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	602a      	str	r2, [r5, #0]
 800799c:	061a      	lsls	r2, r3, #24
 800799e:	d410      	bmi.n	80079c2 <__swhatbuf_r+0x40>
 80079a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079a4:	e00e      	b.n	80079c4 <__swhatbuf_r+0x42>
 80079a6:	466a      	mov	r2, sp
 80079a8:	f000 fca0 	bl	80082ec <_fstat_r>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	dbf1      	blt.n	8007994 <__swhatbuf_r+0x12>
 80079b0:	9a01      	ldr	r2, [sp, #4]
 80079b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80079b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80079ba:	425a      	negs	r2, r3
 80079bc:	415a      	adcs	r2, r3
 80079be:	602a      	str	r2, [r5, #0]
 80079c0:	e7ee      	b.n	80079a0 <__swhatbuf_r+0x1e>
 80079c2:	2340      	movs	r3, #64	; 0x40
 80079c4:	2000      	movs	r0, #0
 80079c6:	6023      	str	r3, [r4, #0]
 80079c8:	b016      	add	sp, #88	; 0x58
 80079ca:	bd70      	pop	{r4, r5, r6, pc}

080079cc <__smakebuf_r>:
 80079cc:	898b      	ldrh	r3, [r1, #12]
 80079ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079d0:	079d      	lsls	r5, r3, #30
 80079d2:	4606      	mov	r6, r0
 80079d4:	460c      	mov	r4, r1
 80079d6:	d507      	bpl.n	80079e8 <__smakebuf_r+0x1c>
 80079d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079dc:	6023      	str	r3, [r4, #0]
 80079de:	6123      	str	r3, [r4, #16]
 80079e0:	2301      	movs	r3, #1
 80079e2:	6163      	str	r3, [r4, #20]
 80079e4:	b002      	add	sp, #8
 80079e6:	bd70      	pop	{r4, r5, r6, pc}
 80079e8:	ab01      	add	r3, sp, #4
 80079ea:	466a      	mov	r2, sp
 80079ec:	f7ff ffc9 	bl	8007982 <__swhatbuf_r>
 80079f0:	9900      	ldr	r1, [sp, #0]
 80079f2:	4605      	mov	r5, r0
 80079f4:	4630      	mov	r0, r6
 80079f6:	f7fd ffef 	bl	80059d8 <_malloc_r>
 80079fa:	b948      	cbnz	r0, 8007a10 <__smakebuf_r+0x44>
 80079fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a00:	059a      	lsls	r2, r3, #22
 8007a02:	d4ef      	bmi.n	80079e4 <__smakebuf_r+0x18>
 8007a04:	f023 0303 	bic.w	r3, r3, #3
 8007a08:	f043 0302 	orr.w	r3, r3, #2
 8007a0c:	81a3      	strh	r3, [r4, #12]
 8007a0e:	e7e3      	b.n	80079d8 <__smakebuf_r+0xc>
 8007a10:	4b0d      	ldr	r3, [pc, #52]	; (8007a48 <__smakebuf_r+0x7c>)
 8007a12:	62b3      	str	r3, [r6, #40]	; 0x28
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	6020      	str	r0, [r4, #0]
 8007a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a1c:	81a3      	strh	r3, [r4, #12]
 8007a1e:	9b00      	ldr	r3, [sp, #0]
 8007a20:	6163      	str	r3, [r4, #20]
 8007a22:	9b01      	ldr	r3, [sp, #4]
 8007a24:	6120      	str	r0, [r4, #16]
 8007a26:	b15b      	cbz	r3, 8007a40 <__smakebuf_r+0x74>
 8007a28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	f000 fc6f 	bl	8008310 <_isatty_r>
 8007a32:	b128      	cbz	r0, 8007a40 <__smakebuf_r+0x74>
 8007a34:	89a3      	ldrh	r3, [r4, #12]
 8007a36:	f023 0303 	bic.w	r3, r3, #3
 8007a3a:	f043 0301 	orr.w	r3, r3, #1
 8007a3e:	81a3      	strh	r3, [r4, #12]
 8007a40:	89a0      	ldrh	r0, [r4, #12]
 8007a42:	4305      	orrs	r5, r0
 8007a44:	81a5      	strh	r5, [r4, #12]
 8007a46:	e7cd      	b.n	80079e4 <__smakebuf_r+0x18>
 8007a48:	080077d1 	.word	0x080077d1

08007a4c <__malloc_lock>:
 8007a4c:	4801      	ldr	r0, [pc, #4]	; (8007a54 <__malloc_lock+0x8>)
 8007a4e:	f7ff bf96 	b.w	800797e <__retarget_lock_acquire_recursive>
 8007a52:	bf00      	nop
 8007a54:	20000d80 	.word	0x20000d80

08007a58 <__malloc_unlock>:
 8007a58:	4801      	ldr	r0, [pc, #4]	; (8007a60 <__malloc_unlock+0x8>)
 8007a5a:	f7ff bf91 	b.w	8007980 <__retarget_lock_release_recursive>
 8007a5e:	bf00      	nop
 8007a60:	20000d80 	.word	0x20000d80

08007a64 <_Balloc>:
 8007a64:	b570      	push	{r4, r5, r6, lr}
 8007a66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a68:	4604      	mov	r4, r0
 8007a6a:	460d      	mov	r5, r1
 8007a6c:	b976      	cbnz	r6, 8007a8c <_Balloc+0x28>
 8007a6e:	2010      	movs	r0, #16
 8007a70:	f7fd ff28 	bl	80058c4 <malloc>
 8007a74:	4602      	mov	r2, r0
 8007a76:	6260      	str	r0, [r4, #36]	; 0x24
 8007a78:	b920      	cbnz	r0, 8007a84 <_Balloc+0x20>
 8007a7a:	4b18      	ldr	r3, [pc, #96]	; (8007adc <_Balloc+0x78>)
 8007a7c:	4818      	ldr	r0, [pc, #96]	; (8007ae0 <_Balloc+0x7c>)
 8007a7e:	2166      	movs	r1, #102	; 0x66
 8007a80:	f7fd fec6 	bl	8005810 <__assert_func>
 8007a84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a88:	6006      	str	r6, [r0, #0]
 8007a8a:	60c6      	str	r6, [r0, #12]
 8007a8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007a8e:	68f3      	ldr	r3, [r6, #12]
 8007a90:	b183      	cbz	r3, 8007ab4 <_Balloc+0x50>
 8007a92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a9a:	b9b8      	cbnz	r0, 8007acc <_Balloc+0x68>
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	fa01 f605 	lsl.w	r6, r1, r5
 8007aa2:	1d72      	adds	r2, r6, #5
 8007aa4:	0092      	lsls	r2, r2, #2
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	f000 fb60 	bl	800816c <_calloc_r>
 8007aac:	b160      	cbz	r0, 8007ac8 <_Balloc+0x64>
 8007aae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ab2:	e00e      	b.n	8007ad2 <_Balloc+0x6e>
 8007ab4:	2221      	movs	r2, #33	; 0x21
 8007ab6:	2104      	movs	r1, #4
 8007ab8:	4620      	mov	r0, r4
 8007aba:	f000 fb57 	bl	800816c <_calloc_r>
 8007abe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ac0:	60f0      	str	r0, [r6, #12]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1e4      	bne.n	8007a92 <_Balloc+0x2e>
 8007ac8:	2000      	movs	r0, #0
 8007aca:	bd70      	pop	{r4, r5, r6, pc}
 8007acc:	6802      	ldr	r2, [r0, #0]
 8007ace:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ad8:	e7f7      	b.n	8007aca <_Balloc+0x66>
 8007ada:	bf00      	nop
 8007adc:	08008ae2 	.word	0x08008ae2
 8007ae0:	08008bc8 	.word	0x08008bc8

08007ae4 <_Bfree>:
 8007ae4:	b570      	push	{r4, r5, r6, lr}
 8007ae6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ae8:	4605      	mov	r5, r0
 8007aea:	460c      	mov	r4, r1
 8007aec:	b976      	cbnz	r6, 8007b0c <_Bfree+0x28>
 8007aee:	2010      	movs	r0, #16
 8007af0:	f7fd fee8 	bl	80058c4 <malloc>
 8007af4:	4602      	mov	r2, r0
 8007af6:	6268      	str	r0, [r5, #36]	; 0x24
 8007af8:	b920      	cbnz	r0, 8007b04 <_Bfree+0x20>
 8007afa:	4b09      	ldr	r3, [pc, #36]	; (8007b20 <_Bfree+0x3c>)
 8007afc:	4809      	ldr	r0, [pc, #36]	; (8007b24 <_Bfree+0x40>)
 8007afe:	218a      	movs	r1, #138	; 0x8a
 8007b00:	f7fd fe86 	bl	8005810 <__assert_func>
 8007b04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b08:	6006      	str	r6, [r0, #0]
 8007b0a:	60c6      	str	r6, [r0, #12]
 8007b0c:	b13c      	cbz	r4, 8007b1e <_Bfree+0x3a>
 8007b0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b10:	6862      	ldr	r2, [r4, #4]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b18:	6021      	str	r1, [r4, #0]
 8007b1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b1e:	bd70      	pop	{r4, r5, r6, pc}
 8007b20:	08008ae2 	.word	0x08008ae2
 8007b24:	08008bc8 	.word	0x08008bc8

08007b28 <__multadd>:
 8007b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b2c:	690d      	ldr	r5, [r1, #16]
 8007b2e:	4607      	mov	r7, r0
 8007b30:	460c      	mov	r4, r1
 8007b32:	461e      	mov	r6, r3
 8007b34:	f101 0c14 	add.w	ip, r1, #20
 8007b38:	2000      	movs	r0, #0
 8007b3a:	f8dc 3000 	ldr.w	r3, [ip]
 8007b3e:	b299      	uxth	r1, r3
 8007b40:	fb02 6101 	mla	r1, r2, r1, r6
 8007b44:	0c1e      	lsrs	r6, r3, #16
 8007b46:	0c0b      	lsrs	r3, r1, #16
 8007b48:	fb02 3306 	mla	r3, r2, r6, r3
 8007b4c:	b289      	uxth	r1, r1
 8007b4e:	3001      	adds	r0, #1
 8007b50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b54:	4285      	cmp	r5, r0
 8007b56:	f84c 1b04 	str.w	r1, [ip], #4
 8007b5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b5e:	dcec      	bgt.n	8007b3a <__multadd+0x12>
 8007b60:	b30e      	cbz	r6, 8007ba6 <__multadd+0x7e>
 8007b62:	68a3      	ldr	r3, [r4, #8]
 8007b64:	42ab      	cmp	r3, r5
 8007b66:	dc19      	bgt.n	8007b9c <__multadd+0x74>
 8007b68:	6861      	ldr	r1, [r4, #4]
 8007b6a:	4638      	mov	r0, r7
 8007b6c:	3101      	adds	r1, #1
 8007b6e:	f7ff ff79 	bl	8007a64 <_Balloc>
 8007b72:	4680      	mov	r8, r0
 8007b74:	b928      	cbnz	r0, 8007b82 <__multadd+0x5a>
 8007b76:	4602      	mov	r2, r0
 8007b78:	4b0c      	ldr	r3, [pc, #48]	; (8007bac <__multadd+0x84>)
 8007b7a:	480d      	ldr	r0, [pc, #52]	; (8007bb0 <__multadd+0x88>)
 8007b7c:	21b5      	movs	r1, #181	; 0xb5
 8007b7e:	f7fd fe47 	bl	8005810 <__assert_func>
 8007b82:	6922      	ldr	r2, [r4, #16]
 8007b84:	3202      	adds	r2, #2
 8007b86:	f104 010c 	add.w	r1, r4, #12
 8007b8a:	0092      	lsls	r2, r2, #2
 8007b8c:	300c      	adds	r0, #12
 8007b8e:	f7fd fea1 	bl	80058d4 <memcpy>
 8007b92:	4621      	mov	r1, r4
 8007b94:	4638      	mov	r0, r7
 8007b96:	f7ff ffa5 	bl	8007ae4 <_Bfree>
 8007b9a:	4644      	mov	r4, r8
 8007b9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ba0:	3501      	adds	r5, #1
 8007ba2:	615e      	str	r6, [r3, #20]
 8007ba4:	6125      	str	r5, [r4, #16]
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bac:	08008b54 	.word	0x08008b54
 8007bb0:	08008bc8 	.word	0x08008bc8

08007bb4 <__hi0bits>:
 8007bb4:	0c03      	lsrs	r3, r0, #16
 8007bb6:	041b      	lsls	r3, r3, #16
 8007bb8:	b9d3      	cbnz	r3, 8007bf0 <__hi0bits+0x3c>
 8007bba:	0400      	lsls	r0, r0, #16
 8007bbc:	2310      	movs	r3, #16
 8007bbe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007bc2:	bf04      	itt	eq
 8007bc4:	0200      	lsleq	r0, r0, #8
 8007bc6:	3308      	addeq	r3, #8
 8007bc8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007bcc:	bf04      	itt	eq
 8007bce:	0100      	lsleq	r0, r0, #4
 8007bd0:	3304      	addeq	r3, #4
 8007bd2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007bd6:	bf04      	itt	eq
 8007bd8:	0080      	lsleq	r0, r0, #2
 8007bda:	3302      	addeq	r3, #2
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	db05      	blt.n	8007bec <__hi0bits+0x38>
 8007be0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007be4:	f103 0301 	add.w	r3, r3, #1
 8007be8:	bf08      	it	eq
 8007bea:	2320      	moveq	r3, #32
 8007bec:	4618      	mov	r0, r3
 8007bee:	4770      	bx	lr
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	e7e4      	b.n	8007bbe <__hi0bits+0xa>

08007bf4 <__lo0bits>:
 8007bf4:	6803      	ldr	r3, [r0, #0]
 8007bf6:	f013 0207 	ands.w	r2, r3, #7
 8007bfa:	4601      	mov	r1, r0
 8007bfc:	d00b      	beq.n	8007c16 <__lo0bits+0x22>
 8007bfe:	07da      	lsls	r2, r3, #31
 8007c00:	d423      	bmi.n	8007c4a <__lo0bits+0x56>
 8007c02:	0798      	lsls	r0, r3, #30
 8007c04:	bf49      	itett	mi
 8007c06:	085b      	lsrmi	r3, r3, #1
 8007c08:	089b      	lsrpl	r3, r3, #2
 8007c0a:	2001      	movmi	r0, #1
 8007c0c:	600b      	strmi	r3, [r1, #0]
 8007c0e:	bf5c      	itt	pl
 8007c10:	600b      	strpl	r3, [r1, #0]
 8007c12:	2002      	movpl	r0, #2
 8007c14:	4770      	bx	lr
 8007c16:	b298      	uxth	r0, r3
 8007c18:	b9a8      	cbnz	r0, 8007c46 <__lo0bits+0x52>
 8007c1a:	0c1b      	lsrs	r3, r3, #16
 8007c1c:	2010      	movs	r0, #16
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	b90a      	cbnz	r2, 8007c26 <__lo0bits+0x32>
 8007c22:	3008      	adds	r0, #8
 8007c24:	0a1b      	lsrs	r3, r3, #8
 8007c26:	071a      	lsls	r2, r3, #28
 8007c28:	bf04      	itt	eq
 8007c2a:	091b      	lsreq	r3, r3, #4
 8007c2c:	3004      	addeq	r0, #4
 8007c2e:	079a      	lsls	r2, r3, #30
 8007c30:	bf04      	itt	eq
 8007c32:	089b      	lsreq	r3, r3, #2
 8007c34:	3002      	addeq	r0, #2
 8007c36:	07da      	lsls	r2, r3, #31
 8007c38:	d403      	bmi.n	8007c42 <__lo0bits+0x4e>
 8007c3a:	085b      	lsrs	r3, r3, #1
 8007c3c:	f100 0001 	add.w	r0, r0, #1
 8007c40:	d005      	beq.n	8007c4e <__lo0bits+0x5a>
 8007c42:	600b      	str	r3, [r1, #0]
 8007c44:	4770      	bx	lr
 8007c46:	4610      	mov	r0, r2
 8007c48:	e7e9      	b.n	8007c1e <__lo0bits+0x2a>
 8007c4a:	2000      	movs	r0, #0
 8007c4c:	4770      	bx	lr
 8007c4e:	2020      	movs	r0, #32
 8007c50:	4770      	bx	lr
	...

08007c54 <__i2b>:
 8007c54:	b510      	push	{r4, lr}
 8007c56:	460c      	mov	r4, r1
 8007c58:	2101      	movs	r1, #1
 8007c5a:	f7ff ff03 	bl	8007a64 <_Balloc>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	b928      	cbnz	r0, 8007c6e <__i2b+0x1a>
 8007c62:	4b05      	ldr	r3, [pc, #20]	; (8007c78 <__i2b+0x24>)
 8007c64:	4805      	ldr	r0, [pc, #20]	; (8007c7c <__i2b+0x28>)
 8007c66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007c6a:	f7fd fdd1 	bl	8005810 <__assert_func>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	6144      	str	r4, [r0, #20]
 8007c72:	6103      	str	r3, [r0, #16]
 8007c74:	bd10      	pop	{r4, pc}
 8007c76:	bf00      	nop
 8007c78:	08008b54 	.word	0x08008b54
 8007c7c:	08008bc8 	.word	0x08008bc8

08007c80 <__multiply>:
 8007c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c84:	4691      	mov	r9, r2
 8007c86:	690a      	ldr	r2, [r1, #16]
 8007c88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	bfb8      	it	lt
 8007c90:	460b      	movlt	r3, r1
 8007c92:	460c      	mov	r4, r1
 8007c94:	bfbc      	itt	lt
 8007c96:	464c      	movlt	r4, r9
 8007c98:	4699      	movlt	r9, r3
 8007c9a:	6927      	ldr	r7, [r4, #16]
 8007c9c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007ca0:	68a3      	ldr	r3, [r4, #8]
 8007ca2:	6861      	ldr	r1, [r4, #4]
 8007ca4:	eb07 060a 	add.w	r6, r7, sl
 8007ca8:	42b3      	cmp	r3, r6
 8007caa:	b085      	sub	sp, #20
 8007cac:	bfb8      	it	lt
 8007cae:	3101      	addlt	r1, #1
 8007cb0:	f7ff fed8 	bl	8007a64 <_Balloc>
 8007cb4:	b930      	cbnz	r0, 8007cc4 <__multiply+0x44>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	4b44      	ldr	r3, [pc, #272]	; (8007dcc <__multiply+0x14c>)
 8007cba:	4845      	ldr	r0, [pc, #276]	; (8007dd0 <__multiply+0x150>)
 8007cbc:	f240 115d 	movw	r1, #349	; 0x15d
 8007cc0:	f7fd fda6 	bl	8005810 <__assert_func>
 8007cc4:	f100 0514 	add.w	r5, r0, #20
 8007cc8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ccc:	462b      	mov	r3, r5
 8007cce:	2200      	movs	r2, #0
 8007cd0:	4543      	cmp	r3, r8
 8007cd2:	d321      	bcc.n	8007d18 <__multiply+0x98>
 8007cd4:	f104 0314 	add.w	r3, r4, #20
 8007cd8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007cdc:	f109 0314 	add.w	r3, r9, #20
 8007ce0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007ce4:	9202      	str	r2, [sp, #8]
 8007ce6:	1b3a      	subs	r2, r7, r4
 8007ce8:	3a15      	subs	r2, #21
 8007cea:	f022 0203 	bic.w	r2, r2, #3
 8007cee:	3204      	adds	r2, #4
 8007cf0:	f104 0115 	add.w	r1, r4, #21
 8007cf4:	428f      	cmp	r7, r1
 8007cf6:	bf38      	it	cc
 8007cf8:	2204      	movcc	r2, #4
 8007cfa:	9201      	str	r2, [sp, #4]
 8007cfc:	9a02      	ldr	r2, [sp, #8]
 8007cfe:	9303      	str	r3, [sp, #12]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d80c      	bhi.n	8007d1e <__multiply+0x9e>
 8007d04:	2e00      	cmp	r6, #0
 8007d06:	dd03      	ble.n	8007d10 <__multiply+0x90>
 8007d08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d05a      	beq.n	8007dc6 <__multiply+0x146>
 8007d10:	6106      	str	r6, [r0, #16]
 8007d12:	b005      	add	sp, #20
 8007d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d18:	f843 2b04 	str.w	r2, [r3], #4
 8007d1c:	e7d8      	b.n	8007cd0 <__multiply+0x50>
 8007d1e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d22:	f1ba 0f00 	cmp.w	sl, #0
 8007d26:	d024      	beq.n	8007d72 <__multiply+0xf2>
 8007d28:	f104 0e14 	add.w	lr, r4, #20
 8007d2c:	46a9      	mov	r9, r5
 8007d2e:	f04f 0c00 	mov.w	ip, #0
 8007d32:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007d36:	f8d9 1000 	ldr.w	r1, [r9]
 8007d3a:	fa1f fb82 	uxth.w	fp, r2
 8007d3e:	b289      	uxth	r1, r1
 8007d40:	fb0a 110b 	mla	r1, sl, fp, r1
 8007d44:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007d48:	f8d9 2000 	ldr.w	r2, [r9]
 8007d4c:	4461      	add	r1, ip
 8007d4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d52:	fb0a c20b 	mla	r2, sl, fp, ip
 8007d56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007d5a:	b289      	uxth	r1, r1
 8007d5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d60:	4577      	cmp	r7, lr
 8007d62:	f849 1b04 	str.w	r1, [r9], #4
 8007d66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d6a:	d8e2      	bhi.n	8007d32 <__multiply+0xb2>
 8007d6c:	9a01      	ldr	r2, [sp, #4]
 8007d6e:	f845 c002 	str.w	ip, [r5, r2]
 8007d72:	9a03      	ldr	r2, [sp, #12]
 8007d74:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	f1b9 0f00 	cmp.w	r9, #0
 8007d7e:	d020      	beq.n	8007dc2 <__multiply+0x142>
 8007d80:	6829      	ldr	r1, [r5, #0]
 8007d82:	f104 0c14 	add.w	ip, r4, #20
 8007d86:	46ae      	mov	lr, r5
 8007d88:	f04f 0a00 	mov.w	sl, #0
 8007d8c:	f8bc b000 	ldrh.w	fp, [ip]
 8007d90:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007d94:	fb09 220b 	mla	r2, r9, fp, r2
 8007d98:	4492      	add	sl, r2
 8007d9a:	b289      	uxth	r1, r1
 8007d9c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007da0:	f84e 1b04 	str.w	r1, [lr], #4
 8007da4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007da8:	f8be 1000 	ldrh.w	r1, [lr]
 8007dac:	0c12      	lsrs	r2, r2, #16
 8007dae:	fb09 1102 	mla	r1, r9, r2, r1
 8007db2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007db6:	4567      	cmp	r7, ip
 8007db8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007dbc:	d8e6      	bhi.n	8007d8c <__multiply+0x10c>
 8007dbe:	9a01      	ldr	r2, [sp, #4]
 8007dc0:	50a9      	str	r1, [r5, r2]
 8007dc2:	3504      	adds	r5, #4
 8007dc4:	e79a      	b.n	8007cfc <__multiply+0x7c>
 8007dc6:	3e01      	subs	r6, #1
 8007dc8:	e79c      	b.n	8007d04 <__multiply+0x84>
 8007dca:	bf00      	nop
 8007dcc:	08008b54 	.word	0x08008b54
 8007dd0:	08008bc8 	.word	0x08008bc8

08007dd4 <__pow5mult>:
 8007dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dd8:	4615      	mov	r5, r2
 8007dda:	f012 0203 	ands.w	r2, r2, #3
 8007dde:	4606      	mov	r6, r0
 8007de0:	460f      	mov	r7, r1
 8007de2:	d007      	beq.n	8007df4 <__pow5mult+0x20>
 8007de4:	4c25      	ldr	r4, [pc, #148]	; (8007e7c <__pow5mult+0xa8>)
 8007de6:	3a01      	subs	r2, #1
 8007de8:	2300      	movs	r3, #0
 8007dea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007dee:	f7ff fe9b 	bl	8007b28 <__multadd>
 8007df2:	4607      	mov	r7, r0
 8007df4:	10ad      	asrs	r5, r5, #2
 8007df6:	d03d      	beq.n	8007e74 <__pow5mult+0xa0>
 8007df8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007dfa:	b97c      	cbnz	r4, 8007e1c <__pow5mult+0x48>
 8007dfc:	2010      	movs	r0, #16
 8007dfe:	f7fd fd61 	bl	80058c4 <malloc>
 8007e02:	4602      	mov	r2, r0
 8007e04:	6270      	str	r0, [r6, #36]	; 0x24
 8007e06:	b928      	cbnz	r0, 8007e14 <__pow5mult+0x40>
 8007e08:	4b1d      	ldr	r3, [pc, #116]	; (8007e80 <__pow5mult+0xac>)
 8007e0a:	481e      	ldr	r0, [pc, #120]	; (8007e84 <__pow5mult+0xb0>)
 8007e0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007e10:	f7fd fcfe 	bl	8005810 <__assert_func>
 8007e14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e18:	6004      	str	r4, [r0, #0]
 8007e1a:	60c4      	str	r4, [r0, #12]
 8007e1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e24:	b94c      	cbnz	r4, 8007e3a <__pow5mult+0x66>
 8007e26:	f240 2171 	movw	r1, #625	; 0x271
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	f7ff ff12 	bl	8007c54 <__i2b>
 8007e30:	2300      	movs	r3, #0
 8007e32:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e36:	4604      	mov	r4, r0
 8007e38:	6003      	str	r3, [r0, #0]
 8007e3a:	f04f 0900 	mov.w	r9, #0
 8007e3e:	07eb      	lsls	r3, r5, #31
 8007e40:	d50a      	bpl.n	8007e58 <__pow5mult+0x84>
 8007e42:	4639      	mov	r1, r7
 8007e44:	4622      	mov	r2, r4
 8007e46:	4630      	mov	r0, r6
 8007e48:	f7ff ff1a 	bl	8007c80 <__multiply>
 8007e4c:	4639      	mov	r1, r7
 8007e4e:	4680      	mov	r8, r0
 8007e50:	4630      	mov	r0, r6
 8007e52:	f7ff fe47 	bl	8007ae4 <_Bfree>
 8007e56:	4647      	mov	r7, r8
 8007e58:	106d      	asrs	r5, r5, #1
 8007e5a:	d00b      	beq.n	8007e74 <__pow5mult+0xa0>
 8007e5c:	6820      	ldr	r0, [r4, #0]
 8007e5e:	b938      	cbnz	r0, 8007e70 <__pow5mult+0x9c>
 8007e60:	4622      	mov	r2, r4
 8007e62:	4621      	mov	r1, r4
 8007e64:	4630      	mov	r0, r6
 8007e66:	f7ff ff0b 	bl	8007c80 <__multiply>
 8007e6a:	6020      	str	r0, [r4, #0]
 8007e6c:	f8c0 9000 	str.w	r9, [r0]
 8007e70:	4604      	mov	r4, r0
 8007e72:	e7e4      	b.n	8007e3e <__pow5mult+0x6a>
 8007e74:	4638      	mov	r0, r7
 8007e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e7a:	bf00      	nop
 8007e7c:	08008d18 	.word	0x08008d18
 8007e80:	08008ae2 	.word	0x08008ae2
 8007e84:	08008bc8 	.word	0x08008bc8

08007e88 <__lshift>:
 8007e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e8c:	460c      	mov	r4, r1
 8007e8e:	6849      	ldr	r1, [r1, #4]
 8007e90:	6923      	ldr	r3, [r4, #16]
 8007e92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e96:	68a3      	ldr	r3, [r4, #8]
 8007e98:	4607      	mov	r7, r0
 8007e9a:	4691      	mov	r9, r2
 8007e9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ea0:	f108 0601 	add.w	r6, r8, #1
 8007ea4:	42b3      	cmp	r3, r6
 8007ea6:	db0b      	blt.n	8007ec0 <__lshift+0x38>
 8007ea8:	4638      	mov	r0, r7
 8007eaa:	f7ff fddb 	bl	8007a64 <_Balloc>
 8007eae:	4605      	mov	r5, r0
 8007eb0:	b948      	cbnz	r0, 8007ec6 <__lshift+0x3e>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	4b2a      	ldr	r3, [pc, #168]	; (8007f60 <__lshift+0xd8>)
 8007eb6:	482b      	ldr	r0, [pc, #172]	; (8007f64 <__lshift+0xdc>)
 8007eb8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007ebc:	f7fd fca8 	bl	8005810 <__assert_func>
 8007ec0:	3101      	adds	r1, #1
 8007ec2:	005b      	lsls	r3, r3, #1
 8007ec4:	e7ee      	b.n	8007ea4 <__lshift+0x1c>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	f100 0114 	add.w	r1, r0, #20
 8007ecc:	f100 0210 	add.w	r2, r0, #16
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	4553      	cmp	r3, sl
 8007ed4:	db37      	blt.n	8007f46 <__lshift+0xbe>
 8007ed6:	6920      	ldr	r0, [r4, #16]
 8007ed8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007edc:	f104 0314 	add.w	r3, r4, #20
 8007ee0:	f019 091f 	ands.w	r9, r9, #31
 8007ee4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ee8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007eec:	d02f      	beq.n	8007f4e <__lshift+0xc6>
 8007eee:	f1c9 0e20 	rsb	lr, r9, #32
 8007ef2:	468a      	mov	sl, r1
 8007ef4:	f04f 0c00 	mov.w	ip, #0
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	fa02 f209 	lsl.w	r2, r2, r9
 8007efe:	ea42 020c 	orr.w	r2, r2, ip
 8007f02:	f84a 2b04 	str.w	r2, [sl], #4
 8007f06:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f0a:	4298      	cmp	r0, r3
 8007f0c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007f10:	d8f2      	bhi.n	8007ef8 <__lshift+0x70>
 8007f12:	1b03      	subs	r3, r0, r4
 8007f14:	3b15      	subs	r3, #21
 8007f16:	f023 0303 	bic.w	r3, r3, #3
 8007f1a:	3304      	adds	r3, #4
 8007f1c:	f104 0215 	add.w	r2, r4, #21
 8007f20:	4290      	cmp	r0, r2
 8007f22:	bf38      	it	cc
 8007f24:	2304      	movcc	r3, #4
 8007f26:	f841 c003 	str.w	ip, [r1, r3]
 8007f2a:	f1bc 0f00 	cmp.w	ip, #0
 8007f2e:	d001      	beq.n	8007f34 <__lshift+0xac>
 8007f30:	f108 0602 	add.w	r6, r8, #2
 8007f34:	3e01      	subs	r6, #1
 8007f36:	4638      	mov	r0, r7
 8007f38:	612e      	str	r6, [r5, #16]
 8007f3a:	4621      	mov	r1, r4
 8007f3c:	f7ff fdd2 	bl	8007ae4 <_Bfree>
 8007f40:	4628      	mov	r0, r5
 8007f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f46:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	e7c1      	b.n	8007ed2 <__lshift+0x4a>
 8007f4e:	3904      	subs	r1, #4
 8007f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f54:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f58:	4298      	cmp	r0, r3
 8007f5a:	d8f9      	bhi.n	8007f50 <__lshift+0xc8>
 8007f5c:	e7ea      	b.n	8007f34 <__lshift+0xac>
 8007f5e:	bf00      	nop
 8007f60:	08008b54 	.word	0x08008b54
 8007f64:	08008bc8 	.word	0x08008bc8

08007f68 <__mcmp>:
 8007f68:	b530      	push	{r4, r5, lr}
 8007f6a:	6902      	ldr	r2, [r0, #16]
 8007f6c:	690c      	ldr	r4, [r1, #16]
 8007f6e:	1b12      	subs	r2, r2, r4
 8007f70:	d10e      	bne.n	8007f90 <__mcmp+0x28>
 8007f72:	f100 0314 	add.w	r3, r0, #20
 8007f76:	3114      	adds	r1, #20
 8007f78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007f7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007f80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007f84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007f88:	42a5      	cmp	r5, r4
 8007f8a:	d003      	beq.n	8007f94 <__mcmp+0x2c>
 8007f8c:	d305      	bcc.n	8007f9a <__mcmp+0x32>
 8007f8e:	2201      	movs	r2, #1
 8007f90:	4610      	mov	r0, r2
 8007f92:	bd30      	pop	{r4, r5, pc}
 8007f94:	4283      	cmp	r3, r0
 8007f96:	d3f3      	bcc.n	8007f80 <__mcmp+0x18>
 8007f98:	e7fa      	b.n	8007f90 <__mcmp+0x28>
 8007f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f9e:	e7f7      	b.n	8007f90 <__mcmp+0x28>

08007fa0 <__mdiff>:
 8007fa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa4:	460c      	mov	r4, r1
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	4611      	mov	r1, r2
 8007faa:	4620      	mov	r0, r4
 8007fac:	4690      	mov	r8, r2
 8007fae:	f7ff ffdb 	bl	8007f68 <__mcmp>
 8007fb2:	1e05      	subs	r5, r0, #0
 8007fb4:	d110      	bne.n	8007fd8 <__mdiff+0x38>
 8007fb6:	4629      	mov	r1, r5
 8007fb8:	4630      	mov	r0, r6
 8007fba:	f7ff fd53 	bl	8007a64 <_Balloc>
 8007fbe:	b930      	cbnz	r0, 8007fce <__mdiff+0x2e>
 8007fc0:	4b3a      	ldr	r3, [pc, #232]	; (80080ac <__mdiff+0x10c>)
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	f240 2132 	movw	r1, #562	; 0x232
 8007fc8:	4839      	ldr	r0, [pc, #228]	; (80080b0 <__mdiff+0x110>)
 8007fca:	f7fd fc21 	bl	8005810 <__assert_func>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007fd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd8:	bfa4      	itt	ge
 8007fda:	4643      	movge	r3, r8
 8007fdc:	46a0      	movge	r8, r4
 8007fde:	4630      	mov	r0, r6
 8007fe0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007fe4:	bfa6      	itte	ge
 8007fe6:	461c      	movge	r4, r3
 8007fe8:	2500      	movge	r5, #0
 8007fea:	2501      	movlt	r5, #1
 8007fec:	f7ff fd3a 	bl	8007a64 <_Balloc>
 8007ff0:	b920      	cbnz	r0, 8007ffc <__mdiff+0x5c>
 8007ff2:	4b2e      	ldr	r3, [pc, #184]	; (80080ac <__mdiff+0x10c>)
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007ffa:	e7e5      	b.n	8007fc8 <__mdiff+0x28>
 8007ffc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008000:	6926      	ldr	r6, [r4, #16]
 8008002:	60c5      	str	r5, [r0, #12]
 8008004:	f104 0914 	add.w	r9, r4, #20
 8008008:	f108 0514 	add.w	r5, r8, #20
 800800c:	f100 0e14 	add.w	lr, r0, #20
 8008010:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008014:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008018:	f108 0210 	add.w	r2, r8, #16
 800801c:	46f2      	mov	sl, lr
 800801e:	2100      	movs	r1, #0
 8008020:	f859 3b04 	ldr.w	r3, [r9], #4
 8008024:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008028:	fa1f f883 	uxth.w	r8, r3
 800802c:	fa11 f18b 	uxtah	r1, r1, fp
 8008030:	0c1b      	lsrs	r3, r3, #16
 8008032:	eba1 0808 	sub.w	r8, r1, r8
 8008036:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800803a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800803e:	fa1f f888 	uxth.w	r8, r8
 8008042:	1419      	asrs	r1, r3, #16
 8008044:	454e      	cmp	r6, r9
 8008046:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800804a:	f84a 3b04 	str.w	r3, [sl], #4
 800804e:	d8e7      	bhi.n	8008020 <__mdiff+0x80>
 8008050:	1b33      	subs	r3, r6, r4
 8008052:	3b15      	subs	r3, #21
 8008054:	f023 0303 	bic.w	r3, r3, #3
 8008058:	3304      	adds	r3, #4
 800805a:	3415      	adds	r4, #21
 800805c:	42a6      	cmp	r6, r4
 800805e:	bf38      	it	cc
 8008060:	2304      	movcc	r3, #4
 8008062:	441d      	add	r5, r3
 8008064:	4473      	add	r3, lr
 8008066:	469e      	mov	lr, r3
 8008068:	462e      	mov	r6, r5
 800806a:	4566      	cmp	r6, ip
 800806c:	d30e      	bcc.n	800808c <__mdiff+0xec>
 800806e:	f10c 0203 	add.w	r2, ip, #3
 8008072:	1b52      	subs	r2, r2, r5
 8008074:	f022 0203 	bic.w	r2, r2, #3
 8008078:	3d03      	subs	r5, #3
 800807a:	45ac      	cmp	ip, r5
 800807c:	bf38      	it	cc
 800807e:	2200      	movcc	r2, #0
 8008080:	441a      	add	r2, r3
 8008082:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008086:	b17b      	cbz	r3, 80080a8 <__mdiff+0x108>
 8008088:	6107      	str	r7, [r0, #16]
 800808a:	e7a3      	b.n	8007fd4 <__mdiff+0x34>
 800808c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008090:	fa11 f288 	uxtah	r2, r1, r8
 8008094:	1414      	asrs	r4, r2, #16
 8008096:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800809a:	b292      	uxth	r2, r2
 800809c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80080a0:	f84e 2b04 	str.w	r2, [lr], #4
 80080a4:	1421      	asrs	r1, r4, #16
 80080a6:	e7e0      	b.n	800806a <__mdiff+0xca>
 80080a8:	3f01      	subs	r7, #1
 80080aa:	e7ea      	b.n	8008082 <__mdiff+0xe2>
 80080ac:	08008b54 	.word	0x08008b54
 80080b0:	08008bc8 	.word	0x08008bc8

080080b4 <__d2b>:
 80080b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80080b8:	4689      	mov	r9, r1
 80080ba:	2101      	movs	r1, #1
 80080bc:	ec57 6b10 	vmov	r6, r7, d0
 80080c0:	4690      	mov	r8, r2
 80080c2:	f7ff fccf 	bl	8007a64 <_Balloc>
 80080c6:	4604      	mov	r4, r0
 80080c8:	b930      	cbnz	r0, 80080d8 <__d2b+0x24>
 80080ca:	4602      	mov	r2, r0
 80080cc:	4b25      	ldr	r3, [pc, #148]	; (8008164 <__d2b+0xb0>)
 80080ce:	4826      	ldr	r0, [pc, #152]	; (8008168 <__d2b+0xb4>)
 80080d0:	f240 310a 	movw	r1, #778	; 0x30a
 80080d4:	f7fd fb9c 	bl	8005810 <__assert_func>
 80080d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80080dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80080e0:	bb35      	cbnz	r5, 8008130 <__d2b+0x7c>
 80080e2:	2e00      	cmp	r6, #0
 80080e4:	9301      	str	r3, [sp, #4]
 80080e6:	d028      	beq.n	800813a <__d2b+0x86>
 80080e8:	4668      	mov	r0, sp
 80080ea:	9600      	str	r6, [sp, #0]
 80080ec:	f7ff fd82 	bl	8007bf4 <__lo0bits>
 80080f0:	9900      	ldr	r1, [sp, #0]
 80080f2:	b300      	cbz	r0, 8008136 <__d2b+0x82>
 80080f4:	9a01      	ldr	r2, [sp, #4]
 80080f6:	f1c0 0320 	rsb	r3, r0, #32
 80080fa:	fa02 f303 	lsl.w	r3, r2, r3
 80080fe:	430b      	orrs	r3, r1
 8008100:	40c2      	lsrs	r2, r0
 8008102:	6163      	str	r3, [r4, #20]
 8008104:	9201      	str	r2, [sp, #4]
 8008106:	9b01      	ldr	r3, [sp, #4]
 8008108:	61a3      	str	r3, [r4, #24]
 800810a:	2b00      	cmp	r3, #0
 800810c:	bf14      	ite	ne
 800810e:	2202      	movne	r2, #2
 8008110:	2201      	moveq	r2, #1
 8008112:	6122      	str	r2, [r4, #16]
 8008114:	b1d5      	cbz	r5, 800814c <__d2b+0x98>
 8008116:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800811a:	4405      	add	r5, r0
 800811c:	f8c9 5000 	str.w	r5, [r9]
 8008120:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008124:	f8c8 0000 	str.w	r0, [r8]
 8008128:	4620      	mov	r0, r4
 800812a:	b003      	add	sp, #12
 800812c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008130:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008134:	e7d5      	b.n	80080e2 <__d2b+0x2e>
 8008136:	6161      	str	r1, [r4, #20]
 8008138:	e7e5      	b.n	8008106 <__d2b+0x52>
 800813a:	a801      	add	r0, sp, #4
 800813c:	f7ff fd5a 	bl	8007bf4 <__lo0bits>
 8008140:	9b01      	ldr	r3, [sp, #4]
 8008142:	6163      	str	r3, [r4, #20]
 8008144:	2201      	movs	r2, #1
 8008146:	6122      	str	r2, [r4, #16]
 8008148:	3020      	adds	r0, #32
 800814a:	e7e3      	b.n	8008114 <__d2b+0x60>
 800814c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008150:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008154:	f8c9 0000 	str.w	r0, [r9]
 8008158:	6918      	ldr	r0, [r3, #16]
 800815a:	f7ff fd2b 	bl	8007bb4 <__hi0bits>
 800815e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008162:	e7df      	b.n	8008124 <__d2b+0x70>
 8008164:	08008b54 	.word	0x08008b54
 8008168:	08008bc8 	.word	0x08008bc8

0800816c <_calloc_r>:
 800816c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800816e:	fba1 2402 	umull	r2, r4, r1, r2
 8008172:	b94c      	cbnz	r4, 8008188 <_calloc_r+0x1c>
 8008174:	4611      	mov	r1, r2
 8008176:	9201      	str	r2, [sp, #4]
 8008178:	f7fd fc2e 	bl	80059d8 <_malloc_r>
 800817c:	9a01      	ldr	r2, [sp, #4]
 800817e:	4605      	mov	r5, r0
 8008180:	b930      	cbnz	r0, 8008190 <_calloc_r+0x24>
 8008182:	4628      	mov	r0, r5
 8008184:	b003      	add	sp, #12
 8008186:	bd30      	pop	{r4, r5, pc}
 8008188:	220c      	movs	r2, #12
 800818a:	6002      	str	r2, [r0, #0]
 800818c:	2500      	movs	r5, #0
 800818e:	e7f8      	b.n	8008182 <_calloc_r+0x16>
 8008190:	4621      	mov	r1, r4
 8008192:	f7fd fbad 	bl	80058f0 <memset>
 8008196:	e7f4      	b.n	8008182 <_calloc_r+0x16>

08008198 <_raise_r>:
 8008198:	291f      	cmp	r1, #31
 800819a:	b538      	push	{r3, r4, r5, lr}
 800819c:	4604      	mov	r4, r0
 800819e:	460d      	mov	r5, r1
 80081a0:	d904      	bls.n	80081ac <_raise_r+0x14>
 80081a2:	2316      	movs	r3, #22
 80081a4:	6003      	str	r3, [r0, #0]
 80081a6:	f04f 30ff 	mov.w	r0, #4294967295
 80081aa:	bd38      	pop	{r3, r4, r5, pc}
 80081ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80081ae:	b112      	cbz	r2, 80081b6 <_raise_r+0x1e>
 80081b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081b4:	b94b      	cbnz	r3, 80081ca <_raise_r+0x32>
 80081b6:	4620      	mov	r0, r4
 80081b8:	f000 f830 	bl	800821c <_getpid_r>
 80081bc:	462a      	mov	r2, r5
 80081be:	4601      	mov	r1, r0
 80081c0:	4620      	mov	r0, r4
 80081c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081c6:	f000 b817 	b.w	80081f8 <_kill_r>
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d00a      	beq.n	80081e4 <_raise_r+0x4c>
 80081ce:	1c59      	adds	r1, r3, #1
 80081d0:	d103      	bne.n	80081da <_raise_r+0x42>
 80081d2:	2316      	movs	r3, #22
 80081d4:	6003      	str	r3, [r0, #0]
 80081d6:	2001      	movs	r0, #1
 80081d8:	e7e7      	b.n	80081aa <_raise_r+0x12>
 80081da:	2400      	movs	r4, #0
 80081dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80081e0:	4628      	mov	r0, r5
 80081e2:	4798      	blx	r3
 80081e4:	2000      	movs	r0, #0
 80081e6:	e7e0      	b.n	80081aa <_raise_r+0x12>

080081e8 <raise>:
 80081e8:	4b02      	ldr	r3, [pc, #8]	; (80081f4 <raise+0xc>)
 80081ea:	4601      	mov	r1, r0
 80081ec:	6818      	ldr	r0, [r3, #0]
 80081ee:	f7ff bfd3 	b.w	8008198 <_raise_r>
 80081f2:	bf00      	nop
 80081f4:	2000000c 	.word	0x2000000c

080081f8 <_kill_r>:
 80081f8:	b538      	push	{r3, r4, r5, lr}
 80081fa:	4d07      	ldr	r5, [pc, #28]	; (8008218 <_kill_r+0x20>)
 80081fc:	2300      	movs	r3, #0
 80081fe:	4604      	mov	r4, r0
 8008200:	4608      	mov	r0, r1
 8008202:	4611      	mov	r1, r2
 8008204:	602b      	str	r3, [r5, #0]
 8008206:	f7fa fd65 	bl	8002cd4 <_kill>
 800820a:	1c43      	adds	r3, r0, #1
 800820c:	d102      	bne.n	8008214 <_kill_r+0x1c>
 800820e:	682b      	ldr	r3, [r5, #0]
 8008210:	b103      	cbz	r3, 8008214 <_kill_r+0x1c>
 8008212:	6023      	str	r3, [r4, #0]
 8008214:	bd38      	pop	{r3, r4, r5, pc}
 8008216:	bf00      	nop
 8008218:	20000d84 	.word	0x20000d84

0800821c <_getpid_r>:
 800821c:	f7fa bd52 	b.w	8002cc4 <_getpid>

08008220 <__sread>:
 8008220:	b510      	push	{r4, lr}
 8008222:	460c      	mov	r4, r1
 8008224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008228:	f000 f8a6 	bl	8008378 <_read_r>
 800822c:	2800      	cmp	r0, #0
 800822e:	bfab      	itete	ge
 8008230:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008232:	89a3      	ldrhlt	r3, [r4, #12]
 8008234:	181b      	addge	r3, r3, r0
 8008236:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800823a:	bfac      	ite	ge
 800823c:	6563      	strge	r3, [r4, #84]	; 0x54
 800823e:	81a3      	strhlt	r3, [r4, #12]
 8008240:	bd10      	pop	{r4, pc}

08008242 <__swrite>:
 8008242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008246:	461f      	mov	r7, r3
 8008248:	898b      	ldrh	r3, [r1, #12]
 800824a:	05db      	lsls	r3, r3, #23
 800824c:	4605      	mov	r5, r0
 800824e:	460c      	mov	r4, r1
 8008250:	4616      	mov	r6, r2
 8008252:	d505      	bpl.n	8008260 <__swrite+0x1e>
 8008254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008258:	2302      	movs	r3, #2
 800825a:	2200      	movs	r2, #0
 800825c:	f000 f868 	bl	8008330 <_lseek_r>
 8008260:	89a3      	ldrh	r3, [r4, #12]
 8008262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008266:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800826a:	81a3      	strh	r3, [r4, #12]
 800826c:	4632      	mov	r2, r6
 800826e:	463b      	mov	r3, r7
 8008270:	4628      	mov	r0, r5
 8008272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008276:	f000 b817 	b.w	80082a8 <_write_r>

0800827a <__sseek>:
 800827a:	b510      	push	{r4, lr}
 800827c:	460c      	mov	r4, r1
 800827e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008282:	f000 f855 	bl	8008330 <_lseek_r>
 8008286:	1c43      	adds	r3, r0, #1
 8008288:	89a3      	ldrh	r3, [r4, #12]
 800828a:	bf15      	itete	ne
 800828c:	6560      	strne	r0, [r4, #84]	; 0x54
 800828e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008292:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008296:	81a3      	strheq	r3, [r4, #12]
 8008298:	bf18      	it	ne
 800829a:	81a3      	strhne	r3, [r4, #12]
 800829c:	bd10      	pop	{r4, pc}

0800829e <__sclose>:
 800829e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a2:	f000 b813 	b.w	80082cc <_close_r>
	...

080082a8 <_write_r>:
 80082a8:	b538      	push	{r3, r4, r5, lr}
 80082aa:	4d07      	ldr	r5, [pc, #28]	; (80082c8 <_write_r+0x20>)
 80082ac:	4604      	mov	r4, r0
 80082ae:	4608      	mov	r0, r1
 80082b0:	4611      	mov	r1, r2
 80082b2:	2200      	movs	r2, #0
 80082b4:	602a      	str	r2, [r5, #0]
 80082b6:	461a      	mov	r2, r3
 80082b8:	f7f9 f85c 	bl	8001374 <_write>
 80082bc:	1c43      	adds	r3, r0, #1
 80082be:	d102      	bne.n	80082c6 <_write_r+0x1e>
 80082c0:	682b      	ldr	r3, [r5, #0]
 80082c2:	b103      	cbz	r3, 80082c6 <_write_r+0x1e>
 80082c4:	6023      	str	r3, [r4, #0]
 80082c6:	bd38      	pop	{r3, r4, r5, pc}
 80082c8:	20000d84 	.word	0x20000d84

080082cc <_close_r>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	4d06      	ldr	r5, [pc, #24]	; (80082e8 <_close_r+0x1c>)
 80082d0:	2300      	movs	r3, #0
 80082d2:	4604      	mov	r4, r0
 80082d4:	4608      	mov	r0, r1
 80082d6:	602b      	str	r3, [r5, #0]
 80082d8:	f7fa fd33 	bl	8002d42 <_close>
 80082dc:	1c43      	adds	r3, r0, #1
 80082de:	d102      	bne.n	80082e6 <_close_r+0x1a>
 80082e0:	682b      	ldr	r3, [r5, #0]
 80082e2:	b103      	cbz	r3, 80082e6 <_close_r+0x1a>
 80082e4:	6023      	str	r3, [r4, #0]
 80082e6:	bd38      	pop	{r3, r4, r5, pc}
 80082e8:	20000d84 	.word	0x20000d84

080082ec <_fstat_r>:
 80082ec:	b538      	push	{r3, r4, r5, lr}
 80082ee:	4d07      	ldr	r5, [pc, #28]	; (800830c <_fstat_r+0x20>)
 80082f0:	2300      	movs	r3, #0
 80082f2:	4604      	mov	r4, r0
 80082f4:	4608      	mov	r0, r1
 80082f6:	4611      	mov	r1, r2
 80082f8:	602b      	str	r3, [r5, #0]
 80082fa:	f7fa fd2e 	bl	8002d5a <_fstat>
 80082fe:	1c43      	adds	r3, r0, #1
 8008300:	d102      	bne.n	8008308 <_fstat_r+0x1c>
 8008302:	682b      	ldr	r3, [r5, #0]
 8008304:	b103      	cbz	r3, 8008308 <_fstat_r+0x1c>
 8008306:	6023      	str	r3, [r4, #0]
 8008308:	bd38      	pop	{r3, r4, r5, pc}
 800830a:	bf00      	nop
 800830c:	20000d84 	.word	0x20000d84

08008310 <_isatty_r>:
 8008310:	b538      	push	{r3, r4, r5, lr}
 8008312:	4d06      	ldr	r5, [pc, #24]	; (800832c <_isatty_r+0x1c>)
 8008314:	2300      	movs	r3, #0
 8008316:	4604      	mov	r4, r0
 8008318:	4608      	mov	r0, r1
 800831a:	602b      	str	r3, [r5, #0]
 800831c:	f7fa fd2d 	bl	8002d7a <_isatty>
 8008320:	1c43      	adds	r3, r0, #1
 8008322:	d102      	bne.n	800832a <_isatty_r+0x1a>
 8008324:	682b      	ldr	r3, [r5, #0]
 8008326:	b103      	cbz	r3, 800832a <_isatty_r+0x1a>
 8008328:	6023      	str	r3, [r4, #0]
 800832a:	bd38      	pop	{r3, r4, r5, pc}
 800832c:	20000d84 	.word	0x20000d84

08008330 <_lseek_r>:
 8008330:	b538      	push	{r3, r4, r5, lr}
 8008332:	4d07      	ldr	r5, [pc, #28]	; (8008350 <_lseek_r+0x20>)
 8008334:	4604      	mov	r4, r0
 8008336:	4608      	mov	r0, r1
 8008338:	4611      	mov	r1, r2
 800833a:	2200      	movs	r2, #0
 800833c:	602a      	str	r2, [r5, #0]
 800833e:	461a      	mov	r2, r3
 8008340:	f7fa fd26 	bl	8002d90 <_lseek>
 8008344:	1c43      	adds	r3, r0, #1
 8008346:	d102      	bne.n	800834e <_lseek_r+0x1e>
 8008348:	682b      	ldr	r3, [r5, #0]
 800834a:	b103      	cbz	r3, 800834e <_lseek_r+0x1e>
 800834c:	6023      	str	r3, [r4, #0]
 800834e:	bd38      	pop	{r3, r4, r5, pc}
 8008350:	20000d84 	.word	0x20000d84

08008354 <__ascii_mbtowc>:
 8008354:	b082      	sub	sp, #8
 8008356:	b901      	cbnz	r1, 800835a <__ascii_mbtowc+0x6>
 8008358:	a901      	add	r1, sp, #4
 800835a:	b142      	cbz	r2, 800836e <__ascii_mbtowc+0x1a>
 800835c:	b14b      	cbz	r3, 8008372 <__ascii_mbtowc+0x1e>
 800835e:	7813      	ldrb	r3, [r2, #0]
 8008360:	600b      	str	r3, [r1, #0]
 8008362:	7812      	ldrb	r2, [r2, #0]
 8008364:	1e10      	subs	r0, r2, #0
 8008366:	bf18      	it	ne
 8008368:	2001      	movne	r0, #1
 800836a:	b002      	add	sp, #8
 800836c:	4770      	bx	lr
 800836e:	4610      	mov	r0, r2
 8008370:	e7fb      	b.n	800836a <__ascii_mbtowc+0x16>
 8008372:	f06f 0001 	mvn.w	r0, #1
 8008376:	e7f8      	b.n	800836a <__ascii_mbtowc+0x16>

08008378 <_read_r>:
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	4d07      	ldr	r5, [pc, #28]	; (8008398 <_read_r+0x20>)
 800837c:	4604      	mov	r4, r0
 800837e:	4608      	mov	r0, r1
 8008380:	4611      	mov	r1, r2
 8008382:	2200      	movs	r2, #0
 8008384:	602a      	str	r2, [r5, #0]
 8008386:	461a      	mov	r2, r3
 8008388:	f7fa fcbe 	bl	8002d08 <_read>
 800838c:	1c43      	adds	r3, r0, #1
 800838e:	d102      	bne.n	8008396 <_read_r+0x1e>
 8008390:	682b      	ldr	r3, [r5, #0]
 8008392:	b103      	cbz	r3, 8008396 <_read_r+0x1e>
 8008394:	6023      	str	r3, [r4, #0]
 8008396:	bd38      	pop	{r3, r4, r5, pc}
 8008398:	20000d84 	.word	0x20000d84

0800839c <__ascii_wctomb>:
 800839c:	b149      	cbz	r1, 80083b2 <__ascii_wctomb+0x16>
 800839e:	2aff      	cmp	r2, #255	; 0xff
 80083a0:	bf85      	ittet	hi
 80083a2:	238a      	movhi	r3, #138	; 0x8a
 80083a4:	6003      	strhi	r3, [r0, #0]
 80083a6:	700a      	strbls	r2, [r1, #0]
 80083a8:	f04f 30ff 	movhi.w	r0, #4294967295
 80083ac:	bf98      	it	ls
 80083ae:	2001      	movls	r0, #1
 80083b0:	4770      	bx	lr
 80083b2:	4608      	mov	r0, r1
 80083b4:	4770      	bx	lr
	...

080083b8 <_init>:
 80083b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ba:	bf00      	nop
 80083bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083be:	bc08      	pop	{r3}
 80083c0:	469e      	mov	lr, r3
 80083c2:	4770      	bx	lr

080083c4 <_fini>:
 80083c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c6:	bf00      	nop
 80083c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ca:	bc08      	pop	{r3}
 80083cc:	469e      	mov	lr, r3
 80083ce:	4770      	bx	lr
